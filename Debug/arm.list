
arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007014  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080071ac  080071ac  000081ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071b4  080071b4  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  080071b4  080071b4  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071b4  080071b4  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071b4  080071b4  000081b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071b8  080071b8  000081b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080071bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  2000000c  080071c8  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  080071c8  00009968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b6d  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a32  00000000  00000000  00020ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  000245e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f9  00000000  00000000  00025bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b60  00000000  00000000  00026cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c61c  00000000  00000000  0003f821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966fe  00000000  00000000  0005be3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f253b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d00  00000000  00000000  000f2580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f8280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007194 	.word	0x08007194

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08007194 	.word	0x08007194

080001d8 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t Delay)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f000 fcf8 	bl	8000bd4 <HAL_GetTick>
 80001e4:	6138      	str	r0, [r7, #16]
  uint32_t wait = Delay;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	617b      	str	r3, [r7, #20]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001f0:	d017      	beq.n	8000222 <delay+0x4a>
  {
    wait += (uint32_t)(uwTickFreq);
 80001f2:	4b12      	ldr	r3, [pc, #72]	@ (800023c <delay+0x64>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	461a      	mov	r2, r3
 80001f8:	697b      	ldr	r3, [r7, #20]
 80001fa:	4413      	add	r3, r2
 80001fc:	617b      	str	r3, [r7, #20]
  }

  uint32_t timer_val;
  while((HAL_GetTick() - tickstart) < wait)
 80001fe:	e010      	b.n	8000222 <delay+0x4a>
  {
	  timer_val = __HAL_TIM_GET_COUNTER(&htim4);
 8000200:	4b0f      	ldr	r3, [pc, #60]	@ (8000240 <delay+0x68>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000206:	60fb      	str	r3, [r7, #12]
	  if (timer_val > 500) {
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800020e:	d908      	bls.n	8000222 <delay+0x4a>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000210:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000214:	480b      	ldr	r0, [pc, #44]	@ (8000244 <delay+0x6c>)
 8000216:	f000 ff90 	bl	800113a <HAL_GPIO_TogglePin>
		  __HAL_TIM_SET_COUNTER(&htim4, 0);
 800021a:	4b09      	ldr	r3, [pc, #36]	@ (8000240 <delay+0x68>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2200      	movs	r2, #0
 8000220:	625a      	str	r2, [r3, #36]	@ 0x24
  while((HAL_GetTick() - tickstart) < wait)
 8000222:	f000 fcd7 	bl	8000bd4 <HAL_GetTick>
 8000226:	4602      	mov	r2, r0
 8000228:	693b      	ldr	r3, [r7, #16]
 800022a:	1ad3      	subs	r3, r2, r3
 800022c:	697a      	ldr	r2, [r7, #20]
 800022e:	429a      	cmp	r2, r3
 8000230:	d8e6      	bhi.n	8000200 <delay+0x28>
	  }
  }
}
 8000232:	bf00      	nop
 8000234:	bf00      	nop
 8000236:	3718      	adds	r7, #24
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000008 	.word	0x20000008
 8000240:	20000164 	.word	0x20000164
 8000244:	40020c00 	.word	0x40020c00

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 fc5c 	bl	8000b08 <HAL_Init>

  /* Configure the system clock */
  // SystemClock_Config();

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000250:	f000 f82c 	bl	80002ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f000 f95a 	bl	800050c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000258:	f000 f848 	bl	80002ec <MX_I2C1_Init>
  MX_I2S2_Init();
 800025c:	f000 f874 	bl	8000348 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000260:	f000 f8a0 	bl	80003a4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000264:	f000 f8ce 	bl	8000404 <MX_SPI1_Init>
  // MX_USB_HOST_Init();
  MX_TIM4_Init();
 8000268:	f000 f902 	bl	8000470 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 800026c:	480d      	ldr	r0, [pc, #52]	@ (80002a4 <main+0x5c>)
 800026e:	f004 f833 	bl	80042d8 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE BEGIN WHILE */
    // Green LED (LD3)
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000278:	480b      	ldr	r0, [pc, #44]	@ (80002a8 <main+0x60>)
 800027a:	f000 ff45 	bl	8001108 <HAL_GPIO_WritePin>
    delay(500);
 800027e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000282:	f7ff ffa9 	bl	80001d8 <delay>
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800028c:	4806      	ldr	r0, [pc, #24]	@ (80002a8 <main+0x60>)
 800028e:	f000 ff3b 	bl	8001108 <HAL_GPIO_WritePin>
    delay(500);
 8000292:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000296:	f7ff ff9f 	bl	80001d8 <delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800029a:	f006 fd9b 	bl	8006dd4 <MX_USB_HOST_Process>
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800029e:	bf00      	nop
 80002a0:	e7e7      	b.n	8000272 <main+0x2a>
 80002a2:	bf00      	nop
 80002a4:	20000164 	.word	0x20000164
 80002a8:	40020c00 	.word	0x40020c00

080002ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002b2:	463b      	mov	r3, r7
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80002c2:	2301      	movs	r3, #1
 80002c4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80002c6:	23c8      	movs	r3, #200	@ 0xc8
 80002c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80002ca:	2305      	movs	r3, #5
 80002cc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80002ce:	2302      	movs	r3, #2
 80002d0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002d2:	463b      	mov	r3, r7
 80002d4:	4618      	mov	r0, r3
 80002d6:	f003 fdd5 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80002e0:	f000 f9ee 	bl	80006c0 <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3718      	adds	r7, #24
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f0:	4b12      	ldr	r3, [pc, #72]	@ (800033c <MX_I2C1_Init+0x50>)
 80002f2:	4a13      	ldr	r2, [pc, #76]	@ (8000340 <MX_I2C1_Init+0x54>)
 80002f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <MX_I2C1_Init+0x50>)
 80002f8:	4a12      	ldr	r2, [pc, #72]	@ (8000344 <MX_I2C1_Init+0x58>)
 80002fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000302:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <MX_I2C1_Init+0x50>)
 800030a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800030e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000310:	4b0a      	ldr	r3, [pc, #40]	@ (800033c <MX_I2C1_Init+0x50>)
 8000312:	2200      	movs	r2, #0
 8000314:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000316:	4b09      	ldr	r3, [pc, #36]	@ (800033c <MX_I2C1_Init+0x50>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031c:	4b07      	ldr	r3, [pc, #28]	@ (800033c <MX_I2C1_Init+0x50>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000322:	4b06      	ldr	r3, [pc, #24]	@ (800033c <MX_I2C1_Init+0x50>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000328:	4804      	ldr	r0, [pc, #16]	@ (800033c <MX_I2C1_Init+0x50>)
 800032a:	f002 ffa7 	bl	800327c <HAL_I2C_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000334:	f000 f9c4 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000028 	.word	0x20000028
 8000340:	40005400 	.word	0x40005400
 8000344:	000186a0 	.word	0x000186a0

08000348 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <MX_I2S2_Init+0x50>)
 800034e:	4a13      	ldr	r2, [pc, #76]	@ (800039c <MX_I2S2_Init+0x54>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000352:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_I2S2_Init+0x50>)
 8000354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000358:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800035a:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <MX_I2S2_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000360:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <MX_I2S2_Init+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <MX_I2S2_Init+0x50>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800036c:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <MX_I2S2_Init+0x50>)
 800036e:	4a0c      	ldr	r2, [pc, #48]	@ (80003a0 <MX_I2S2_Init+0x58>)
 8000370:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000372:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <MX_I2S2_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000378:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <MX_I2S2_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800037e:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <MX_I2S2_Init+0x50>)
 8000380:	2201      	movs	r2, #1
 8000382:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	@ (8000398 <MX_I2S2_Init+0x50>)
 8000386:	f003 f8bd 	bl	8003504 <HAL_I2S_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000390:	f000 f996 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000007c 	.word	0x2000007c
 800039c:	40003800 	.word	0x40003800
 80003a0:	00017700 	.word	0x00017700

080003a4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80003a8:	4b13      	ldr	r3, [pc, #76]	@ (80003f8 <MX_I2S3_Init+0x54>)
 80003aa:	4a14      	ldr	r2, [pc, #80]	@ (80003fc <MX_I2S3_Init+0x58>)
 80003ac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80003ae:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <MX_I2S3_Init+0x54>)
 80003b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003b4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80003b6:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <MX_I2S3_Init+0x54>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <MX_I2S3_Init+0x54>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80003c2:	4b0d      	ldr	r3, [pc, #52]	@ (80003f8 <MX_I2S3_Init+0x54>)
 80003c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003c8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	@ (80003f8 <MX_I2S3_Init+0x54>)
 80003cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000400 <MX_I2S3_Init+0x5c>)
 80003ce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80003d0:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <MX_I2S3_Init+0x54>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80003d6:	4b08      	ldr	r3, [pc, #32]	@ (80003f8 <MX_I2S3_Init+0x54>)
 80003d8:	2200      	movs	r2, #0
 80003da:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80003dc:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <MX_I2S3_Init+0x54>)
 80003de:	2200      	movs	r2, #0
 80003e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <MX_I2S3_Init+0x54>)
 80003e4:	f003 f88e 	bl	8003504 <HAL_I2S_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80003ee:	f000 f967 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	200000c4 	.word	0x200000c4
 80003fc:	40003c00 	.word	0x40003c00
 8000400:	00017700 	.word	0x00017700

08000404 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000408:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <MX_SPI1_Init+0x64>)
 800040a:	4a18      	ldr	r2, [pc, #96]	@ (800046c <MX_SPI1_Init+0x68>)
 800040c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040e:	4b16      	ldr	r3, [pc, #88]	@ (8000468 <MX_SPI1_Init+0x64>)
 8000410:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000414:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000416:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <MX_SPI1_Init+0x64>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800041c:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <MX_SPI1_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000422:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <MX_SPI1_Init+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000428:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <MX_SPI1_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <MX_SPI1_Init+0x64>)
 8000430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000434:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000436:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <MX_SPI1_Init+0x64>)
 8000438:	2200      	movs	r2, #0
 800043a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043c:	4b0a      	ldr	r3, [pc, #40]	@ (8000468 <MX_SPI1_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <MX_SPI1_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000448:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <MX_SPI1_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <MX_SPI1_Init+0x64>)
 8000450:	220a      	movs	r2, #10
 8000452:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000454:	4804      	ldr	r0, [pc, #16]	@ (8000468 <MX_SPI1_Init+0x64>)
 8000456:	f003 fe67 	bl	8004128 <HAL_SPI_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000460:	f000 f92e 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	2000010c 	.word	0x2000010c
 800046c:	40013000 	.word	0x40013000

08000470 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000484:	463b      	mov	r3, r7
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800048c:	4b1d      	ldr	r3, [pc, #116]	@ (8000504 <MX_TIM4_Init+0x94>)
 800048e:	4a1e      	ldr	r2, [pc, #120]	@ (8000508 <MX_TIM4_Init+0x98>)
 8000490:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 8000492:	4b1c      	ldr	r3, [pc, #112]	@ (8000504 <MX_TIM4_Init+0x94>)
 8000494:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000498:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049a:	4b1a      	ldr	r3, [pc, #104]	@ (8000504 <MX_TIM4_Init+0x94>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80004a0:	4b18      	ldr	r3, [pc, #96]	@ (8000504 <MX_TIM4_Init+0x94>)
 80004a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a8:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <MX_TIM4_Init+0x94>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ae:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <MX_TIM4_Init+0x94>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004b4:	4813      	ldr	r0, [pc, #76]	@ (8000504 <MX_TIM4_Init+0x94>)
 80004b6:	f003 fec0 	bl	800423a <HAL_TIM_Base_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80004c0:	f000 f8fe 	bl	80006c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	4619      	mov	r1, r3
 80004d0:	480c      	ldr	r0, [pc, #48]	@ (8000504 <MX_TIM4_Init+0x94>)
 80004d2:	f003 ff5b 	bl	800438c <HAL_TIM_ConfigClockSource>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80004dc:	f000 f8f0 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e0:	2300      	movs	r3, #0
 80004e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004e8:	463b      	mov	r3, r7
 80004ea:	4619      	mov	r1, r3
 80004ec:	4805      	ldr	r0, [pc, #20]	@ (8000504 <MX_TIM4_Init+0x94>)
 80004ee:	f004 f93b 	bl	8004768 <HAL_TIMEx_MasterConfigSynchronization>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80004f8:	f000 f8e2 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000164 	.word	0x20000164
 8000508:	40000800 	.word	0x40000800

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08c      	sub	sp, #48	@ 0x30
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 031c 	add.w	r3, r7, #28
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
 8000526:	4b61      	ldr	r3, [pc, #388]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a60      	ldr	r2, [pc, #384]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 800052c:	f043 0310 	orr.w	r3, r3, #16
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b5e      	ldr	r3, [pc, #376]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0310 	and.w	r3, r3, #16
 800053a:	61bb      	str	r3, [r7, #24]
 800053c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	4b5a      	ldr	r3, [pc, #360]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	4a59      	ldr	r2, [pc, #356]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	6313      	str	r3, [r2, #48]	@ 0x30
 800054e:	4b57      	ldr	r3, [pc, #348]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
 800055e:	4b53      	ldr	r3, [pc, #332]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a52      	ldr	r2, [pc, #328]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b50      	ldr	r3, [pc, #320]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	4b4c      	ldr	r3, [pc, #304]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a4b      	ldr	r2, [pc, #300]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b49      	ldr	r3, [pc, #292]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	4b45      	ldr	r3, [pc, #276]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a44      	ldr	r2, [pc, #272]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a2:	4b42      	ldr	r3, [pc, #264]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	4b3e      	ldr	r3, [pc, #248]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a3d      	ldr	r2, [pc, #244]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b3b      	ldr	r3, [pc, #236]	@ (80006ac <MX_GPIO_Init+0x1a0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0308 	and.w	r3, r3, #8
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2108      	movs	r1, #8
 80005ce:	4838      	ldr	r0, [pc, #224]	@ (80006b0 <MX_GPIO_Init+0x1a4>)
 80005d0:	f000 fd9a 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2101      	movs	r1, #1
 80005d8:	4836      	ldr	r0, [pc, #216]	@ (80006b4 <MX_GPIO_Init+0x1a8>)
 80005da:	f000 fd95 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005de:	2200      	movs	r2, #0
 80005e0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80005e4:	4834      	ldr	r0, [pc, #208]	@ (80006b8 <MX_GPIO_Init+0x1ac>)
 80005e6:	f000 fd8f 	bl	8001108 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005ea:	2304      	movs	r3, #4
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	482c      	ldr	r0, [pc, #176]	@ (80006b0 <MX_GPIO_Init+0x1a4>)
 80005fe:	f000 fbff 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000602:	2308      	movs	r3, #8
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4619      	mov	r1, r3
 8000618:	4825      	ldr	r0, [pc, #148]	@ (80006b0 <MX_GPIO_Init+0x1a4>)
 800061a:	f000 fbf1 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800061e:	2332      	movs	r3, #50	@ 0x32
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000622:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4619      	mov	r1, r3
 8000632:	481f      	ldr	r0, [pc, #124]	@ (80006b0 <MX_GPIO_Init+0x1a4>)
 8000634:	f000 fbe4 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000638:	2301      	movs	r3, #1
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	4819      	ldr	r0, [pc, #100]	@ (80006b4 <MX_GPIO_Init+0x1a8>)
 8000650:	f000 fbd6 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000654:	2301      	movs	r3, #1
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4815      	ldr	r0, [pc, #84]	@ (80006bc <MX_GPIO_Init+0x1b0>)
 8000668:	f000 fbca 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800066c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000670:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4619      	mov	r1, r3
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <MX_GPIO_Init+0x1ac>)
 8000686:	f000 fbbb 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800068a:	2320      	movs	r3, #32
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <MX_GPIO_Init+0x1ac>)
 800069e:	f000 fbaf 	bl	8000e00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a2:	bf00      	nop
 80006a4:	3730      	adds	r7, #48	@ 0x30
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40020800 	.word	0x40020800
 80006b8:	40020c00 	.word	0x40020c00
 80006bc:	40020000 	.word	0x40020000

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <Error_Handler+0x8>

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006da:	4a0f      	ldr	r2, [pc, #60]	@ (8000718 <HAL_MspInit+0x4c>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <HAL_MspInit+0x4c>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f6:	4a08      	ldr	r2, [pc, #32]	@ (8000718 <HAL_MspInit+0x4c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <HAL_MspInit+0x4c>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800070a:	2007      	movs	r0, #7
 800070c:	f000 fb44 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800

0800071c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <HAL_I2C_MspInit+0x84>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d12c      	bne.n	8000798 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <HAL_I2C_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a17      	ldr	r2, [pc, #92]	@ (80007a4 <HAL_I2C_MspInit+0x88>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <HAL_I2C_MspInit+0x88>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800075a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800075e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000760:	2312      	movs	r3, #18
 8000762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000764:	2301      	movs	r3, #1
 8000766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076c:	2304      	movs	r3, #4
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	480c      	ldr	r0, [pc, #48]	@ (80007a8 <HAL_I2C_MspInit+0x8c>)
 8000778:	f000 fb42 	bl	8000e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_I2C_MspInit+0x88>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <HAL_I2C_MspInit+0x88>)
 8000786:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800078a:	6413      	str	r3, [r2, #64]	@ 0x40
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_I2C_MspInit+0x88>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	@ 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40005400 	.word	0x40005400
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400

080007ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	@ 0x38
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a59      	ldr	r2, [pc, #356]	@ (8000930 <HAL_I2S_MspInit+0x184>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d15b      	bne.n	8000886 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
 80007d2:	4b58      	ldr	r3, [pc, #352]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	4a57      	ldr	r2, [pc, #348]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007de:	4b55      	ldr	r3, [pc, #340]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e6:	623b      	str	r3, [r7, #32]
 80007e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	4b51      	ldr	r3, [pc, #324]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a50      	ldr	r2, [pc, #320]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b4e      	ldr	r3, [pc, #312]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b4a      	ldr	r3, [pc, #296]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a49      	ldr	r2, [pc, #292]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b47      	ldr	r3, [pc, #284]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000822:	2304      	movs	r3, #4
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000832:	2306      	movs	r3, #6
 8000834:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083a:	4619      	mov	r1, r3
 800083c:	483e      	ldr	r0, [pc, #248]	@ (8000938 <HAL_I2S_MspInit+0x18c>)
 800083e:	f000 fadf 	bl	8000e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000842:	2308      	movs	r3, #8
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000852:	2305      	movs	r3, #5
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	4836      	ldr	r0, [pc, #216]	@ (8000938 <HAL_I2S_MspInit+0x18c>)
 800085e:	f000 facf 	bl	8000e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000862:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000874:	2305      	movs	r3, #5
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087c:	4619      	mov	r1, r3
 800087e:	482f      	ldr	r0, [pc, #188]	@ (800093c <HAL_I2S_MspInit+0x190>)
 8000880:	f000 fabe 	bl	8000e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000884:	e04f      	b.n	8000926 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a2d      	ldr	r2, [pc, #180]	@ (8000940 <HAL_I2S_MspInit+0x194>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d14a      	bne.n	8000926 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	4a26      	ldr	r2, [pc, #152]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 800089a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800089e:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a0:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80008bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d0:	4a18      	ldr	r2, [pc, #96]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d8:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <HAL_I2S_MspInit+0x188>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e4:	2310      	movs	r3, #16
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f4:	2306      	movs	r3, #6
 80008f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	4811      	ldr	r0, [pc, #68]	@ (8000944 <HAL_I2S_MspInit+0x198>)
 8000900:	f000 fa7e 	bl	8000e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000904:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000916:	2306      	movs	r3, #6
 8000918:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <HAL_I2S_MspInit+0x18c>)
 8000922:	f000 fa6d 	bl	8000e00 <HAL_GPIO_Init>
}
 8000926:	bf00      	nop
 8000928:	3738      	adds	r7, #56	@ 0x38
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40003800 	.word	0x40003800
 8000934:	40023800 	.word	0x40023800
 8000938:	40020800 	.word	0x40020800
 800093c:	40020400 	.word	0x40020400
 8000940:	40003c00 	.word	0x40003c00
 8000944:	40020000 	.word	0x40020000

08000948 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	@ 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <HAL_SPI_MspInit+0x84>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d12b      	bne.n	80009c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <HAL_SPI_MspInit+0x88>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	4a17      	ldr	r2, [pc, #92]	@ (80009d0 <HAL_SPI_MspInit+0x88>)
 8000974:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000978:	6453      	str	r3, [r2, #68]	@ 0x44
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <HAL_SPI_MspInit+0x88>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <HAL_SPI_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <HAL_SPI_MspInit+0x88>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <HAL_SPI_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009a2:	23e0      	movs	r3, #224	@ 0xe0
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009b2:	2305      	movs	r3, #5
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <HAL_SPI_MspInit+0x8c>)
 80009be:	f000 fa1f 	bl	8000e00 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	@ 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40013000 	.word	0x40013000
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000

080009d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a14 <HAL_TIM_Base_MspInit+0x3c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d10d      	bne.n	8000a06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <HAL_TIM_Base_MspInit+0x40>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a09      	ldr	r2, [pc, #36]	@ (8000a18 <HAL_TIM_Base_MspInit+0x40>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <HAL_TIM_Base_MspInit+0x40>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40000800 	.word	0x40000800
 8000a18:	40023800 	.word	0x40023800

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a72:	f000 f89b 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <OTG_FS_IRQHandler+0x10>)
 8000a82:	f000 fdcb 	bl	800161c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000588 	.word	0x20000588

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ab8:	f7ff ffea 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	@ (8000af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f006 fb33 	bl	800714c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff fbaf 	bl	8000248 <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af8:	080071bc 	.word	0x080071bc
  ldr r2, =_sbss
 8000afc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b00:	20000968 	.word	0x20000968

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <HAL_Init+0x40>)
 8000b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <HAL_Init+0x40>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <HAL_Init+0x40>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f931 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff fdc6 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f93b 	bl	8000de6 <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 f911 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	200001ac 	.word	0x200001ac

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200001ac 	.word	0x200001ac

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	@ (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	@ (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	@ 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	@ 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f7ff ff8e 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff47 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff5c 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff8e 	bl	8000cec <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff5d 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffb0 	bl	8000d54 <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	@ 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	e159      	b.n	80010d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f040 8148 	bne.w	80010ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d005      	beq.n	8000e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d130      	bne.n	8000eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	f003 0201 	and.w	r2, r3, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d017      	beq.n	8000ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d123      	bne.n	8000f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	69b9      	ldr	r1, [r7, #24]
 8000f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0203 	and.w	r2, r3, #3
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80a2 	beq.w	80010ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b57      	ldr	r3, [pc, #348]	@ (80010e8 <HAL_GPIO_Init+0x2e8>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	4a56      	ldr	r2, [pc, #344]	@ (80010e8 <HAL_GPIO_Init+0x2e8>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f96:	4b54      	ldr	r3, [pc, #336]	@ (80010e8 <HAL_GPIO_Init+0x2e8>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa2:	4a52      	ldr	r2, [pc, #328]	@ (80010ec <HAL_GPIO_Init+0x2ec>)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a49      	ldr	r2, [pc, #292]	@ (80010f0 <HAL_GPIO_Init+0x2f0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x202>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	@ (80010f4 <HAL_GPIO_Init+0x2f4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x1fe>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a47      	ldr	r2, [pc, #284]	@ (80010f8 <HAL_GPIO_Init+0x2f8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x1fa>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a46      	ldr	r2, [pc, #280]	@ (80010fc <HAL_GPIO_Init+0x2fc>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x1f6>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a45      	ldr	r2, [pc, #276]	@ (8001100 <HAL_GPIO_Init+0x300>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x1f2>
 8000fee:	2304      	movs	r3, #4
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8001002:	2300      	movs	r3, #0
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001014:	4935      	ldr	r1, [pc, #212]	@ (80010ec <HAL_GPIO_Init+0x2ec>)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001022:	4b38      	ldr	r3, [pc, #224]	@ (8001104 <HAL_GPIO_Init+0x304>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001046:	4a2f      	ldr	r2, [pc, #188]	@ (8001104 <HAL_GPIO_Init+0x304>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800104c:	4b2d      	ldr	r3, [pc, #180]	@ (8001104 <HAL_GPIO_Init+0x304>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001070:	4a24      	ldr	r2, [pc, #144]	@ (8001104 <HAL_GPIO_Init+0x304>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001076:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <HAL_GPIO_Init+0x304>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109a:	4a1a      	ldr	r2, [pc, #104]	@ (8001104 <HAL_GPIO_Init+0x304>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a0:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <HAL_GPIO_Init+0x304>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <HAL_GPIO_Init+0x304>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	f67f aea2 	bls.w	8000e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3724      	adds	r7, #36	@ 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40013800 	.word	0x40013800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40021000 	.word	0x40021000
 8001104:	40013c00 	.word	0x40013c00

08001108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001124:	e003      	b.n	800112e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	041a      	lsls	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	619a      	str	r2, [r3, #24]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113a:	b480      	push	{r7}
 800113c:	b085      	sub	sp, #20
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800114c:	887a      	ldrh	r2, [r7, #2]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4013      	ands	r3, r2
 8001152:	041a      	lsls	r2, r3, #16
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43d9      	mvns	r1, r3
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	400b      	ands	r3, r1
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800116e:	b590      	push	{r4, r7, lr}
 8001170:	b08b      	sub	sp, #44	@ 0x2c
 8001172:	af04      	add	r7, sp, #16
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	4608      	mov	r0, r1
 8001178:	4611      	mov	r1, r2
 800117a:	461a      	mov	r2, r3
 800117c:	4603      	mov	r3, r0
 800117e:	70fb      	strb	r3, [r7, #3]
 8001180:	460b      	mov	r3, r1
 8001182:	70bb      	strb	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001188:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800118a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_HCD_HC_Init+0x2c>
 8001196:	2302      	movs	r3, #2
 8001198:	e09d      	b.n	80012d6 <HAL_HCD_HC_Init+0x168>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80011a2:	78fa      	ldrb	r2, [r7, #3]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	1a9b      	subs	r3, r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	3319      	adds	r3, #25
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80011b6:	78fa      	ldrb	r2, [r7, #3]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	1a9b      	subs	r3, r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	3314      	adds	r3, #20
 80011c6:	787a      	ldrb	r2, [r7, #1]
 80011c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80011ca:	78fa      	ldrb	r2, [r7, #3]
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	3315      	adds	r3, #21
 80011da:	78fa      	ldrb	r2, [r7, #3]
 80011dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80011de:	78fa      	ldrb	r2, [r7, #3]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	1a9b      	subs	r3, r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	3326      	adds	r3, #38	@ 0x26
 80011ee:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80011f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80011f4:	78fa      	ldrb	r2, [r7, #3]
 80011f6:	78bb      	ldrb	r3, [r7, #2]
 80011f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011fc:	b2d8      	uxtb	r0, r3
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3316      	adds	r3, #22
 800120c:	4602      	mov	r2, r0
 800120e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 fb82 	bl	800191e <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800121a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800121e:	2b00      	cmp	r3, #0
 8001220:	da0a      	bge.n	8001238 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001222:	78fa      	ldrb	r2, [r7, #3]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	3317      	adds	r3, #23
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e009      	b.n	800124c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001238:	78fa      	ldrb	r2, [r7, #3]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	3317      	adds	r3, #23
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fcf1 	bl	8004c38 <USB_GetHostSpeed>
 8001256:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001258:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800125c:	2b01      	cmp	r3, #1
 800125e:	d10b      	bne.n	8001278 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001260:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001264:	2b01      	cmp	r3, #1
 8001266:	d107      	bne.n	8001278 <HAL_HCD_HC_Init+0x10a>
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2bbc      	cmp	r3, #188	@ 0xbc
 8001272:	d901      	bls.n	8001278 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001274:	23bc      	movs	r3, #188	@ 0xbc
 8001276:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001278:	78fa      	ldrb	r2, [r7, #3]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	3318      	adds	r3, #24
 8001288:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800128c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800128e:	78fa      	ldrb	r2, [r7, #3]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	b298      	uxth	r0, r3
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	1a9b      	subs	r3, r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3328      	adds	r3, #40	@ 0x28
 80012a2:	4602      	mov	r2, r0
 80012a4:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	787c      	ldrb	r4, [r7, #1]
 80012b0:	78ba      	ldrb	r2, [r7, #2]
 80012b2:	78f9      	ldrb	r1, [r7, #3]
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	4623      	mov	r3, r4
 80012c4:	f003 fcd0 	bl	8004c68 <USB_HC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
	...

080012e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	4608      	mov	r0, r1
 80012ea:	4611      	mov	r1, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	70fb      	strb	r3, [r7, #3]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70bb      	strb	r3, [r7, #2]
 80012f6:	4613      	mov	r3, r2
 80012f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80012fa:	78fa      	ldrb	r2, [r7, #3]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	1a9b      	subs	r3, r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	3317      	adds	r3, #23
 800130a:	78ba      	ldrb	r2, [r7, #2]
 800130c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800130e:	78fa      	ldrb	r2, [r7, #3]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	3326      	adds	r3, #38	@ 0x26
 800131e:	787a      	ldrb	r2, [r7, #1]
 8001320:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001322:	7c3b      	ldrb	r3, [r7, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d114      	bne.n	8001352 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001328:	78fa      	ldrb	r2, [r7, #3]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	332a      	adds	r3, #42	@ 0x2a
 8001338:	2203      	movs	r2, #3
 800133a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800133c:	78fa      	ldrb	r2, [r7, #3]
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	3319      	adds	r3, #25
 800134c:	7f3a      	ldrb	r2, [r7, #28]
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e009      	b.n	8001366 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	332a      	adds	r3, #42	@ 0x2a
 8001362:	2202      	movs	r2, #2
 8001364:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001366:	787b      	ldrb	r3, [r7, #1]
 8001368:	2b03      	cmp	r3, #3
 800136a:	f200 8102 	bhi.w	8001572 <HAL_HCD_HC_SubmitRequest+0x292>
 800136e:	a201      	add	r2, pc, #4	@ (adr r2, 8001374 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	08001385 	.word	0x08001385
 8001378:	0800155d 	.word	0x0800155d
 800137c:	08001449 	.word	0x08001449
 8001380:	080014d3 	.word	0x080014d3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001384:	7c3b      	ldrb	r3, [r7, #16]
 8001386:	2b01      	cmp	r3, #1
 8001388:	f040 80f5 	bne.w	8001576 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800138c:	78bb      	ldrb	r3, [r7, #2]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d12d      	bne.n	80013ee <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001392:	8b3b      	ldrh	r3, [r7, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d109      	bne.n	80013ac <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001398:	78fa      	ldrb	r2, [r7, #3]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	333d      	adds	r3, #61	@ 0x3d
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	333d      	adds	r3, #61	@ 0x3d
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10a      	bne.n	80013d8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013c2:	78fa      	ldrb	r2, [r7, #3]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	332a      	adds	r3, #42	@ 0x2a
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80013d6:	e0ce      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013d8:	78fa      	ldrb	r2, [r7, #3]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	332a      	adds	r3, #42	@ 0x2a
 80013e8:	2202      	movs	r2, #2
 80013ea:	701a      	strb	r2, [r3, #0]
      break;
 80013ec:	e0c3      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	331a      	adds	r3, #26
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	f040 80b8 	bne.w	8001576 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001406:	78fa      	ldrb	r2, [r7, #3]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	333c      	adds	r3, #60	@ 0x3c
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10a      	bne.n	8001432 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800141c:	78fa      	ldrb	r2, [r7, #3]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	332a      	adds	r3, #42	@ 0x2a
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
      break;
 8001430:	e0a1      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001432:	78fa      	ldrb	r2, [r7, #3]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	332a      	adds	r3, #42	@ 0x2a
 8001442:	2202      	movs	r2, #2
 8001444:	701a      	strb	r2, [r3, #0]
      break;
 8001446:	e096      	b.n	8001576 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001448:	78bb      	ldrb	r3, [r7, #2]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d120      	bne.n	8001490 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800144e:	78fa      	ldrb	r2, [r7, #3]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	333d      	adds	r3, #61	@ 0x3d
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10a      	bne.n	800147a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001464:	78fa      	ldrb	r2, [r7, #3]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	332a      	adds	r3, #42	@ 0x2a
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001478:	e07e      	b.n	8001578 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	1a9b      	subs	r3, r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	332a      	adds	r3, #42	@ 0x2a
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]
      break;
 800148e:	e073      	b.n	8001578 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001490:	78fa      	ldrb	r2, [r7, #3]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	333c      	adds	r3, #60	@ 0x3c
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10a      	bne.n	80014bc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014a6:	78fa      	ldrb	r2, [r7, #3]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	332a      	adds	r3, #42	@ 0x2a
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
      break;
 80014ba:	e05d      	b.n	8001578 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014bc:	78fa      	ldrb	r2, [r7, #3]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	332a      	adds	r3, #42	@ 0x2a
 80014cc:	2202      	movs	r2, #2
 80014ce:	701a      	strb	r2, [r3, #0]
      break;
 80014d0:	e052      	b.n	8001578 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80014d2:	78bb      	ldrb	r3, [r7, #2]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d120      	bne.n	800151a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014d8:	78fa      	ldrb	r2, [r7, #3]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	333d      	adds	r3, #61	@ 0x3d
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10a      	bne.n	8001504 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014ee:	78fa      	ldrb	r2, [r7, #3]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	332a      	adds	r3, #42	@ 0x2a
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001502:	e039      	b.n	8001578 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001504:	78fa      	ldrb	r2, [r7, #3]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	1a9b      	subs	r3, r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	332a      	adds	r3, #42	@ 0x2a
 8001514:	2202      	movs	r2, #2
 8001516:	701a      	strb	r2, [r3, #0]
      break;
 8001518:	e02e      	b.n	8001578 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800151a:	78fa      	ldrb	r2, [r7, #3]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	333c      	adds	r3, #60	@ 0x3c
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10a      	bne.n	8001546 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001530:	78fa      	ldrb	r2, [r7, #3]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	332a      	adds	r3, #42	@ 0x2a
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
      break;
 8001544:	e018      	b.n	8001578 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001546:	78fa      	ldrb	r2, [r7, #3]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	332a      	adds	r3, #42	@ 0x2a
 8001556:	2202      	movs	r2, #2
 8001558:	701a      	strb	r2, [r3, #0]
      break;
 800155a:	e00d      	b.n	8001578 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800155c:	78fa      	ldrb	r2, [r7, #3]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	1a9b      	subs	r3, r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	332a      	adds	r3, #42	@ 0x2a
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
      break;
 8001570:	e002      	b.n	8001578 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001572:	bf00      	nop
 8001574:	e000      	b.n	8001578 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001576:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001578:	78fa      	ldrb	r2, [r7, #3]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	1a9b      	subs	r3, r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	332c      	adds	r3, #44	@ 0x2c
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	8b39      	ldrh	r1, [r7, #24]
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4403      	add	r3, r0
 800159c:	3334      	adds	r3, #52	@ 0x34
 800159e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80015a0:	78fa      	ldrb	r2, [r7, #3]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	334c      	adds	r3, #76	@ 0x4c
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	3338      	adds	r3, #56	@ 0x38
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	3315      	adds	r3, #21
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80015dc:	78fa      	ldrb	r2, [r7, #3]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	334d      	adds	r3, #77	@ 0x4d
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	4613      	mov	r3, r2
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	3310      	adds	r3, #16
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	1d19      	adds	r1, r3, #4
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	461a      	mov	r2, r3
 800160c:	f003 fc42 	bl	8004e94 <USB_HC_StartXfer>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop

0800161c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f003 fa52 	bl	8004adc <USB_GetMode>
 8001638:	4603      	mov	r3, r0
 800163a:	2b01      	cmp	r3, #1
 800163c:	f040 80fb 	bne.w	8001836 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f003 fa15 	bl	8004a74 <USB_ReadInterrupts>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80f1 	beq.w	8001834 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f003 fa0c 	bl	8004a74 <USB_ReadInterrupts>
 800165c:	4603      	mov	r3, r0
 800165e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001662:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001666:	d104      	bne.n	8001672 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001670:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f003 f9fc 	bl	8004a74 <USB_ReadInterrupts>
 800167c:	4603      	mov	r3, r0
 800167e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001686:	d104      	bne.n	8001692 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001690:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f003 f9ec 	bl	8004a74 <USB_ReadInterrupts>
 800169c:	4603      	mov	r3, r0
 800169e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80016a6:	d104      	bne.n	80016b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 f9dc 	bl	8004a74 <USB_ReadInterrupts>
 80016bc:	4603      	mov	r3, r0
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d103      	bne.n	80016ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2202      	movs	r2, #2
 80016cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 f9ce 	bl	8004a74 <USB_ReadInterrupts>
 80016d8:	4603      	mov	r3, r0
 80016da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016e2:	d120      	bne.n	8001726 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80016ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d113      	bne.n	8001726 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80016fe:	2110      	movs	r1, #16
 8001700:	6938      	ldr	r0, [r7, #16]
 8001702:	f003 f8c1 	bl	8004888 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001706:	6938      	ldr	r0, [r7, #16]
 8001708:	f003 f8f0 	bl	80048ec <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7a5b      	ldrb	r3, [r3, #9]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d105      	bne.n	8001720 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	4618      	mov	r0, r3
 800171c:	f003 f9ec 	bl	8004af8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f005 fb7d 	bl	8006e20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f003 f9a2 	bl	8004a74 <USB_ReadInterrupts>
 8001730:	4603      	mov	r3, r0
 8001732:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001736:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800173a:	d102      	bne.n	8001742 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f001 fd2a 	bl	8003196 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f003 f994 	bl	8004a74 <USB_ReadInterrupts>
 800174c:	4603      	mov	r3, r0
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b08      	cmp	r3, #8
 8001754:	d106      	bne.n	8001764 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f005 fb46 	bl	8006de8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2208      	movs	r2, #8
 8001762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f003 f983 	bl	8004a74 <USB_ReadInterrupts>
 800176e:	4603      	mov	r3, r0
 8001770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001774:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001778:	d139      	bne.n	80017ee <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f003 fdcc 	bl	800531c <USB_HC_ReadInterrupt>
 8001784:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e025      	b.n	80017d8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d018      	beq.n	80017d2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017b6:	d106      	bne.n	80017c6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4619      	mov	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f8e2 	bl	8001988 <HCD_HC_IN_IRQHandler>
 80017c4:	e005      	b.n	80017d2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 ff44 	bl	800265a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	795b      	ldrb	r3, [r3, #5]
 80017dc:	461a      	mov	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d3d3      	bcc.n	800178c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 f93e 	bl	8004a74 <USB_ReadInterrupts>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	2b10      	cmp	r3, #16
 8001800:	d101      	bne.n	8001806 <HAL_HCD_IRQHandler+0x1ea>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_HCD_IRQHandler+0x1ec>
 8001806:	2300      	movs	r3, #0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d014      	beq.n	8001836 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699a      	ldr	r2, [r3, #24]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0210 	bic.w	r2, r2, #16
 800181a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f001 fbdb 	bl	8002fd8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699a      	ldr	r2, [r3, #24]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0210 	orr.w	r2, r2, #16
 8001830:	619a      	str	r2, [r3, #24]
 8001832:	e000      	b.n	8001836 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001834:	bf00      	nop
    }
  }
}
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_HCD_Start+0x16>
 800184e:	2302      	movs	r3, #2
 8001850:	e013      	b.n	800187a <HAL_HCD_Start+0x3e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2101      	movs	r1, #1
 8001860:	4618      	mov	r0, r3
 8001862:	f003 f9b0 	bl	8004bc6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f002 ffea 	bl	8004844 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_HCD_Stop+0x16>
 8001894:	2302      	movs	r3, #2
 8001896:	e00d      	b.n	80018b4 <HAL_HCD_Stop+0x32>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fe6a 	bl	800557e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 f952 	bl	8004b72 <USB_ResetPort>
 80018ce:	4603      	mov	r3, r0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	334c      	adds	r3, #76	@ 0x4c
 80018f4:	781b      	ldrb	r3, [r3, #0]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f003 f992 	bl	8004c38 <USB_GetHostSpeed>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	331a      	adds	r3, #26
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800193e:	78fa      	ldrb	r2, [r7, #3]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	1a9b      	subs	r3, r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	331b      	adds	r3, #27
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	3325      	adds	r3, #37	@ 0x25
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	3324      	adds	r3, #36	@ 0x24
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 f877 	bl	8004a9a <USB_ReadChInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d11a      	bne.n	80019ec <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	015a      	lsls	r2, r3, #5
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4413      	add	r3, r2
 80019be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019c2:	461a      	mov	r2, r3
 80019c4:	2304      	movs	r3, #4
 80019c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	1a9b      	subs	r3, r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	334d      	adds	r3, #77	@ 0x4d
 80019d8:	2207      	movs	r2, #7
 80019da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 fcaa 	bl	800533e <USB_HC_Halt>
 80019ea:	e09e      	b.n	8001b2a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 f850 	bl	8004a9a <USB_ReadChInterrupts>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a04:	d11b      	bne.n	8001a3e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a12:	461a      	mov	r2, r3
 8001a14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	334d      	adds	r3, #77	@ 0x4d
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fc81 	bl	800533e <USB_HC_Halt>
 8001a3c:	e075      	b.n	8001b2a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f827 	bl	8004a9a <USB_ReadChInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d11a      	bne.n	8001a8c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	015a      	lsls	r2, r3, #5
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a62:	461a      	mov	r2, r3
 8001a64:	2308      	movs	r3, #8
 8001a66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	334d      	adds	r3, #77	@ 0x4d
 8001a78:	2206      	movs	r2, #6
 8001a7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fc5a 	bl	800533e <USB_HC_Halt>
 8001a8a:	e04e      	b.n	8001b2a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 f800 	bl	8004a9a <USB_ReadChInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa4:	d11b      	bne.n	8001ade <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ab8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001aba:	78fa      	ldrb	r2, [r7, #3]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	334d      	adds	r3, #77	@ 0x4d
 8001aca:	2209      	movs	r2, #9
 8001acc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fc31 	bl	800533e <USB_HC_Halt>
 8001adc:	e025      	b.n	8001b2a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	78fa      	ldrb	r2, [r7, #3]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 ffd7 	bl	8004a9a <USB_ReadChInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af2:	2b80      	cmp	r3, #128	@ 0x80
 8001af4:	d119      	bne.n	8001b2a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b02:	461a      	mov	r2, r3
 8001b04:	2380      	movs	r3, #128	@ 0x80
 8001b06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	334d      	adds	r3, #77	@ 0x4d
 8001b18:	2207      	movs	r2, #7
 8001b1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fc0a 	bl	800533e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 ffb1 	bl	8004a9a <USB_ReadChInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b42:	d112      	bne.n	8001b6a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fbf6 	bl	800533e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b64:	6093      	str	r3, [r2, #8]
 8001b66:	f000 bd75 	b.w	8002654 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 ff91 	bl	8004a9a <USB_ReadChInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	f040 8128 	bne.w	8001dd4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b90:	461a      	mov	r2, r3
 8001b92:	2320      	movs	r3, #32
 8001b94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	331b      	adds	r3, #27
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d119      	bne.n	8001be0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	331b      	adds	r3, #27
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	0151      	lsls	r1, r2, #5
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	440a      	add	r2, r1
 8001bd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bde:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	799b      	ldrb	r3, [r3, #6]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01b      	beq.n	8001c20 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3330      	adds	r3, #48	@ 0x30
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	015a      	lsls	r2, r3, #5
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4413      	add	r3, r2
 8001c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	1ac9      	subs	r1, r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4403      	add	r3, r0
 8001c1c:	3338      	adds	r3, #56	@ 0x38
 8001c1e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	334d      	adds	r3, #77	@ 0x4d
 8001c30:	2201      	movs	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	3344      	adds	r3, #68	@ 0x44
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	015a      	lsls	r2, r3, #5
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c54:	461a      	mov	r2, r3
 8001c56:	2301      	movs	r3, #1
 8001c58:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	3326      	adds	r3, #38	@ 0x26
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00a      	beq.n	8001c86 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3326      	adds	r3, #38	@ 0x26
 8001c80:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d110      	bne.n	8001ca8 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 fb55 	bl	800533e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2310      	movs	r3, #16
 8001ca4:	6093      	str	r3, [r2, #8]
 8001ca6:	e03d      	b.n	8001d24 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001ca8:	78fa      	ldrb	r2, [r7, #3]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3326      	adds	r3, #38	@ 0x26
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d00a      	beq.n	8001cd4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	3326      	adds	r3, #38	@ 0x26
 8001cce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d127      	bne.n	8001d24 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	0151      	lsls	r1, r2, #5
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	440a      	add	r2, r1
 8001cea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001cee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001cf2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	334c      	adds	r3, #76	@ 0x4c
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	334c      	adds	r3, #76	@ 0x4c
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f005 f88c 	bl	8006e3c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	799b      	ldrb	r3, [r3, #6]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d13b      	bne.n	8001da4 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001d2c:	78fa      	ldrb	r2, [r7, #3]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3338      	adds	r3, #56	@ 0x38
 8001d3c:	6819      	ldr	r1, [r3, #0]
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4403      	add	r3, r0
 8001d4c:	3328      	adds	r3, #40	@ 0x28
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	440b      	add	r3, r1
 8001d52:	1e59      	subs	r1, r3, #1
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4403      	add	r3, r0
 8001d62:	3328      	adds	r3, #40	@ 0x28
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8470 	beq.w	8002654 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	333c      	adds	r3, #60	@ 0x3c
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2d8      	uxtb	r0, r3
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	333c      	adds	r3, #60	@ 0x3c
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	f000 bc58 	b.w	8002654 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	333c      	adds	r3, #60	@ 0x3c
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	f083 0301 	eor.w	r3, r3, #1
 8001dbc:	b2d8      	uxtb	r0, r3
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	333c      	adds	r3, #60	@ 0x3c
 8001dcc:	4602      	mov	r2, r0
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	f000 bc40 	b.w	8002654 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 fe5c 	bl	8004a9a <USB_ReadChInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d131      	bne.n	8001e50 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	331a      	adds	r3, #26
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	f040 841f 	bne.w	8002654 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	331b      	adds	r3, #27
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	334d      	adds	r3, #77	@ 0x4d
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 fa79 	bl	800533e <USB_HC_Halt>
 8001e4c:	f000 bc02 	b.w	8002654 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 fe1e 	bl	8004a9a <USB_ReadChInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	f040 8305 	bne.w	8002474 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e76:	461a      	mov	r2, r3
 8001e78:	2302      	movs	r3, #2
 8001e7a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	334d      	adds	r3, #77	@ 0x4d
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d114      	bne.n	8001ebc <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	334d      	adds	r3, #77	@ 0x4d
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	334c      	adds	r3, #76	@ 0x4c
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	e2cc      	b.n	8002456 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	334d      	adds	r3, #77	@ 0x4d
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d114      	bne.n	8001efc <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	334d      	adds	r3, #77	@ 0x4d
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	334c      	adds	r3, #76	@ 0x4c
 8001ef6:	2205      	movs	r2, #5
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	e2ac      	b.n	8002456 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	334d      	adds	r3, #77	@ 0x4d
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b07      	cmp	r3, #7
 8001f10:	d00b      	beq.n	8001f2a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	334d      	adds	r3, #77	@ 0x4d
 8001f22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001f24:	2b09      	cmp	r3, #9
 8001f26:	f040 80a6 	bne.w	8002076 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	334d      	adds	r3, #77	@ 0x4d
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3344      	adds	r3, #68	@ 0x44
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	1c59      	adds	r1, r3, #1
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4403      	add	r3, r0
 8001f5e:	3344      	adds	r3, #68	@ 0x44
 8001f60:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	3344      	adds	r3, #68	@ 0x44
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d943      	bls.n	8002000 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	3344      	adds	r3, #68	@ 0x44
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	331a      	adds	r3, #26
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d123      	bne.n	8001fea <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	331b      	adds	r3, #27
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	331c      	adds	r3, #28
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	0151      	lsls	r1, r2, #5
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	440a      	add	r2, r1
 8001fe0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	334c      	adds	r3, #76	@ 0x4c
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001ffe:	e229      	b.n	8002454 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	334c      	adds	r3, #76	@ 0x4c
 8002010:	2202      	movs	r2, #2
 8002012:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3326      	adds	r3, #38	@ 0x26
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3326      	adds	r3, #38	@ 0x26
 800203a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800203c:	2b02      	cmp	r3, #2
 800203e:	f040 8209 	bne.w	8002454 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002058:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002060:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002074:	e1ee      	b.n	8002454 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	334d      	adds	r3, #77	@ 0x4d
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b05      	cmp	r3, #5
 800208a:	f040 80c8 	bne.w	800221e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	334d      	adds	r3, #77	@ 0x4d
 800209e:	2202      	movs	r2, #2
 80020a0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80020a2:	78fa      	ldrb	r2, [r7, #3]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	331b      	adds	r3, #27
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	f040 81ce 	bne.w	8002456 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3326      	adds	r3, #38	@ 0x26
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d16b      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3348      	adds	r3, #72	@ 0x48
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	1c59      	adds	r1, r3, #1
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4403      	add	r3, r0
 80020f0:	3348      	adds	r3, #72	@ 0x48
 80020f2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3348      	adds	r3, #72	@ 0x48
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d943      	bls.n	8002192 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3348      	adds	r3, #72	@ 0x48
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	331b      	adds	r3, #27
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	3344      	adds	r3, #68	@ 0x44
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d809      	bhi.n	800215c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002148:	78fa      	ldrb	r2, [r7, #3]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	331c      	adds	r3, #28
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	0151      	lsls	r1, r2, #5
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	440a      	add	r2, r1
 8002172:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800217a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	334c      	adds	r3, #76	@ 0x4c
 800218c:	2204      	movs	r2, #4
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	e014      	b.n	80021bc <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	334c      	adds	r3, #76	@ 0x4c
 80021a2:	2202      	movs	r2, #2
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e009      	b.n	80021bc <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	334c      	adds	r3, #76	@ 0x4c
 80021b8:	2202      	movs	r2, #2
 80021ba:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	3326      	adds	r3, #38	@ 0x26
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3326      	adds	r3, #38	@ 0x26
 80021e2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	f040 8136 	bne.w	8002456 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002200:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002208:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002216:	461a      	mov	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	e11b      	b.n	8002456 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	334d      	adds	r3, #77	@ 0x4d
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b03      	cmp	r3, #3
 8002232:	f040 8081 	bne.w	8002338 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	334d      	adds	r3, #77	@ 0x4d
 8002246:	2202      	movs	r2, #2
 8002248:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	331b      	adds	r3, #27
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	f040 80fa 	bne.w	8002456 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	334c      	adds	r3, #76	@ 0x4c
 8002272:	2202      	movs	r2, #2
 8002274:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	0151      	lsls	r1, r2, #5
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	440a      	add	r2, r1
 800228c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002294:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	0151      	lsls	r1, r2, #5
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	440a      	add	r2, r1
 80022ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022b4:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022d0:	f023 0320 	bic.w	r3, r3, #32
 80022d4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	3326      	adds	r3, #38	@ 0x26
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3326      	adds	r3, #38	@ 0x26
 80022fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022fe:	2b02      	cmp	r3, #2
 8002300:	f040 80a9 	bne.w	8002456 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800231a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002322:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002330:	461a      	mov	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e08e      	b.n	8002456 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	334d      	adds	r3, #77	@ 0x4d
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b04      	cmp	r3, #4
 800234c:	d143      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	334d      	adds	r3, #77	@ 0x4d
 800235e:	2202      	movs	r2, #2
 8002360:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	334c      	adds	r3, #76	@ 0x4c
 8002372:	2202      	movs	r2, #2
 8002374:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	3326      	adds	r3, #38	@ 0x26
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3326      	adds	r3, #38	@ 0x26
 800239c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d159      	bne.n	8002456 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023b8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023c0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e03f      	b.n	8002456 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	334d      	adds	r3, #77	@ 0x4d
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d126      	bne.n	800243a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	334d      	adds	r3, #77	@ 0x4d
 80023fc:	2202      	movs	r2, #2
 80023fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3344      	adds	r3, #68	@ 0x44
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1c59      	adds	r1, r3, #1
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4403      	add	r3, r0
 8002420:	3344      	adds	r3, #68	@ 0x44
 8002422:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	334c      	adds	r3, #76	@ 0x4c
 8002434:	2204      	movs	r2, #4
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e00d      	b.n	8002456 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	334d      	adds	r3, #77	@ 0x4d
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b02      	cmp	r3, #2
 800244e:	f000 8100 	beq.w	8002652 <HCD_HC_IN_IRQHandler+0xcca>
 8002452:	e000      	b.n	8002456 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002454:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	334c      	adds	r3, #76	@ 0x4c
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f004 fce5 	bl	8006e3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002472:	e0ef      	b.n	8002654 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f002 fb0c 	bl	8004a9a <USB_ReadChInterrupts>
 8002482:	4603      	mov	r3, r0
 8002484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002488:	2b40      	cmp	r3, #64	@ 0x40
 800248a:	d12f      	bne.n	80024ec <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002498:	461a      	mov	r2, r3
 800249a:	2340      	movs	r3, #64	@ 0x40
 800249c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	334d      	adds	r3, #77	@ 0x4d
 80024ae:	2205      	movs	r2, #5
 80024b0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	331a      	adds	r3, #26
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	3344      	adds	r3, #68	@ 0x44
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 ff2a 	bl	800533e <USB_HC_Halt>
 80024ea:	e0b3      	b.n	8002654 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 fad0 	bl	8004a9a <USB_ReadChInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b10      	cmp	r3, #16
 8002502:	f040 80a7 	bne.w	8002654 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	3326      	adds	r3, #38	@ 0x26
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d11b      	bne.n	8002554 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3344      	adds	r3, #68	@ 0x44
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	334d      	adds	r3, #77	@ 0x4d
 8002540:	2204      	movs	r2, #4
 8002542:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f002 fef6 	bl	800533e <USB_HC_Halt>
 8002552:	e03f      	b.n	80025d4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3326      	adds	r3, #38	@ 0x26
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3326      	adds	r3, #38	@ 0x26
 800257a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800257c:	2b02      	cmp	r3, #2
 800257e:	d129      	bne.n	80025d4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	3344      	adds	r3, #68	@ 0x44
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	799b      	ldrb	r3, [r3, #6]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HCD_HC_IN_IRQHandler+0xc2a>
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	331b      	adds	r3, #27
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d110      	bne.n	80025d4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	334d      	adds	r3, #77	@ 0x4d
 80025c2:	2204      	movs	r2, #4
 80025c4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 feb5 	bl	800533e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	331b      	adds	r3, #27
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d129      	bne.n	800263e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	331b      	adds	r3, #27
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	0151      	lsls	r1, r2, #5
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	440a      	add	r2, r1
 8002614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800261c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	0151      	lsls	r1, r2, #5
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	440a      	add	r2, r1
 8002634:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002638:	f043 0320 	orr.w	r3, r3, #32
 800263c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800264a:	461a      	mov	r2, r3
 800264c:	2310      	movs	r3, #16
 800264e:	6093      	str	r3, [r2, #8]
 8002650:	e000      	b.n	8002654 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002652:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f002 fa0e 	bl	8004a9a <USB_ReadChInterrupts>
 800267e:	4603      	mov	r3, r0
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b04      	cmp	r3, #4
 8002686:	d11b      	bne.n	80026c0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002694:	461a      	mov	r2, r3
 8002696:	2304      	movs	r3, #4
 8002698:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	334d      	adds	r3, #77	@ 0x4d
 80026aa:	2207      	movs	r2, #7
 80026ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f002 fe41 	bl	800533e <USB_HC_Halt>
 80026bc:	f000 bc89 	b.w	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 f9e6 	bl	8004a9a <USB_ReadChInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	f040 8082 	bne.w	80027de <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e6:	461a      	mov	r2, r3
 80026e8:	2320      	movs	r3, #32
 80026ea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	3319      	adds	r3, #25
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d124      	bne.n	800274c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3319      	adds	r3, #25
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	334c      	adds	r3, #76	@ 0x4c
 8002726:	2202      	movs	r2, #2
 8002728:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	334d      	adds	r3, #77	@ 0x4d
 800273a:	2203      	movs	r2, #3
 800273c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f002 fdf9 	bl	800533e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	331a      	adds	r3, #26
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	f040 8437 	bne.w	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	331b      	adds	r3, #27
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 842b 	bne.w	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3326      	adds	r3, #38	@ 0x26
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d009      	beq.n	80027a6 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	331b      	adds	r3, #27
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	334d      	adds	r3, #77	@ 0x4d
 80027b6:	2203      	movs	r2, #3
 80027b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fdbb 	bl	800533e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	3344      	adds	r3, #68	@ 0x44
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e3f9      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 f957 	bl	8004a9a <USB_ReadChInterrupts>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f6:	d111      	bne.n	800281c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800280a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f002 fd92 	bl	800533e <USB_HC_Halt>
 800281a:	e3da      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f002 f938 	bl	8004a9a <USB_ReadChInterrupts>
 800282a:	4603      	mov	r3, r0
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d168      	bne.n	8002906 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	3344      	adds	r3, #68	@ 0x44
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f002 f922 	bl	8004a9a <USB_ReadChInterrupts>
 8002856:	4603      	mov	r3, r0
 8002858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285c:	2b40      	cmp	r3, #64	@ 0x40
 800285e:	d112      	bne.n	8002886 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	3319      	adds	r3, #25
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	2340      	movs	r3, #64	@ 0x40
 8002884:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	331b      	adds	r3, #27
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d019      	beq.n	80028d0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	331b      	adds	r3, #27
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	0151      	lsls	r1, r2, #5
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	440a      	add	r2, r1
 80028c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ce:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	2301      	movs	r3, #1
 80028e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	334d      	adds	r3, #77	@ 0x4d
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f002 fd1d 	bl	800533e <USB_HC_Halt>
 8002904:	e365      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f002 f8c3 	bl	8004a9a <USB_ReadChInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291a:	2b40      	cmp	r3, #64	@ 0x40
 800291c:	d139      	bne.n	8002992 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	334d      	adds	r3, #77	@ 0x4d
 800292e:	2205      	movs	r2, #5
 8002930:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	331a      	adds	r3, #26
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3319      	adds	r3, #25
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	3344      	adds	r3, #68	@ 0x44
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f002 fce0 	bl	800533e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800298a:	461a      	mov	r2, r3
 800298c:	2340      	movs	r3, #64	@ 0x40
 800298e:	6093      	str	r3, [r2, #8]
 8002990:	e31f      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f002 f87d 	bl	8004a9a <USB_ReadChInterrupts>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d11a      	bne.n	80029e0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b6:	461a      	mov	r2, r3
 80029b8:	2308      	movs	r3, #8
 80029ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334d      	adds	r3, #77	@ 0x4d
 80029cc:	2206      	movs	r2, #6
 80029ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 fcb0 	bl	800533e <USB_HC_Halt>
 80029de:	e2f8      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f002 f856 	bl	8004a9a <USB_ReadChInterrupts>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d144      	bne.n	8002a82 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3344      	adds	r3, #68	@ 0x44
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	334d      	adds	r3, #77	@ 0x4d
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3319      	adds	r3, #25
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d114      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	3318      	adds	r3, #24
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	3319      	adds	r3, #25
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f002 fc68 	bl	800533e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	6093      	str	r3, [r2, #8]
 8002a80:	e2a7      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f002 f805 	bl	8004a9a <USB_ReadChInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a96:	2b80      	cmp	r3, #128	@ 0x80
 8002a98:	f040 8083 	bne.w	8002ba2 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	799b      	ldrb	r3, [r3, #6]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d111      	bne.n	8002ac8 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	334d      	adds	r3, #77	@ 0x4d
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 fc3c 	bl	800533e <USB_HC_Halt>
 8002ac6:	e062      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3344      	adds	r3, #68	@ 0x44
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1c59      	adds	r1, r3, #1
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4403      	add	r3, r0
 8002ae8:	3344      	adds	r3, #68	@ 0x44
 8002aea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3344      	adds	r3, #68	@ 0x44
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d922      	bls.n	8002b48 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3344      	adds	r3, #68	@ 0x44
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	334c      	adds	r3, #76	@ 0x4c
 8002b26:	2204      	movs	r2, #4
 8002b28:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	334c      	adds	r3, #76	@ 0x4c
 8002b3a:	781a      	ldrb	r2, [r3, #0]
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f004 f97b 	bl	8006e3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b46:	e022      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	334c      	adds	r3, #76	@ 0x4c
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b72:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b7a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	6093      	str	r3, [r2, #8]
 8002ba0:	e217      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 ff75 	bl	8004a9a <USB_ReadChInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bba:	d11b      	bne.n	8002bf4 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	334d      	adds	r3, #77	@ 0x4d
 8002bcc:	2209      	movs	r2, #9
 8002bce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f002 fbb0 	bl	800533e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bea:	461a      	mov	r2, r3
 8002bec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bf0:	6093      	str	r3, [r2, #8]
 8002bf2:	e1ee      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f001 ff4c 	bl	8004a9a <USB_ReadChInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	f040 81df 	bne.w	8002fcc <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334d      	adds	r3, #77	@ 0x4d
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	f040 8093 	bne.w	8002d5e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	334d      	adds	r3, #77	@ 0x4d
 8002c48:	2202      	movs	r2, #2
 8002c4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	334c      	adds	r3, #76	@ 0x4c
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3326      	adds	r3, #38	@ 0x26
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d00b      	beq.n	8002c8e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3326      	adds	r3, #38	@ 0x26
 8002c86:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	f040 8190 	bne.w	8002fae <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	799b      	ldrb	r3, [r3, #6]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d115      	bne.n	8002cc2 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	333d      	adds	r3, #61	@ 0x3d
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	f083 0301 	eor.w	r3, r3, #1
 8002cae:	b2d8      	uxtb	r0, r3
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	333d      	adds	r3, #61	@ 0x3d
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	799b      	ldrb	r3, [r3, #6]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	f040 8171 	bne.w	8002fae <HCD_HC_OUT_IRQHandler+0x954>
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3334      	adds	r3, #52	@ 0x34
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8165 	beq.w	8002fae <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3334      	adds	r3, #52	@ 0x34
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4403      	add	r3, r0
 8002d04:	3328      	adds	r3, #40	@ 0x28
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	440b      	add	r3, r1
 8002d0a:	1e59      	subs	r1, r3, #1
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4403      	add	r3, r0
 8002d1a:	3328      	adds	r3, #40	@ 0x28
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d22:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 813f 	beq.w	8002fae <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	333d      	adds	r3, #61	@ 0x3d
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	f083 0301 	eor.w	r3, r3, #1
 8002d48:	b2d8      	uxtb	r0, r3
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	333d      	adds	r3, #61	@ 0x3d
 8002d58:	4602      	mov	r2, r0
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e127      	b.n	8002fae <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	334d      	adds	r3, #77	@ 0x4d
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d120      	bne.n	8002db6 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	334d      	adds	r3, #77	@ 0x4d
 8002d84:	2202      	movs	r2, #2
 8002d86:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	331b      	adds	r3, #27
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	f040 8107 	bne.w	8002fae <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	334c      	adds	r3, #76	@ 0x4c
 8002db0:	2202      	movs	r2, #2
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e0fb      	b.n	8002fae <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	334d      	adds	r3, #77	@ 0x4d
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d13a      	bne.n	8002e42 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	334d      	adds	r3, #77	@ 0x4d
 8002ddc:	2202      	movs	r2, #2
 8002dde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	334c      	adds	r3, #76	@ 0x4c
 8002df0:	2202      	movs	r2, #2
 8002df2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	331b      	adds	r3, #27
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	f040 80d1 	bne.w	8002fae <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	331b      	adds	r3, #27
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	0151      	lsls	r1, r2, #5
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	440a      	add	r2, r1
 8002e36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e3e:	6053      	str	r3, [r2, #4]
 8002e40:	e0b5      	b.n	8002fae <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	334d      	adds	r3, #77	@ 0x4d
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d114      	bne.n	8002e82 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	334d      	adds	r3, #77	@ 0x4d
 8002e68:	2202      	movs	r2, #2
 8002e6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	334c      	adds	r3, #76	@ 0x4c
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e095      	b.n	8002fae <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	334d      	adds	r3, #77	@ 0x4d
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	d114      	bne.n	8002ec2 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	334d      	adds	r3, #77	@ 0x4d
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	334c      	adds	r3, #76	@ 0x4c
 8002ebc:	2205      	movs	r2, #5
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	e075      	b.n	8002fae <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	334d      	adds	r3, #77	@ 0x4d
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b07      	cmp	r3, #7
 8002ed6:	d00a      	beq.n	8002eee <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	334d      	adds	r3, #77	@ 0x4d
 8002ee8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002eea:	2b09      	cmp	r3, #9
 8002eec:	d170      	bne.n	8002fd0 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	334d      	adds	r3, #77	@ 0x4d
 8002efe:	2202      	movs	r2, #2
 8002f00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	3344      	adds	r3, #68	@ 0x44
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1c59      	adds	r1, r3, #1
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4403      	add	r3, r0
 8002f22:	3344      	adds	r3, #68	@ 0x44
 8002f24:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3344      	adds	r3, #68	@ 0x44
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d914      	bls.n	8002f66 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3344      	adds	r3, #68	@ 0x44
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334c      	adds	r3, #76	@ 0x4c
 8002f60:	2204      	movs	r2, #4
 8002f62:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f64:	e022      	b.n	8002fac <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	334c      	adds	r3, #76	@ 0x4c
 8002f76:	2202      	movs	r2, #2
 8002f78:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f90:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f98:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fac:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	334c      	adds	r3, #76	@ 0x4c
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f003 ff39 	bl	8006e3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fca:	e002      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8002fd0:	bf00      	nop
  }
}
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	@ 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	0c5b      	lsrs	r3, r3, #17
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800300c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d004      	beq.n	800301e <HCD_RXQLVL_IRQHandler+0x46>
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b05      	cmp	r3, #5
 8003018:	f000 80b6 	beq.w	8003188 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800301c:	e0b7      	b.n	800318e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80b3 	beq.w	800318c <HCD_RXQLVL_IRQHandler+0x1b4>
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	332c      	adds	r3, #44	@ 0x2c
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80a7 	beq.w	800318c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	3338      	adds	r3, #56	@ 0x38
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	18d1      	adds	r1, r2, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4403      	add	r3, r0
 8003062:	3334      	adds	r3, #52	@ 0x34
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4299      	cmp	r1, r3
 8003068:	f200 8083 	bhi.w	8003172 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	332c      	adds	r3, #44	@ 0x2c
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	b292      	uxth	r2, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f001 fc9c 	bl	80049c4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4613      	mov	r3, r2
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	332c      	adds	r3, #44	@ 0x2c
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	18d1      	adds	r1, r2, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4613      	mov	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4403      	add	r3, r0
 80030b0:	332c      	adds	r3, #44	@ 0x2c
 80030b2:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	3338      	adds	r3, #56	@ 0x38
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	18d1      	adds	r1, r2, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4403      	add	r3, r0
 80030d8:	3338      	adds	r3, #56	@ 0x38
 80030da:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	0cdb      	lsrs	r3, r3, #19
 80030ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3328      	adds	r3, #40	@ 0x28
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4293      	cmp	r3, r2
 800310a:	d13f      	bne.n	800318c <HCD_RXQLVL_IRQHandler+0x1b4>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d03c      	beq.n	800318c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003128:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003130:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800313e:	461a      	mov	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	333c      	adds	r3, #60	@ 0x3c
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	f083 0301 	eor.w	r3, r3, #1
 800315a:	b2d8      	uxtb	r0, r3
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	333c      	adds	r3, #60	@ 0x3c
 800316c:	4602      	mov	r2, r0
 800316e:	701a      	strb	r2, [r3, #0]
      break;
 8003170:	e00c      	b.n	800318c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	334c      	adds	r3, #76	@ 0x4c
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
      break;
 8003186:	e001      	b.n	800318c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003188:	bf00      	nop
 800318a:	e000      	b.n	800318e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800318c:	bf00      	nop
  }
}
 800318e:	bf00      	nop
 8003190:	3728      	adds	r7, #40	@ 0x28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80031c2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d10b      	bne.n	80031e6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d102      	bne.n	80031de <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f003 fe13 	bl	8006e04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d132      	bne.n	8003256 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f043 0308 	orr.w	r3, r3, #8
 80031f6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d126      	bne.n	8003250 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7a5b      	ldrb	r3, [r3, #9]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d113      	bne.n	8003232 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003210:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003214:	d106      	bne.n	8003224 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f001 fc6b 	bl	8004af8 <USB_InitFSLSPClkSel>
 8003222:	e011      	b.n	8003248 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2101      	movs	r1, #1
 800322a:	4618      	mov	r0, r3
 800322c:	f001 fc64 	bl	8004af8 <USB_InitFSLSPClkSel>
 8003230:	e00a      	b.n	8003248 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	79db      	ldrb	r3, [r3, #7]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d106      	bne.n	8003248 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003240:	461a      	mov	r2, r3
 8003242:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003246:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f003 fe05 	bl	8006e58 <HAL_HCD_PortEnabled_Callback>
 800324e:	e002      	b.n	8003256 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f003 fe0f 	bl	8006e74 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b20      	cmp	r3, #32
 800325e:	d103      	bne.n	8003268 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f043 0320 	orr.w	r3, r3, #32
 8003266:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800326e:	461a      	mov	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	6013      	str	r3, [r2, #0]
}
 8003274:	bf00      	nop
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e12b      	b.n	80034e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fd fa3a 	bl	800071c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2224      	movs	r2, #36	@ 0x24
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032e0:	f000 fdbc 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 80032e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4a81      	ldr	r2, [pc, #516]	@ (80034f0 <HAL_I2C_Init+0x274>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d807      	bhi.n	8003300 <HAL_I2C_Init+0x84>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a80      	ldr	r2, [pc, #512]	@ (80034f4 <HAL_I2C_Init+0x278>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	bf94      	ite	ls
 80032f8:	2301      	movls	r3, #1
 80032fa:	2300      	movhi	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e006      	b.n	800330e <HAL_I2C_Init+0x92>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a7d      	ldr	r2, [pc, #500]	@ (80034f8 <HAL_I2C_Init+0x27c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	bf94      	ite	ls
 8003308:	2301      	movls	r3, #1
 800330a:	2300      	movhi	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0e7      	b.n	80034e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a78      	ldr	r2, [pc, #480]	@ (80034fc <HAL_I2C_Init+0x280>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0c9b      	lsrs	r3, r3, #18
 8003320:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a6a      	ldr	r2, [pc, #424]	@ (80034f0 <HAL_I2C_Init+0x274>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d802      	bhi.n	8003350 <HAL_I2C_Init+0xd4>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3301      	adds	r3, #1
 800334e:	e009      	b.n	8003364 <HAL_I2C_Init+0xe8>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	4a69      	ldr	r2, [pc, #420]	@ (8003500 <HAL_I2C_Init+0x284>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	099b      	lsrs	r3, r3, #6
 8003362:	3301      	adds	r3, #1
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	430b      	orrs	r3, r1
 800336a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003376:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	495c      	ldr	r1, [pc, #368]	@ (80034f0 <HAL_I2C_Init+0x274>)
 8003380:	428b      	cmp	r3, r1
 8003382:	d819      	bhi.n	80033b8 <HAL_I2C_Init+0x13c>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1e59      	subs	r1, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003398:	400b      	ands	r3, r1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_I2C_Init+0x138>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1e59      	subs	r1, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b2:	e051      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 80033b4:	2304      	movs	r3, #4
 80033b6:	e04f      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d111      	bne.n	80033e4 <HAL_I2C_Init+0x168>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1e58      	subs	r0, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	440b      	add	r3, r1
 80033ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e012      	b.n	800340a <HAL_I2C_Init+0x18e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	0099      	lsls	r1, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_Init+0x196>
 800340e:	2301      	movs	r3, #1
 8003410:	e022      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10e      	bne.n	8003438 <HAL_I2C_Init+0x1bc>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1e58      	subs	r0, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	440b      	add	r3, r1
 8003428:	fbb0 f3f3 	udiv	r3, r0, r3
 800342c:	3301      	adds	r3, #1
 800342e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003436:	e00f      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1e58      	subs	r0, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	0099      	lsls	r1, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	6809      	ldr	r1, [r1, #0]
 800345c:	4313      	orrs	r3, r2
 800345e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003486:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6911      	ldr	r1, [r2, #16]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68d2      	ldr	r2, [r2, #12]
 8003492:	4311      	orrs	r1, r2
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	430b      	orrs	r3, r1
 800349a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	000186a0 	.word	0x000186a0
 80034f4:	001e847f 	.word	0x001e847f
 80034f8:	003d08ff 	.word	0x003d08ff
 80034fc:	431bde83 	.word	0x431bde83
 8003500:	10624dd3 	.word	0x10624dd3

08003504 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e128      	b.n	8003768 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a90      	ldr	r2, [pc, #576]	@ (8003770 <HAL_I2S_Init+0x26c>)
 800352e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fd f93b 	bl	80007ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800354c:	f023 030f 	bic.w	r3, r3, #15
 8003550:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2202      	movs	r2, #2
 8003558:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d060      	beq.n	8003624 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800356a:	2310      	movs	r3, #16
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e001      	b.n	8003574 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003570:	2320      	movs	r3, #32
 8003572:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b20      	cmp	r3, #32
 800357a:	d802      	bhi.n	8003582 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003582:	2001      	movs	r0, #1
 8003584:	f000 fd6e 	bl	8004064 <HAL_RCCEx_GetPeriphCLKFreq>
 8003588:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003592:	d125      	bne.n	80035e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	461a      	mov	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	3305      	adds	r3, #5
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e01f      	b.n	80035fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	461a      	mov	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	3305      	adds	r3, #5
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	e00e      	b.n	80035fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	461a      	mov	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	3305      	adds	r3, #5
 80035fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4a5c      	ldr	r2, [pc, #368]	@ (8003774 <HAL_I2S_Init+0x270>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	08db      	lsrs	r3, r3, #3
 8003608:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e003      	b.n	800362c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003624:	2302      	movs	r3, #2
 8003626:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d902      	bls.n	8003638 <HAL_I2S_Init+0x134>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	2bff      	cmp	r3, #255	@ 0xff
 8003636:	d907      	bls.n	8003648 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363c:	f043 0210 	orr.w	r2, r3, #16
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e08f      	b.n	8003768 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	ea42 0103 	orr.w	r1, r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	430a      	orrs	r2, r1
 800365a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003666:	f023 030f 	bic.w	r3, r3, #15
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6851      	ldr	r1, [r2, #4]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6892      	ldr	r2, [r2, #8]
 8003672:	4311      	orrs	r1, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68d2      	ldr	r2, [r2, #12]
 8003678:	4311      	orrs	r1, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6992      	ldr	r2, [r2, #24]
 800367e:	430a      	orrs	r2, r1
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d161      	bne.n	8003758 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a38      	ldr	r2, [pc, #224]	@ (8003778 <HAL_I2S_Init+0x274>)
 8003698:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a37      	ldr	r2, [pc, #220]	@ (800377c <HAL_I2S_Init+0x278>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_I2S_Init+0x1a4>
 80036a4:	4b36      	ldr	r3, [pc, #216]	@ (8003780 <HAL_I2S_Init+0x27c>)
 80036a6:	e001      	b.n	80036ac <HAL_I2S_Init+0x1a8>
 80036a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	4932      	ldr	r1, [pc, #200]	@ (800377c <HAL_I2S_Init+0x278>)
 80036b4:	428a      	cmp	r2, r1
 80036b6:	d101      	bne.n	80036bc <HAL_I2S_Init+0x1b8>
 80036b8:	4a31      	ldr	r2, [pc, #196]	@ (8003780 <HAL_I2S_Init+0x27c>)
 80036ba:	e001      	b.n	80036c0 <HAL_I2S_Init+0x1bc>
 80036bc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80036c0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80036c4:	f023 030f 	bic.w	r3, r3, #15
 80036c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2b      	ldr	r2, [pc, #172]	@ (800377c <HAL_I2S_Init+0x278>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d101      	bne.n	80036d8 <HAL_I2S_Init+0x1d4>
 80036d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003780 <HAL_I2S_Init+0x27c>)
 80036d6:	e001      	b.n	80036dc <HAL_I2S_Init+0x1d8>
 80036d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036dc:	2202      	movs	r2, #2
 80036de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a25      	ldr	r2, [pc, #148]	@ (800377c <HAL_I2S_Init+0x278>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d101      	bne.n	80036ee <HAL_I2S_Init+0x1ea>
 80036ea:	4b25      	ldr	r3, [pc, #148]	@ (8003780 <HAL_I2S_Init+0x27c>)
 80036ec:	e001      	b.n	80036f2 <HAL_I2S_Init+0x1ee>
 80036ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036fe:	d003      	beq.n	8003708 <HAL_I2S_Init+0x204>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d103      	bne.n	8003710 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003708:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	e001      	b.n	8003714 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800371e:	4313      	orrs	r3, r2
 8003720:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003728:	4313      	orrs	r3, r2
 800372a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003732:	4313      	orrs	r3, r2
 8003734:	b29a      	uxth	r2, r3
 8003736:	897b      	ldrh	r3, [r7, #10]
 8003738:	4313      	orrs	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003740:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a0d      	ldr	r2, [pc, #52]	@ (800377c <HAL_I2S_Init+0x278>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d101      	bne.n	8003750 <HAL_I2S_Init+0x24c>
 800374c:	4b0c      	ldr	r3, [pc, #48]	@ (8003780 <HAL_I2S_Init+0x27c>)
 800374e:	e001      	b.n	8003754 <HAL_I2S_Init+0x250>
 8003750:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003754:	897a      	ldrh	r2, [r7, #10]
 8003756:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	0800387b 	.word	0x0800387b
 8003774:	cccccccd 	.word	0xcccccccd
 8003778:	08003991 	.word	0x08003991
 800377c:	40003800 	.word	0x40003800
 8003780:	40003400 	.word	0x40003400

08003784 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	881a      	ldrh	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	1c9a      	adds	r2, r3, #2
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10e      	bne.n	8003814 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003804:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ffb8 	bl	8003784 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382e:	b292      	uxth	r2, r2
 8003830:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	1c9a      	adds	r2, r3, #2
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10e      	bne.n	8003872 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003862:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff93 	bl	8003798 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b04      	cmp	r3, #4
 8003894:	d13a      	bne.n	800390c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d109      	bne.n	80038b4 <I2S_IRQHandler+0x3a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038aa:	2b40      	cmp	r3, #64	@ 0x40
 80038ac:	d102      	bne.n	80038b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ffb4 	bl	800381c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	d126      	bne.n	800390c <I2S_IRQHandler+0x92>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d11f      	bne.n	800390c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	f043 0202 	orr.w	r2, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ff50 	bl	80037ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b03      	cmp	r3, #3
 8003916:	d136      	bne.n	8003986 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d109      	bne.n	8003936 <I2S_IRQHandler+0xbc>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392c:	2b80      	cmp	r3, #128	@ 0x80
 800392e:	d102      	bne.n	8003936 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff45 	bl	80037c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b08      	cmp	r3, #8
 800393e:	d122      	bne.n	8003986 <I2S_IRQHandler+0x10c>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b20      	cmp	r3, #32
 800394c:	d11b      	bne.n	8003986 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800395c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003978:	f043 0204 	orr.w	r2, r3, #4
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ff13 	bl	80037ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a92      	ldr	r2, [pc, #584]	@ (8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80039aa:	4b92      	ldr	r3, [pc, #584]	@ (8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039ac:	e001      	b.n	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80039ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a8b      	ldr	r2, [pc, #556]	@ (8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d101      	bne.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80039c8:	4b8a      	ldr	r3, [pc, #552]	@ (8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039ca:	e001      	b.n	80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80039cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039dc:	d004      	beq.n	80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 8099 	bne.w	8003b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d107      	bne.n	8003a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f925 	bl	8003c4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f9c8 	bl	8003dac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a22:	2b40      	cmp	r3, #64	@ 0x40
 8003a24:	d13a      	bne.n	8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d035      	beq.n	8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a3c:	e001      	b.n	8003a42 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4969      	ldr	r1, [pc, #420]	@ (8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a4a:	428b      	cmp	r3, r1
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a4e:	4b69      	ldr	r3, [pc, #420]	@ (8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a50:	e001      	b.n	8003a56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a5a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	f043 0202 	orr.w	r2, r3, #2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff fe88 	bl	80037ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	f040 80c3 	bne.w	8003c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80bd 	beq.w	8003c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ac2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a49      	ldr	r2, [pc, #292]	@ (8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ace:	4b49      	ldr	r3, [pc, #292]	@ (8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ad0:	e001      	b.n	8003ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ad2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4944      	ldr	r1, [pc, #272]	@ (8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ade:	428b      	cmp	r3, r1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ae2:	4b44      	ldr	r3, [pc, #272]	@ (8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ae4:	e001      	b.n	8003aea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ae6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003aee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	f043 0204 	orr.w	r2, r3, #4
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff fe4a 	bl	80037ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b18:	e089      	b.n	8003c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d107      	bne.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f8be 	bl	8003cb0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d107      	bne.n	8003b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f8fd 	bl	8003d48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	2b40      	cmp	r3, #64	@ 0x40
 8003b56:	d12f      	bne.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d02a      	beq.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b70:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b7e:	e001      	b.n	8003b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4919      	ldr	r1, [pc, #100]	@ (8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b8c:	428b      	cmp	r3, r1
 8003b8e:	d101      	bne.n	8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b90:	4b18      	ldr	r3, [pc, #96]	@ (8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b92:	e001      	b.n	8003b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	f043 0202 	orr.w	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fdfa 	bl	80037ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d136      	bne.n	8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d031      	beq.n	8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a07      	ldr	r2, [pc, #28]	@ (8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003bd6:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bd8:	e001      	b.n	8003bde <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003bda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4902      	ldr	r1, [pc, #8]	@ (8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003be6:	428b      	cmp	r3, r1
 8003be8:	d106      	bne.n	8003bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003bea:	4b02      	ldr	r3, [pc, #8]	@ (8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bec:	e006      	b.n	8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003bee:	bf00      	nop
 8003bf0:	40003800 	.word	0x40003800
 8003bf4:	40003400 	.word	0x40003400
 8003bf8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bfc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c00:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fdc0 	bl	80037ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c2c:	e000      	b.n	8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c2e:	bf00      	nop
}
 8003c30:	bf00      	nop
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	1c99      	adds	r1, r3, #2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6251      	str	r1, [r2, #36]	@ 0x24
 8003c5e:	881a      	ldrh	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d113      	bne.n	8003ca6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d106      	bne.n	8003ca6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ffc9 	bl	8003c38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	1c99      	adds	r1, r3, #2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6251      	str	r1, [r2, #36]	@ 0x24
 8003cc2:	8819      	ldrh	r1, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d40 <I2SEx_TxISR_I2SExt+0x90>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <I2SEx_TxISR_I2SExt+0x22>
 8003cce:	4b1d      	ldr	r3, [pc, #116]	@ (8003d44 <I2SEx_TxISR_I2SExt+0x94>)
 8003cd0:	e001      	b.n	8003cd6 <I2SEx_TxISR_I2SExt+0x26>
 8003cd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cd6:	460a      	mov	r2, r1
 8003cd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d121      	bne.n	8003d36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a12      	ldr	r2, [pc, #72]	@ (8003d40 <I2SEx_TxISR_I2SExt+0x90>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <I2SEx_TxISR_I2SExt+0x50>
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <I2SEx_TxISR_I2SExt+0x94>)
 8003cfe:	e001      	b.n	8003d04 <I2SEx_TxISR_I2SExt+0x54>
 8003d00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	490d      	ldr	r1, [pc, #52]	@ (8003d40 <I2SEx_TxISR_I2SExt+0x90>)
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	d101      	bne.n	8003d14 <I2SEx_TxISR_I2SExt+0x64>
 8003d10:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <I2SEx_TxISR_I2SExt+0x94>)
 8003d12:	e001      	b.n	8003d18 <I2SEx_TxISR_I2SExt+0x68>
 8003d14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ff81 	bl	8003c38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40003800 	.word	0x40003800
 8003d44:	40003400 	.word	0x40003400

08003d48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68d8      	ldr	r0, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5a:	1c99      	adds	r1, r3, #2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003d60:	b282      	uxth	r2, r0
 8003d62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d113      	bne.n	8003da4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff ff4a 	bl	8003c38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a20      	ldr	r2, [pc, #128]	@ (8003e3c <I2SEx_RxISR_I2SExt+0x90>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <I2SEx_RxISR_I2SExt+0x16>
 8003dbe:	4b20      	ldr	r3, [pc, #128]	@ (8003e40 <I2SEx_RxISR_I2SExt+0x94>)
 8003dc0:	e001      	b.n	8003dc6 <I2SEx_RxISR_I2SExt+0x1a>
 8003dc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dc6:	68d8      	ldr	r0, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dcc:	1c99      	adds	r1, r3, #2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003dd2:	b282      	uxth	r2, r0
 8003dd4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d121      	bne.n	8003e32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a12      	ldr	r2, [pc, #72]	@ (8003e3c <I2SEx_RxISR_I2SExt+0x90>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <I2SEx_RxISR_I2SExt+0x50>
 8003df8:	4b11      	ldr	r3, [pc, #68]	@ (8003e40 <I2SEx_RxISR_I2SExt+0x94>)
 8003dfa:	e001      	b.n	8003e00 <I2SEx_RxISR_I2SExt+0x54>
 8003dfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	490d      	ldr	r1, [pc, #52]	@ (8003e3c <I2SEx_RxISR_I2SExt+0x90>)
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	d101      	bne.n	8003e10 <I2SEx_RxISR_I2SExt+0x64>
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <I2SEx_RxISR_I2SExt+0x94>)
 8003e0e:	e001      	b.n	8003e14 <I2SEx_RxISR_I2SExt+0x68>
 8003e10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff03 	bl	8003c38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40003800 	.word	0x40003800
 8003e40:	40003400 	.word	0x40003400

08003e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e48:	4b03      	ldr	r3, [pc, #12]	@ (8003e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000000 	.word	0x20000000

08003e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e60:	f7ff fff0 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	0a9b      	lsrs	r3, r3, #10
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4903      	ldr	r1, [pc, #12]	@ (8003e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	080071ac 	.word	0x080071ac

08003e84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d038      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003eac:	4b68      	ldr	r3, [pc, #416]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eb2:	f7fc fe8f 	bl	8000bd4 <HAL_GetTick>
 8003eb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003eba:	f7fc fe8b 	bl	8000bd4 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e0bd      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ecc:	4b61      	ldr	r3, [pc, #388]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f0      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	019b      	lsls	r3, r3, #6
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	495a      	ldr	r1, [pc, #360]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ef2:	4b57      	ldr	r3, [pc, #348]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ef8:	f7fc fe6c 	bl	8000bd4 <HAL_GetTick>
 8003efc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f00:	f7fc fe68 	bl	8000bd4 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e09a      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f12:	4b50      	ldr	r3, [pc, #320]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8083 	beq.w	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	4b48      	ldr	r3, [pc, #288]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	4a47      	ldr	r2, [pc, #284]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f3c:	4b45      	ldr	r3, [pc, #276]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f48:	4b43      	ldr	r3, [pc, #268]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a42      	ldr	r2, [pc, #264]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f52:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f54:	f7fc fe3e 	bl	8000bd4 <HAL_GetTick>
 8003f58:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5c:	f7fc fe3a 	bl	8000bd4 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e06c      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003f6e:	4b3a      	ldr	r3, [pc, #232]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f7a:	4b36      	ldr	r3, [pc, #216]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f82:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d02f      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d028      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f98:	4b2e      	ldr	r3, [pc, #184]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fa0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fae:	4a29      	ldr	r2, [pc, #164]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fb4:	4b27      	ldr	r3, [pc, #156]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d114      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fc fe08 	bl	8000bd4 <HAL_GetTick>
 8003fc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc6:	e00a      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc8:	f7fc fe04 	bl	8000bd4 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e034      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	4b1d      	ldr	r3, [pc, #116]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0ee      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ff6:	d10d      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003ff8:	4b16      	ldr	r3, [pc, #88]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400c:	4911      	ldr	r1, [pc, #68]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
 8004012:	e005      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004014:	4b0f      	ldr	r3, [pc, #60]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4a0e      	ldr	r2, [pc, #56]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800401e:	6093      	str	r3, [r2, #8]
 8004020:	4b0c      	ldr	r3, [pc, #48]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402c:	4909      	ldr	r1, [pc, #36]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402e:	4313      	orrs	r3, r2
 8004030:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7d1a      	ldrb	r2, [r3, #20]
 8004042:	4b07      	ldr	r3, [pc, #28]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004044:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	42470068 	.word	0x42470068
 8004054:	40023800 	.word	0x40023800
 8004058:	40007000 	.word	0x40007000
 800405c:	42470e40 	.word	0x42470e40
 8004060:	424711e0 	.word	0x424711e0

08004064 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d141      	bne.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004082:	4b25      	ldr	r3, [pc, #148]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004098:	d131      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800409a:	4b20      	ldr	r3, [pc, #128]	@ (800411c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800409c:	617b      	str	r3, [r7, #20]
          break;
 800409e:	e031      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80040a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ac:	d109      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80040ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80040b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040b8:	4a19      	ldr	r2, [pc, #100]	@ (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	e008      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80040c2:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80040c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040cc:	4a15      	ldr	r2, [pc, #84]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80040ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80040d4:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80040d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80040ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ee:	0f1b      	lsrs	r3, r3, #28
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	617b      	str	r3, [r7, #20]
          break;
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
          break;
 8004102:	bf00      	nop
        }
      }
      break;
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8004106:	bf00      	nop
    }
  }
  return frequency;
 8004108:	697b      	ldr	r3, [r7, #20]
}
 800410a:	4618      	mov	r0, r3
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	00bb8000 	.word	0x00bb8000
 8004120:	007a1200 	.word	0x007a1200
 8004124:	00f42400 	.word	0x00f42400

08004128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07b      	b.n	8004232 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	d108      	bne.n	8004154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800414a:	d009      	beq.n	8004160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
 8004152:	e005      	b.n	8004160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc fbe4 	bl	8000948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004196:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e4:	ea42 0103 	orr.w	r1, r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	f003 0104 	and.w	r1, r3, #4
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	f003 0210 	and.w	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e041      	b.n	80042d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fc fbb9 	bl	80009d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3304      	adds	r3, #4
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f000 f94f 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d001      	beq.n	80042f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e03c      	b.n	800436a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004378 <HAL_TIM_Base_Start+0xa0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <HAL_TIM_Base_Start+0x5c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430a:	d013      	beq.n	8004334 <HAL_TIM_Base_Start+0x5c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1a      	ldr	r2, [pc, #104]	@ (800437c <HAL_TIM_Base_Start+0xa4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <HAL_TIM_Base_Start+0x5c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a19      	ldr	r2, [pc, #100]	@ (8004380 <HAL_TIM_Base_Start+0xa8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_TIM_Base_Start+0x5c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a17      	ldr	r2, [pc, #92]	@ (8004384 <HAL_TIM_Base_Start+0xac>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_TIM_Base_Start+0x5c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a16      	ldr	r2, [pc, #88]	@ (8004388 <HAL_TIM_Base_Start+0xb0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d111      	bne.n	8004358 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b06      	cmp	r3, #6
 8004344:	d010      	beq.n	8004368 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0201 	orr.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004356:	e007      	b.n	8004368 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40010000 	.word	0x40010000
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00
 8004388:	40014000 	.word	0x40014000

0800438c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_TIM_ConfigClockSource+0x1c>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e0b4      	b.n	8004512 <HAL_TIM_ConfigClockSource+0x186>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043e0:	d03e      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0xd4>
 80043e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043e6:	f200 8087 	bhi.w	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ee:	f000 8086 	beq.w	80044fe <HAL_TIM_ConfigClockSource+0x172>
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f6:	d87f      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 80043f8:	2b70      	cmp	r3, #112	@ 0x70
 80043fa:	d01a      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0xa6>
 80043fc:	2b70      	cmp	r3, #112	@ 0x70
 80043fe:	d87b      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004400:	2b60      	cmp	r3, #96	@ 0x60
 8004402:	d050      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004404:	2b60      	cmp	r3, #96	@ 0x60
 8004406:	d877      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004408:	2b50      	cmp	r3, #80	@ 0x50
 800440a:	d03c      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0xfa>
 800440c:	2b50      	cmp	r3, #80	@ 0x50
 800440e:	d873      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004410:	2b40      	cmp	r3, #64	@ 0x40
 8004412:	d058      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004414:	2b40      	cmp	r3, #64	@ 0x40
 8004416:	d86f      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004418:	2b30      	cmp	r3, #48	@ 0x30
 800441a:	d064      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15a>
 800441c:	2b30      	cmp	r3, #48	@ 0x30
 800441e:	d86b      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004420:	2b20      	cmp	r3, #32
 8004422:	d060      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004424:	2b20      	cmp	r3, #32
 8004426:	d867      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d05c      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15a>
 800442c:	2b10      	cmp	r3, #16
 800442e:	d05a      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004430:	e062      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004442:	f000 f971 	bl	8004728 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004454:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	609a      	str	r2, [r3, #8]
      break;
 800445e:	e04f      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004470:	f000 f95a 	bl	8004728 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004482:	609a      	str	r2, [r3, #8]
      break;
 8004484:	e03c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004492:	461a      	mov	r2, r3
 8004494:	f000 f8ce 	bl	8004634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2150      	movs	r1, #80	@ 0x50
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 f927 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80044a4:	e02c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b2:	461a      	mov	r2, r3
 80044b4:	f000 f8ed 	bl	8004692 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2160      	movs	r1, #96	@ 0x60
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f917 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80044c4:	e01c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d2:	461a      	mov	r2, r3
 80044d4:	f000 f8ae 	bl	8004634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2140      	movs	r1, #64	@ 0x40
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f907 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80044e4:	e00c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f000 f8fe 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80044f6:	e003      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
      break;
 80044fc:	e000      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a3a      	ldr	r2, [pc, #232]	@ (8004618 <TIM_Base_SetConfig+0xfc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00f      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453a:	d00b      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a37      	ldr	r2, [pc, #220]	@ (800461c <TIM_Base_SetConfig+0x100>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d007      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a36      	ldr	r2, [pc, #216]	@ (8004620 <TIM_Base_SetConfig+0x104>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a35      	ldr	r2, [pc, #212]	@ (8004624 <TIM_Base_SetConfig+0x108>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d108      	bne.n	8004566 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a2b      	ldr	r2, [pc, #172]	@ (8004618 <TIM_Base_SetConfig+0xfc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01b      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004574:	d017      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a28      	ldr	r2, [pc, #160]	@ (800461c <TIM_Base_SetConfig+0x100>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a27      	ldr	r2, [pc, #156]	@ (8004620 <TIM_Base_SetConfig+0x104>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00f      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a26      	ldr	r2, [pc, #152]	@ (8004624 <TIM_Base_SetConfig+0x108>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00b      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a25      	ldr	r2, [pc, #148]	@ (8004628 <TIM_Base_SetConfig+0x10c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d007      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a24      	ldr	r2, [pc, #144]	@ (800462c <TIM_Base_SetConfig+0x110>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d003      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a23      	ldr	r2, [pc, #140]	@ (8004630 <TIM_Base_SetConfig+0x114>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d108      	bne.n	80045b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a0e      	ldr	r2, [pc, #56]	@ (8004618 <TIM_Base_SetConfig+0xfc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d103      	bne.n	80045ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f023 0201 	bic.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	611a      	str	r2, [r3, #16]
  }
}
 800460a:	bf00      	nop
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40010000 	.word	0x40010000
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800
 8004624:	40000c00 	.word	0x40000c00
 8004628:	40014000 	.word	0x40014000
 800462c:	40014400 	.word	0x40014400
 8004630:	40014800 	.word	0x40014800

08004634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f023 0201 	bic.w	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800465e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f023 030a 	bic.w	r3, r3, #10
 8004670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004692:	b480      	push	{r7}
 8004694:	b087      	sub	sp, #28
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f023 0210 	bic.w	r2, r3, #16
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	031b      	lsls	r3, r3, #12
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	f043 0307 	orr.w	r3, r3, #7
 8004714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	609a      	str	r2, [r3, #8]
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	021a      	lsls	r2, r3, #8
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	431a      	orrs	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4313      	orrs	r3, r2
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800477c:	2302      	movs	r3, #2
 800477e:	e050      	b.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1c      	ldr	r2, [pc, #112]	@ (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047cc:	d013      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a18      	ldr	r2, [pc, #96]	@ (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a16      	ldr	r2, [pc, #88]	@ (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a15      	ldr	r2, [pc, #84]	@ (800483c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a13      	ldr	r2, [pc, #76]	@ (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d10c      	bne.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	4313      	orrs	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40010000 	.word	0x40010000
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40014000 	.word	0x40014000

08004844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f043 0201 	orr.w	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f023 0201 	bic.w	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048a2:	d901      	bls.n	80048a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e01b      	b.n	80048e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	daf2      	bge.n	8004896 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	019b      	lsls	r3, r3, #6
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3301      	adds	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048cc:	d901      	bls.n	80048d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e006      	b.n	80048e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d0f0      	beq.n	80048c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3301      	adds	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004904:	d901      	bls.n	800490a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e018      	b.n	800493c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	daf2      	bge.n	80048f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2210      	movs	r2, #16
 800491a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3301      	adds	r3, #1
 8004920:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004928:	d901      	bls.n	800492e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e006      	b.n	800493c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b10      	cmp	r3, #16
 8004938:	d0f0      	beq.n	800491c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004948:	b480      	push	{r7}
 800494a:	b089      	sub	sp, #36	@ 0x24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4611      	mov	r1, r2
 8004954:	461a      	mov	r2, r3
 8004956:	460b      	mov	r3, r1
 8004958:	71fb      	strb	r3, [r7, #7]
 800495a:	4613      	mov	r3, r2
 800495c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004966:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800496a:	2b00      	cmp	r3, #0
 800496c:	d123      	bne.n	80049b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800496e:	88bb      	ldrh	r3, [r7, #4]
 8004970:	3303      	adds	r3, #3
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004976:	2300      	movs	r3, #0
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e018      	b.n	80049ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	031a      	lsls	r2, r3, #12
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4413      	add	r3, r2
 8004984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004988:	461a      	mov	r2, r3
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	3301      	adds	r3, #1
 8004994:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3301      	adds	r3, #1
 800499a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	3301      	adds	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3301      	adds	r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	3301      	adds	r3, #1
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d3e2      	bcc.n	800497c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3724      	adds	r7, #36	@ 0x24
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b08b      	sub	sp, #44	@ 0x2c
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	089b      	lsrs	r3, r3, #2
 80049de:	b29b      	uxth	r3, r3
 80049e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049ea:	2300      	movs	r3, #0
 80049ec:	623b      	str	r3, [r7, #32]
 80049ee:	e014      	b.n	8004a1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	3301      	adds	r3, #1
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	3301      	adds	r3, #1
 8004a06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	3301      	adds	r3, #1
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	3301      	adds	r3, #1
 8004a18:	623b      	str	r3, [r7, #32]
 8004a1a:	6a3a      	ldr	r2, [r7, #32]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d3e6      	bcc.n	80049f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a22:	8bfb      	ldrh	r3, [r7, #30]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01e      	beq.n	8004a66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a32:	461a      	mov	r2, r3
 8004a34:	f107 0310 	add.w	r3, r7, #16
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	701a      	strb	r2, [r3, #0]
      i++;
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	3301      	adds	r3, #1
 8004a52:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	3301      	adds	r3, #1
 8004a58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004a5a:	8bfb      	ldrh	r3, [r7, #30]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a60:	8bfb      	ldrh	r3, [r7, #30]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ea      	bne.n	8004a3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	372c      	adds	r7, #44	@ 0x2c
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	4013      	ands	r3, r2
 8004acc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ace:	68bb      	ldr	r3, [r7, #8]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b16:	f023 0303 	bic.w	r3, r3, #3
 8004b1a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004b30:	4313      	orrs	r3, r2
 8004b32:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d107      	bne.n	8004b4a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b40:	461a      	mov	r2, r3
 8004b42:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004b46:	6053      	str	r3, [r2, #4]
 8004b48:	e00c      	b.n	8004b64 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d107      	bne.n	8004b60 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b56:	461a      	mov	r2, r3
 8004b58:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004b5c:	6053      	str	r3, [r2, #4]
 8004b5e:	e001      	b.n	8004b64 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004b92:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004ba2:	2064      	movs	r0, #100	@ 0x64
 8004ba4:	f7fc f822 	bl	8000bec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004bb6:	200a      	movs	r0, #10
 8004bb8:	f7fc f818 	bl	8000bec <HAL_Delay>

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004bea:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <USB_DriveVbus+0x44>
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d106      	bne.n	8004c0a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004c04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004c08:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c14:	d109      	bne.n	8004c2a <USB_DriveVbus+0x64>
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004c24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c28:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	0c5b      	lsrs	r3, r3, #17
 8004c56:	f003 0303 	and.w	r3, r3, #3
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	70fb      	strb	r3, [r7, #3]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	70bb      	strb	r3, [r7, #2]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c96:	461a      	mov	r2, r3
 8004c98:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d867      	bhi.n	8004d76 <USB_HC_Init+0x10e>
 8004ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cac <USB_HC_Init+0x44>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cbd 	.word	0x08004cbd
 8004cb0:	08004d39 	.word	0x08004d39
 8004cb4:	08004cbd 	.word	0x08004cbd
 8004cb8:	08004cfb 	.word	0x08004cfb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f240 439d 	movw	r3, #1181	@ 0x49d
 8004cce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004cd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	da51      	bge.n	8004d7c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8004cf8:	e040      	b.n	8004d7c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d06:	461a      	mov	r2, r3
 8004d08:	f240 639d 	movw	r3, #1693	@ 0x69d
 8004d0c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	da34      	bge.n	8004d80 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d34:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004d36:	e023      	b.n	8004d80 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d44:	461a      	mov	r2, r3
 8004d46:	f240 2325 	movw	r3, #549	@ 0x225
 8004d4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	da17      	bge.n	8004d84 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d6e:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8004d72:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d74:	e006      	b.n	8004d84 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	77fb      	strb	r3, [r7, #31]
      break;
 8004d7a:	e004      	b.n	8004d86 <USB_HC_Init+0x11e>
      break;
 8004d7c:	bf00      	nop
 8004d7e:	e002      	b.n	8004d86 <USB_HC_Init+0x11e>
      break;
 8004d80:	bf00      	nop
 8004d82:	e000      	b.n	8004d86 <USB_HC_Init+0x11e>
      break;
 8004d84:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d92:	461a      	mov	r2, r3
 8004d94:	2300      	movs	r3, #0
 8004d96:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004db2:	f043 0302 	orr.w	r3, r3, #2
 8004db6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dcc:	6939      	ldr	r1, [r7, #16]
 8004dce:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004de2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	da03      	bge.n	8004df2 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e001      	b.n	8004df6 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff ff1e 	bl	8004c38 <USB_GetHostSpeed>
 8004dfc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004dfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d106      	bne.n	8004e14 <USB_HC_Init+0x1ac>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d003      	beq.n	8004e14 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e001      	b.n	8004e18 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e18:	787b      	ldrb	r3, [r7, #1]
 8004e1a:	059b      	lsls	r3, r3, #22
 8004e1c:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e20:	78bb      	ldrb	r3, [r7, #2]
 8004e22:	02db      	lsls	r3, r3, #11
 8004e24:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e28:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004e2e:	049b      	lsls	r3, r3, #18
 8004e30:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e34:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8004e36:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004e38:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e3c:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e56:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004e58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d003      	beq.n	8004e68 <USB_HC_Init+0x200>
 8004e60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10f      	bne.n	8004e88 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e86:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004e88:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop

08004e94 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08c      	sub	sp, #48	@ 0x30
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8004eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004eb0:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	799b      	ldrb	r3, [r3, #6]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d158      	bne.n	8004f6c <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	78db      	ldrb	r3, [r3, #3]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ec6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	8a92      	ldrh	r2, [r2, #20]
 8004ecc:	fb03 f202 	mul.w	r2, r3, r2
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	61da      	str	r2, [r3, #28]
 8004ed4:	e079      	b.n	8004fca <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	7c9b      	ldrb	r3, [r3, #18]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d130      	bne.n	8004f40 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	2bbc      	cmp	r3, #188	@ 0xbc
 8004ee4:	d918      	bls.n	8004f18 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	8a9b      	ldrh	r3, [r3, #20]
 8004eea:	461a      	mov	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d003      	beq.n	8004f08 <USB_HC_StartXfer+0x74>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d103      	bne.n	8004f10 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	e05c      	b.n	8004fca <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2201      	movs	r2, #1
 8004f14:	60da      	str	r2, [r3, #12]
 8004f16:	e058      	b.n	8004fca <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d007      	beq.n	8004f38 <USB_HC_StartXfer+0xa4>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d003      	beq.n	8004f38 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2204      	movs	r2, #4
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	e048      	b.n	8004fca <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	60da      	str	r2, [r3, #12]
 8004f3e:	e044      	b.n	8004fca <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10d      	bne.n	8004f62 <USB_HC_StartXfer+0xce>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	8a92      	ldrh	r2, [r2, #20]
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d907      	bls.n	8004f62 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	8a92      	ldrh	r2, [r2, #20]
 8004f58:	fb03 f202 	mul.w	r2, r3, r2
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	61da      	str	r2, [r3, #28]
 8004f60:	e033      	b.n	8004fca <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	6a1a      	ldr	r2, [r3, #32]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	61da      	str	r2, [r3, #28]
 8004f6a:	e02e      	b.n	8004fca <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d018      	beq.n	8004fa6 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	8a92      	ldrh	r2, [r2, #20]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	8a92      	ldrh	r2, [r2, #20]
 8004f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f88:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8004f8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004f8c:	8b7b      	ldrh	r3, [r7, #26]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d90b      	bls.n	8004faa <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8004f92:	8b7b      	ldrh	r3, [r7, #26]
 8004f94:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	8a92      	ldrh	r2, [r2, #20]
 8004f9c:	fb03 f202 	mul.w	r2, r3, r2
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	61da      	str	r2, [r3, #28]
 8004fa4:	e001      	b.n	8004faa <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	78db      	ldrb	r3, [r3, #3]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d007      	beq.n	8004fc2 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	8a92      	ldrh	r2, [r2, #20]
 8004fb8:	fb03 f202 	mul.w	r2, r3, r2
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	61da      	str	r2, [r3, #28]
 8004fc0:	e003      	b.n	8004fca <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6a1a      	ldr	r2, [r3, #32]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fd4:	04d9      	lsls	r1, r3, #19
 8004fd6:	4ba4      	ldr	r3, [pc, #656]	@ (8005268 <USB_HC_StartXfer+0x3d4>)
 8004fd8:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fda:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	7d9b      	ldrb	r3, [r3, #22]
 8004fe0:	075b      	lsls	r3, r3, #29
 8004fe2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fe6:	69f9      	ldr	r1, [r7, #28]
 8004fe8:	0148      	lsls	r0, r1, #5
 8004fea:	6a39      	ldr	r1, [r7, #32]
 8004fec:	4401      	add	r1, r0
 8004fee:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ff2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ff4:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d009      	beq.n	8005010 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	6999      	ldr	r1, [r3, #24]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800500c:	460a      	mov	r2, r1
 800500e:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	4413      	add	r3, r2
 8005030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	6a3a      	ldr	r2, [r7, #32]
 800503c:	440a      	add	r2, r1
 800503e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005042:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005046:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	4413      	add	r3, r2
 8005050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	7e7b      	ldrb	r3, [r7, #25]
 8005058:	075b      	lsls	r3, r3, #29
 800505a:	69f9      	ldr	r1, [r7, #28]
 800505c:	0148      	lsls	r0, r1, #5
 800505e:	6a39      	ldr	r1, [r7, #32]
 8005060:	4401      	add	r1, r0
 8005062:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005066:	4313      	orrs	r3, r2
 8005068:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	799b      	ldrb	r3, [r3, #6]
 800506e:	2b01      	cmp	r3, #1
 8005070:	f040 80c4 	bne.w	80051fc <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	7c5b      	ldrb	r3, [r3, #17]
 8005078:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800507e:	4313      	orrs	r3, r2
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	6a3a      	ldr	r2, [r7, #32]
 8005086:	440a      	add	r2, r1
 8005088:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800508c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005090:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	4413      	add	r3, r2
 800509a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	6a3a      	ldr	r2, [r7, #32]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80050b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	79db      	ldrb	r3, [r3, #7]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d123      	bne.n	8005102 <USB_HC_StartXfer+0x26e>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	78db      	ldrb	r3, [r3, #3]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d11f      	bne.n	8005102 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	6a3a      	ldr	r2, [r7, #32]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e0:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005100:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	7c9b      	ldrb	r3, [r3, #18]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d003      	beq.n	8005112 <USB_HC_StartXfer+0x27e>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	7c9b      	ldrb	r3, [r3, #18]
 800510e:	2b03      	cmp	r3, #3
 8005110:	d117      	bne.n	8005142 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005116:	2b01      	cmp	r3, #1
 8005118:	d113      	bne.n	8005142 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	78db      	ldrb	r3, [r3, #3]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10f      	bne.n	8005142 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	4413      	add	r3, r2
 800512a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	6a3a      	ldr	r2, [r7, #32]
 8005136:	440a      	add	r2, r1
 8005138:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800513c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005140:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	7c9b      	ldrb	r3, [r3, #18]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d163      	bne.n	8005212 <USB_HC_StartXfer+0x37e>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	78db      	ldrb	r3, [r3, #3]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d15f      	bne.n	8005212 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	3b01      	subs	r3, #1
 8005158:	2b03      	cmp	r3, #3
 800515a:	d859      	bhi.n	8005210 <USB_HC_StartXfer+0x37c>
 800515c:	a201      	add	r2, pc, #4	@ (adr r2, 8005164 <USB_HC_StartXfer+0x2d0>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	08005175 	.word	0x08005175
 8005168:	08005197 	.word	0x08005197
 800516c:	080051b9 	.word	0x080051b9
 8005170:	080051db 	.word	0x080051db
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	6a3a      	ldr	r2, [r7, #32]
 8005188:	440a      	add	r2, r1
 800518a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800518e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005192:	6053      	str	r3, [r2, #4]
          break;
 8005194:	e03d      	b.n	8005212 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051b0:	f043 030e 	orr.w	r3, r3, #14
 80051b4:	6053      	str	r3, [r2, #4]
          break;
 80051b6:	e02c      	b.n	8005212 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	6a3a      	ldr	r2, [r7, #32]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051d6:	6053      	str	r3, [r2, #4]
          break;
 80051d8:	e01b      	b.n	8005212 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	6a3a      	ldr	r2, [r7, #32]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051f8:	6053      	str	r3, [r2, #4]
          break;
 80051fa:	e00a      	b.n	8005212 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005208:	461a      	mov	r2, r3
 800520a:	2300      	movs	r3, #0
 800520c:	6053      	str	r3, [r2, #4]
 800520e:	e000      	b.n	8005212 <USB_HC_StartXfer+0x37e>
          break;
 8005210:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	4413      	add	r3, r2
 800521a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005228:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	78db      	ldrb	r3, [r3, #3]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	e003      	b.n	8005244 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005242:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800524a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005258:	461a      	mov	r2, r3
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	e055      	b.n	8005314 <USB_HC_StartXfer+0x480>
 8005268:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	78db      	ldrb	r3, [r3, #3]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d14e      	bne.n	8005312 <USB_HC_StartXfer+0x47e>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d04a      	beq.n	8005312 <USB_HC_StartXfer+0x47e>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	79db      	ldrb	r3, [r3, #7]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d146      	bne.n	8005312 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	7c9b      	ldrb	r3, [r3, #18]
 8005288:	2b03      	cmp	r3, #3
 800528a:	d831      	bhi.n	80052f0 <USB_HC_StartXfer+0x45c>
 800528c:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <USB_HC_StartXfer+0x400>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052c9 	.word	0x080052c9
 800529c:	080052a5 	.word	0x080052a5
 80052a0:	080052c9 	.word	0x080052c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	3303      	adds	r3, #3
 80052aa:	089b      	lsrs	r3, r3, #2
 80052ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80052ae:	8afa      	ldrh	r2, [r7, #22]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d91c      	bls.n	80052f4 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80052c6:	e015      	b.n	80052f4 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	3303      	adds	r3, #3
 80052ce:	089b      	lsrs	r3, r3, #2
 80052d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80052d2:	8afa      	ldrh	r2, [r7, #22]
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	429a      	cmp	r2, r3
 80052e0:	d90a      	bls.n	80052f8 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80052ee:	e003      	b.n	80052f8 <USB_HC_StartXfer+0x464>

      default:
        break;
 80052f0:	bf00      	nop
 80052f2:	e002      	b.n	80052fa <USB_HC_StartXfer+0x466>
        break;
 80052f4:	bf00      	nop
 80052f6:	e000      	b.n	80052fa <USB_HC_StartXfer+0x466>
        break;
 80052f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	6999      	ldr	r1, [r3, #24]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	785a      	ldrb	r2, [r3, #1]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	b29b      	uxth	r3, r3
 8005308:	2000      	movs	r0, #0
 800530a:	9000      	str	r0, [sp, #0]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7ff fb1b 	bl	8004948 <USB_WritePacket>
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3728      	adds	r7, #40	@ 0x28
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	b29b      	uxth	r3, r3
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800533e:	b480      	push	{r7}
 8005340:	b089      	sub	sp, #36	@ 0x24
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	0c9b      	lsrs	r3, r3, #18
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	0fdb      	lsrs	r3, r3, #31
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	0fdb      	lsrs	r3, r3, #31
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d10d      	bne.n	80053c0 <USB_HC_Halt+0x82>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <USB_HC_Halt+0x82>
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d002      	beq.n	80053bc <USB_HC_Halt+0x7e>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d101      	bne.n	80053c0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	e0d8      	b.n	8005572 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <USB_HC_Halt+0x8e>
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d173      	bne.n	80054b4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d14a      	bne.n	800548e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d133      	bne.n	800546c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	440a      	add	r2, r1
 800541a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800541e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005422:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	440a      	add	r2, r1
 800543a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800543e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005442:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	3301      	adds	r3, #1
 8005448:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005450:	d82e      	bhi.n	80054b0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005468:	d0ec      	beq.n	8005444 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800546a:	e081      	b.n	8005570 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	4413      	add	r3, r2
 8005474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	0151      	lsls	r1, r2, #5
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	440a      	add	r2, r1
 8005482:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005486:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800548a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800548c:	e070      	b.n	8005570 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054ae:	e05f      	b.n	8005570 <USB_HC_Halt+0x232>
            break;
 80054b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054b2:	e05d      	b.n	8005570 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d133      	bne.n	800554c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005502:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	440a      	add	r2, r1
 800551a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800551e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005522:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	3301      	adds	r3, #1
 8005528:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005530:	d81d      	bhi.n	800556e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005544:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005548:	d0ec      	beq.n	8005524 <USB_HC_Halt+0x1e6>
 800554a:	e011      	b.n	8005570 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	4413      	add	r3, r2
 8005554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	440a      	add	r2, r1
 8005562:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005566:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	e000      	b.n	8005570 <USB_HC_Halt+0x232>
          break;
 800556e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3724      	adds	r7, #36	@ 0x24
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b088      	sub	sp, #32
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff f967 	bl	8004866 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005598:	2110      	movs	r1, #16
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff f974 	bl	8004888 <USB_FlushTxFifo>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff f99e 	bl	80048ec <USB_FlushRxFifo>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	e01f      	b.n	8005600 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055d6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055de:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80055e6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f4:	461a      	mov	r2, r3
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	3301      	adds	r3, #1
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2b0f      	cmp	r3, #15
 8005604:	d9dc      	bls.n	80055c0 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005606:	2300      	movs	r3, #0
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e034      	b.n	8005676 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4413      	add	r3, r2
 8005614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005622:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800562a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005632:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4413      	add	r3, r2
 800563c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005640:	461a      	mov	r2, r3
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3301      	adds	r3, #1
 800564a:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005652:	d80c      	bhi.n	800566e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	4413      	add	r3, r2
 800565c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800566a:	d0ec      	beq.n	8005646 <USB_StopHost+0xc8>
 800566c:	e000      	b.n	8005670 <USB_StopHost+0xf2>
        break;
 800566e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	3301      	adds	r3, #1
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b0f      	cmp	r3, #15
 800567a:	d9c7      	bls.n	800560c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005682:	461a      	mov	r2, r3
 8005684:	f04f 33ff 	mov.w	r3, #4294967295
 8005688:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f04f 32ff 	mov.w	r2, #4294967295
 8005690:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff f8d6 	bl	8004844 <USB_EnableGlobalInt>

  return ret;
 8005698:	7ffb      	ldrb	r3, [r7, #31]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3720      	adds	r7, #32
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	e009      	b.n	80056c8 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	33e0      	adds	r3, #224	@ 0xe0
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	2200      	movs	r2, #0
 80056c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3301      	adds	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b0f      	cmp	r3, #15
 80056cc:	d9f2      	bls.n	80056b4 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e009      	b.n	80056e8 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3301      	adds	r3, #1
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ee:	d3f1      	bcc.n	80056d4 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2240      	movs	r2, #64	@ 0x40
 8005714:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	331c      	adds	r3, #28
 8005740:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005744:	2100      	movs	r1, #0
 8005746:	4618      	mov	r0, r3
 8005748:	f001 fcf8 	bl	800713c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005756:	2100      	movs	r1, #0
 8005758:	4618      	mov	r0, r3
 800575a:	f001 fcef 	bl	800713c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8005764:	2212      	movs	r2, #18
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f001 fce7 	bl	800713c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8005774:	223e      	movs	r2, #62	@ 0x3e
 8005776:	2100      	movs	r1, #0
 8005778:	4618      	mov	r0, r3
 800577a:	f001 fcdf 	bl	800713c <memset>

  return USBH_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f001 fb7d 	bl	8006e90 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005796:	2101      	movs	r1, #1
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 fc64 	bl	8007066 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af04      	add	r7, sp, #16
 80057ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80057b0:	2302      	movs	r3, #2
 80057b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d102      	bne.n	80057ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2203      	movs	r2, #3
 80057c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b0b      	cmp	r3, #11
 80057d2:	f200 81bb 	bhi.w	8005b4c <USBH_Process+0x3a4>
 80057d6:	a201      	add	r2, pc, #4	@ (adr r2, 80057dc <USBH_Process+0x34>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	0800580d 	.word	0x0800580d
 80057e0:	0800583f 	.word	0x0800583f
 80057e4:	080058a7 	.word	0x080058a7
 80057e8:	08005ae7 	.word	0x08005ae7
 80057ec:	08005b4d 	.word	0x08005b4d
 80057f0:	08005947 	.word	0x08005947
 80057f4:	08005a8d 	.word	0x08005a8d
 80057f8:	0800597d 	.word	0x0800597d
 80057fc:	0800599d 	.word	0x0800599d
 8005800:	080059bb 	.word	0x080059bb
 8005804:	080059ff 	.word	0x080059ff
 8005808:	08005acf 	.word	0x08005acf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 819b 	beq.w	8005b50 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005820:	20c8      	movs	r0, #200	@ 0xc8
 8005822:	f001 fc37 	bl	8007094 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fb8f 	bl	8006f4a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800583c:	e188      	b.n	8005b50 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8005844:	2b01      	cmp	r3, #1
 8005846:	d107      	bne.n	8005858 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005856:	e18a      	b.n	8005b6e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800585e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005862:	d914      	bls.n	800588e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800586a:	3301      	adds	r3, #1
 800586c:	b2da      	uxtb	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800587a:	2b03      	cmp	r3, #3
 800587c:	d903      	bls.n	8005886 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	220d      	movs	r2, #13
 8005882:	701a      	strb	r2, [r3, #0]
      break;
 8005884:	e173      	b.n	8005b6e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
      break;
 800588c:	e16f      	b.n	8005b6e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8005894:	f103 020a 	add.w	r2, r3, #10
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800589e:	200a      	movs	r0, #10
 80058a0:	f001 fbf8 	bl	8007094 <USBH_Delay>
      break;
 80058a4:	e163      	b.n	8005b6e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80058b6:	2104      	movs	r1, #4
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80058bc:	2064      	movs	r0, #100	@ 0x64
 80058be:	f001 fbe9 	bl	8007094 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 fb1a 	bl	8006efc <USBH_LL_GetSpeed>
 80058c8:	4603      	mov	r3, r0
 80058ca:	461a      	mov	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2205      	movs	r2, #5
 80058d6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80058d8:	2100      	movs	r1, #0
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 fa16 	bl	8006d0c <USBH_AllocPipe>
 80058e0:	4603      	mov	r3, r0
 80058e2:	461a      	mov	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80058e8:	2180      	movs	r1, #128	@ 0x80
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 fa0e 	bl	8006d0c <USBH_AllocPipe>
 80058f0:	4603      	mov	r3, r0
 80058f2:	461a      	mov	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	7919      	ldrb	r1, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800590c:	9202      	str	r2, [sp, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	9201      	str	r2, [sp, #4]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	4603      	mov	r3, r0
 8005916:	2280      	movs	r2, #128	@ 0x80
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 f9d8 	bl	8006cce <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	7959      	ldrb	r1, [r3, #5]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005932:	9202      	str	r2, [sp, #8]
 8005934:	2200      	movs	r2, #0
 8005936:	9201      	str	r2, [sp, #4]
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	4603      	mov	r3, r0
 800593c:	2200      	movs	r2, #0
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f001 f9c5 	bl	8006cce <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005944:	e113      	b.n	8005b6e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f916 	bl	8005b78 <USBH_HandleEnum>
 800594c:	4603      	mov	r3, r0
 800594e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	f040 80fd 	bne.w	8005b54 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8005968:	2b01      	cmp	r3, #1
 800596a:	d103      	bne.n	8005974 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2208      	movs	r2, #8
 8005970:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005972:	e0ef      	b.n	8005b54 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2207      	movs	r2, #7
 8005978:	701a      	strb	r2, [r3, #0]
      break;
 800597a:	e0eb      	b.n	8005b54 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80e8 	beq.w	8005b58 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800598e:	2101      	movs	r1, #1
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2208      	movs	r2, #8
 8005998:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800599a:	e0dd      	b.n	8005b58 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fc2b 	bl	8006200 <USBH_SetCfg>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f040 80d5 	bne.w	8005b5c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2209      	movs	r2, #9
 80059b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80059b8:	e0d0      	b.n	8005b5c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d016      	beq.n	80059f6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80059c8:	2101      	movs	r1, #1
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fc3b 	bl	8006246 <USBH_SetFeature>
 80059d0:	4603      	mov	r3, r0
 80059d2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d103      	bne.n	80059e4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	220a      	movs	r2, #10
 80059e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80059e2:	e0bd      	b.n	8005b60 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	f040 80b9 	bne.w	8005b60 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	220a      	movs	r2, #10
 80059f2:	701a      	strb	r2, [r3, #0]
      break;
 80059f4:	e0b4      	b.n	8005b60 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	220a      	movs	r2, #10
 80059fa:	701a      	strb	r2, [r3, #0]
      break;
 80059fc:	e0b0      	b.n	8005b60 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80ad 	beq.w	8005b64 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005a12:	2300      	movs	r3, #0
 8005a14:	73fb      	strb	r3, [r7, #15]
 8005a16:	e016      	b.n	8005a46 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005a18:	7bfa      	ldrb	r2, [r7, #15]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	32de      	adds	r2, #222	@ 0xde
 8005a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a22:	791a      	ldrb	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d108      	bne.n	8005a40 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005a2e:	7bfa      	ldrb	r2, [r7, #15]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	32de      	adds	r2, #222	@ 0xde
 8005a34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8005a3e:	e005      	b.n	8005a4c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	3301      	adds	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0e5      	beq.n	8005a18 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d016      	beq.n	8005a84 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	4798      	blx	r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2206      	movs	r2, #6
 8005a6c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005a74:	2103      	movs	r1, #3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005a7a:	e073      	b.n	8005b64 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	220d      	movs	r2, #13
 8005a80:	701a      	strb	r2, [r3, #0]
      break;
 8005a82:	e06f      	b.n	8005b64 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	220d      	movs	r2, #13
 8005a88:	701a      	strb	r2, [r3, #0]
      break;
 8005a8a:	e06b      	b.n	8005b64 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d017      	beq.n	8005ac6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005aa6:	7bbb      	ldrb	r3, [r7, #14]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	220b      	movs	r2, #11
 8005ab2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005ab4:	e058      	b.n	8005b68 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8005ab6:	7bbb      	ldrb	r3, [r7, #14]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d154      	bne.n	8005b68 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	220d      	movs	r2, #13
 8005ac2:	701a      	strb	r2, [r3, #0]
      break;
 8005ac4:	e050      	b.n	8005b68 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	220d      	movs	r2, #13
 8005aca:	701a      	strb	r2, [r3, #0]
      break;
 8005acc:	e04c      	b.n	8005b68 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d049      	beq.n	8005b6c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
      }
      break;
 8005ae4:	e042      	b.n	8005b6c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fdd7 	bl	80056a2 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005b22:	2105      	movs	r1, #5
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d107      	bne.n	8005b44 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fe23 	bl	8005788 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005b42:	e014      	b.n	8005b6e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 f9a3 	bl	8006e90 <USBH_LL_Start>
      break;
 8005b4a:	e010      	b.n	8005b6e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005b4c:	bf00      	nop
 8005b4e:	e00e      	b.n	8005b6e <USBH_Process+0x3c6>
      break;
 8005b50:	bf00      	nop
 8005b52:	e00c      	b.n	8005b6e <USBH_Process+0x3c6>
      break;
 8005b54:	bf00      	nop
 8005b56:	e00a      	b.n	8005b6e <USBH_Process+0x3c6>
    break;
 8005b58:	bf00      	nop
 8005b5a:	e008      	b.n	8005b6e <USBH_Process+0x3c6>
      break;
 8005b5c:	bf00      	nop
 8005b5e:	e006      	b.n	8005b6e <USBH_Process+0x3c6>
      break;
 8005b60:	bf00      	nop
 8005b62:	e004      	b.n	8005b6e <USBH_Process+0x3c6>
      break;
 8005b64:	bf00      	nop
 8005b66:	e002      	b.n	8005b6e <USBH_Process+0x3c6>
      break;
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <USBH_Process+0x3c6>
      break;
 8005b6c:	bf00      	nop
  }
  return USBH_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af04      	add	r7, sp, #16
 8005b7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005b80:	2301      	movs	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005b84:	2301      	movs	r3, #1
 8005b86:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b07      	cmp	r3, #7
 8005b8e:	f200 81bd 	bhi.w	8005f0c <USBH_HandleEnum+0x394>
 8005b92:	a201      	add	r2, pc, #4	@ (adr r2, 8005b98 <USBH_HandleEnum+0x20>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005bb9 	.word	0x08005bb9
 8005b9c:	08005c73 	.word	0x08005c73
 8005ba0:	08005cdd 	.word	0x08005cdd
 8005ba4:	08005d67 	.word	0x08005d67
 8005ba8:	08005dd1 	.word	0x08005dd1
 8005bac:	08005e41 	.word	0x08005e41
 8005bb0:	08005e87 	.word	0x08005e87
 8005bb4:	08005ecd 	.word	0x08005ecd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005bb8:	2108      	movs	r1, #8
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa3d 	bl	800603a <USBH_Get_DevDesc>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d12e      	bne.n	8005c28 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	7919      	ldrb	r1, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005bee:	9202      	str	r2, [sp, #8]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	9201      	str	r2, [sp, #4]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2280      	movs	r2, #128	@ 0x80
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 f867 	bl	8006cce <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	7959      	ldrb	r1, [r3, #5]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005c14:	9202      	str	r2, [sp, #8]
 8005c16:	2200      	movs	r2, #0
 8005c18:	9201      	str	r2, [sp, #4]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2200      	movs	r2, #0
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 f854 	bl	8006cce <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005c26:	e173      	b.n	8005f10 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005c28:	7bbb      	ldrb	r3, [r7, #14]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	f040 8170 	bne.w	8005f10 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005c36:	3301      	adds	r3, #1
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d903      	bls.n	8005c52 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	220d      	movs	r2, #13
 8005c4e:	701a      	strb	r2, [r3, #0]
      break;
 8005c50:	e15e      	b.n	8005f10 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	795b      	ldrb	r3, [r3, #5]
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 f878 	bl	8006d4e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	791b      	ldrb	r3, [r3, #4]
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 f872 	bl	8006d4e <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
      break;
 8005c70:	e14e      	b.n	8005f10 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005c72:	2112      	movs	r1, #18
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f9e0 	bl	800603a <USBH_Get_DevDesc>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d103      	bne.n	8005c8c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005c8a:	e143      	b.n	8005f14 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005c8c:	7bbb      	ldrb	r3, [r7, #14]
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	f040 8140 	bne.w	8005f14 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d903      	bls.n	8005cb6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	220d      	movs	r2, #13
 8005cb2:	701a      	strb	r2, [r3, #0]
      break;
 8005cb4:	e12e      	b.n	8005f14 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	795b      	ldrb	r3, [r3, #5]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 f846 	bl	8006d4e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	791b      	ldrb	r3, [r3, #4]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 f840 	bl	8006d4e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
      break;
 8005cda:	e11b      	b.n	8005f14 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005cdc:	2101      	movs	r1, #1
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa6a 	bl	80061b8 <USBH_SetAddress>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d130      	bne.n	8005d50 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8005cee:	2002      	movs	r0, #2
 8005cf0:	f001 f9d0 	bl	8007094 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2203      	movs	r2, #3
 8005d00:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	7919      	ldrb	r1, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005d16:	9202      	str	r2, [sp, #8]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	9201      	str	r2, [sp, #4]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2280      	movs	r2, #128	@ 0x80
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 ffd3 	bl	8006cce <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	7959      	ldrb	r1, [r3, #5]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005d3c:	9202      	str	r2, [sp, #8]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	9201      	str	r2, [sp, #4]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	4603      	mov	r3, r0
 8005d46:	2200      	movs	r2, #0
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 ffc0 	bl	8006cce <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005d4e:	e0e3      	b.n	8005f18 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	f040 80e0 	bne.w	8005f18 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	220d      	movs	r2, #13
 8005d5c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	705a      	strb	r2, [r3, #1]
      break;
 8005d64:	e0d8      	b.n	8005f18 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005d66:	2109      	movs	r1, #9
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f992 	bl	8006092 <USBH_Get_CfgDesc>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005d72:	7bbb      	ldrb	r3, [r7, #14]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d103      	bne.n	8005d80 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005d7e:	e0cd      	b.n	8005f1c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005d80:	7bbb      	ldrb	r3, [r7, #14]
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	f040 80ca 	bne.w	8005f1c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005d8e:	3301      	adds	r3, #1
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d903      	bls.n	8005daa <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	220d      	movs	r2, #13
 8005da6:	701a      	strb	r2, [r3, #0]
      break;
 8005da8:	e0b8      	b.n	8005f1c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	795b      	ldrb	r3, [r3, #5]
 8005dae:	4619      	mov	r1, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 ffcc 	bl	8006d4e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	791b      	ldrb	r3, [r3, #4]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 ffc6 	bl	8006d4e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
      break;
 8005dce:	e0a5      	b.n	8005f1c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f95a 	bl	8006092 <USBH_Get_CfgDesc>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005de2:	7bbb      	ldrb	r3, [r7, #14]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2205      	movs	r2, #5
 8005dec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005dee:	e097      	b.n	8005f20 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005df0:	7bbb      	ldrb	r3, [r7, #14]
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	f040 8094 	bne.w	8005f20 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005dfe:	3301      	adds	r3, #1
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d903      	bls.n	8005e1a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	220d      	movs	r2, #13
 8005e16:	701a      	strb	r2, [r3, #0]
      break;
 8005e18:	e082      	b.n	8005f20 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	795b      	ldrb	r3, [r3, #5]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 ff94 	bl	8006d4e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	791b      	ldrb	r3, [r3, #4]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 ff8e 	bl	8006d4e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
      break;
 8005e3e:	e06f      	b.n	8005f20 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d019      	beq.n	8005e7e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005e56:	23ff      	movs	r3, #255	@ 0xff
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f944 	bl	80060e6 <USBH_Get_StringDesc>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005e62:	7bbb      	ldrb	r3, [r7, #14]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d103      	bne.n	8005e70 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2206      	movs	r2, #6
 8005e6c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005e6e:	e059      	b.n	8005f24 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005e70:	7bbb      	ldrb	r3, [r7, #14]
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d156      	bne.n	8005f24 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2206      	movs	r2, #6
 8005e7a:	705a      	strb	r2, [r3, #1]
      break;
 8005e7c:	e052      	b.n	8005f24 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2206      	movs	r2, #6
 8005e82:	705a      	strb	r2, [r3, #1]
      break;
 8005e84:	e04e      	b.n	8005f24 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d019      	beq.n	8005ec4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005e9c:	23ff      	movs	r3, #255	@ 0xff
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f921 	bl	80060e6 <USBH_Get_StringDesc>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005ea8:	7bbb      	ldrb	r3, [r7, #14]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005eb4:	e038      	b.n	8005f28 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005eb6:	7bbb      	ldrb	r3, [r7, #14]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d135      	bne.n	8005f28 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2207      	movs	r2, #7
 8005ec0:	705a      	strb	r2, [r3, #1]
      break;
 8005ec2:	e031      	b.n	8005f28 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2207      	movs	r2, #7
 8005ec8:	705a      	strb	r2, [r3, #1]
      break;
 8005eca:	e02d      	b.n	8005f28 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d017      	beq.n	8005f06 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005ee2:	23ff      	movs	r3, #255	@ 0xff
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f8fe 	bl	80060e6 <USBH_Get_StringDesc>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005ef8:	e018      	b.n	8005f2c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005efa:	7bbb      	ldrb	r3, [r7, #14]
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d115      	bne.n	8005f2c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	73fb      	strb	r3, [r7, #15]
      break;
 8005f04:	e012      	b.n	8005f2c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]
      break;
 8005f0a:	e00f      	b.n	8005f2c <USBH_HandleEnum+0x3b4>

    default:
      break;
 8005f0c:	bf00      	nop
 8005f0e:	e00e      	b.n	8005f2e <USBH_HandleEnum+0x3b6>
      break;
 8005f10:	bf00      	nop
 8005f12:	e00c      	b.n	8005f2e <USBH_HandleEnum+0x3b6>
      break;
 8005f14:	bf00      	nop
 8005f16:	e00a      	b.n	8005f2e <USBH_HandleEnum+0x3b6>
      break;
 8005f18:	bf00      	nop
 8005f1a:	e008      	b.n	8005f2e <USBH_HandleEnum+0x3b6>
      break;
 8005f1c:	bf00      	nop
 8005f1e:	e006      	b.n	8005f2e <USBH_HandleEnum+0x3b6>
      break;
 8005f20:	bf00      	nop
 8005f22:	e004      	b.n	8005f2e <USBH_HandleEnum+0x3b6>
      break;
 8005f24:	bf00      	nop
 8005f26:	e002      	b.n	8005f2e <USBH_HandleEnum+0x3b6>
      break;
 8005f28:	bf00      	nop
 8005f2a:	e000      	b.n	8005f2e <USBH_HandleEnum+0x3b6>
      break;
 8005f2c:	bf00      	nop
  }
  return Status;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f804 	bl	8005f5c <USBH_HandleSof>
}
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b0b      	cmp	r3, #11
 8005f6c:	d10a      	bne.n	8005f84 <USBH_HandleSof+0x28>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
  }
}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005f9c:	bf00      	nop
}
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8005fb8:	bf00      	nop
}
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 ff57 	bl	8006ec6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	791b      	ldrb	r3, [r3, #4]
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fe95 	bl	8006d4e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	795b      	ldrb	r3, [r3, #5]
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fe8f 	bl	8006d4e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b086      	sub	sp, #24
 800603e:	af02      	add	r7, sp, #8
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8006046:	887b      	ldrh	r3, [r7, #2]
 8006048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800604c:	d901      	bls.n	8006052 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800604e:	2303      	movs	r3, #3
 8006050:	e01b      	b.n	800608a <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006058:	887b      	ldrh	r3, [r7, #2]
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006062:	2100      	movs	r1, #0
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f872 	bl	800614e <USBH_GetDescriptor>
 800606a:	4603      	mov	r3, r0
 800606c:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d109      	bne.n	8006088 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800607a:	887a      	ldrh	r2, [r7, #2]
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f906 	bl	8006290 <USBH_ParseDevDesc>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b086      	sub	sp, #24
 8006096:	af02      	add	r7, sp, #8
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	331c      	adds	r3, #28
 80060a2:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80060a4:	887b      	ldrh	r3, [r7, #2]
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060aa:	d901      	bls.n	80060b0 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e016      	b.n	80060de <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80060b0:	887b      	ldrh	r3, [r7, #2]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060ba:	2100      	movs	r1, #0
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f846 	bl	800614e <USBH_GetDescriptor>
 80060c2:	4603      	mov	r3, r0
 80060c4:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d107      	bne.n	80060dc <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80060cc:	887b      	ldrh	r3, [r7, #2]
 80060ce:	461a      	mov	r2, r3
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f98c 	bl	80063f0 <USBH_ParseCfgDesc>
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b088      	sub	sp, #32
 80060ea:	af02      	add	r7, sp, #8
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	461a      	mov	r2, r3
 80060f2:	460b      	mov	r3, r1
 80060f4:	72fb      	strb	r3, [r7, #11]
 80060f6:	4613      	mov	r3, r2
 80060f8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80060fa:	893b      	ldrh	r3, [r7, #8]
 80060fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006100:	d802      	bhi.n	8006108 <USBH_Get_StringDesc+0x22>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006108:	2303      	movs	r3, #3
 800610a:	e01c      	b.n	8006146 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800610c:	7afb      	ldrb	r3, [r7, #11]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006114:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800611c:	893b      	ldrh	r3, [r7, #8]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	460b      	mov	r3, r1
 8006122:	2100      	movs	r1, #0
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f812 	bl	800614e <USBH_GetDescriptor>
 800612a:	4603      	mov	r3, r0
 800612c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d107      	bne.n	8006144 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800613a:	893a      	ldrh	r2, [r7, #8]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fb6a 	bl	8006818 <USBH_ParseStringDesc>
  }

  return status;
 8006144:	7dfb      	ldrb	r3, [r7, #23]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	607b      	str	r3, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	72fb      	strb	r3, [r7, #11]
 800615c:	4613      	mov	r3, r2
 800615e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	789b      	ldrb	r3, [r3, #2]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d11c      	bne.n	80061a2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006168:	7afb      	ldrb	r3, [r7, #11]
 800616a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800616e:	b2da      	uxtb	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2206      	movs	r2, #6
 8006178:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	893a      	ldrh	r2, [r7, #8]
 800617e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006180:	893b      	ldrh	r3, [r7, #8]
 8006182:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006186:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800618a:	d104      	bne.n	8006196 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f240 4209 	movw	r2, #1033	@ 0x409
 8006192:	829a      	strh	r2, [r3, #20]
 8006194:	e002      	b.n	800619c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8b3a      	ldrh	r2, [r7, #24]
 80061a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80061a2:	8b3b      	ldrh	r3, [r7, #24]
 80061a4:	461a      	mov	r2, r3
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fb82 	bl	80068b2 <USBH_CtlReq>
 80061ae:	4603      	mov	r3, r0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	789b      	ldrb	r3, [r3, #2]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d10f      	bne.n	80061ec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2205      	movs	r2, #5
 80061d6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80061ec:	2200      	movs	r2, #0
 80061ee:	2100      	movs	r1, #0
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fb5e 	bl	80068b2 <USBH_CtlReq>
 80061f6:	4603      	mov	r3, r0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	789b      	ldrb	r3, [r3, #2]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d10e      	bne.n	8006232 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2209      	movs	r2, #9
 800621e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	887a      	ldrh	r2, [r7, #2]
 8006224:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006232:	2200      	movs	r2, #0
 8006234:	2100      	movs	r1, #0
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fb3b 	bl	80068b2 <USBH_CtlReq>
 800623c:	4603      	mov	r3, r0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	460b      	mov	r3, r1
 8006250:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	789b      	ldrb	r3, [r3, #2]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d10f      	bne.n	800627a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2203      	movs	r2, #3
 8006264:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	b29a      	uxth	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800627a:	2200      	movs	r2, #0
 800627c:	2100      	movs	r1, #0
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fb17 	bl	80068b2 <USBH_CtlReq>
 8006284:	4603      	mov	r3, r0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80062a4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80062b0:	2302      	movs	r3, #2
 80062b2:	e094      	b.n	80063de <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	781a      	ldrb	r2, [r3, #0]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	785a      	ldrb	r2, [r3, #1]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	3302      	adds	r3, #2
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	3303      	adds	r3, #3
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b29a      	uxth	r2, r3
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	791a      	ldrb	r2, [r3, #4]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	795a      	ldrb	r2, [r3, #5]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	799a      	ldrb	r2, [r3, #6]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	79da      	ldrb	r2, [r3, #7]
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800630e:	2b01      	cmp	r3, #1
 8006310:	d11b      	bne.n	800634a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	79db      	ldrb	r3, [r3, #7]
 8006316:	2b20      	cmp	r3, #32
 8006318:	dc0f      	bgt.n	800633a <USBH_ParseDevDesc+0xaa>
 800631a:	2b08      	cmp	r3, #8
 800631c:	db0f      	blt.n	800633e <USBH_ParseDevDesc+0xae>
 800631e:	3b08      	subs	r3, #8
 8006320:	4a32      	ldr	r2, [pc, #200]	@ (80063ec <USBH_ParseDevDesc+0x15c>)
 8006322:	fa22 f303 	lsr.w	r3, r2, r3
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	bf14      	ite	ne
 800632e:	2301      	movne	r3, #1
 8006330:	2300      	moveq	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d106      	bne.n	8006346 <USBH_ParseDevDesc+0xb6>
 8006338:	e001      	b.n	800633e <USBH_ParseDevDesc+0xae>
 800633a:	2b40      	cmp	r3, #64	@ 0x40
 800633c:	d003      	beq.n	8006346 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2208      	movs	r2, #8
 8006342:	71da      	strb	r2, [r3, #7]
        break;
 8006344:	e000      	b.n	8006348 <USBH_ParseDevDesc+0xb8>
        break;
 8006346:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8006348:	e00e      	b.n	8006368 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006350:	2b02      	cmp	r3, #2
 8006352:	d107      	bne.n	8006364 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	79db      	ldrb	r3, [r3, #7]
 8006358:	2b08      	cmp	r3, #8
 800635a:	d005      	beq.n	8006368 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2208      	movs	r2, #8
 8006360:	71da      	strb	r2, [r3, #7]
 8006362:	e001      	b.n	8006368 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8006364:	2303      	movs	r3, #3
 8006366:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8006368:	88fb      	ldrh	r3, [r7, #6]
 800636a:	2b08      	cmp	r3, #8
 800636c:	d936      	bls.n	80063dc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	3308      	adds	r3, #8
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	3309      	adds	r3, #9
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	b29b      	uxth	r3, r3
 8006380:	4313      	orrs	r3, r2
 8006382:	b29a      	uxth	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	330a      	adds	r3, #10
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	330b      	adds	r3, #11
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	b29b      	uxth	r3, r3
 800639a:	4313      	orrs	r3, r2
 800639c:	b29a      	uxth	r2, r3
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	330c      	adds	r3, #12
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	330d      	adds	r3, #13
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	021b      	lsls	r3, r3, #8
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	4313      	orrs	r3, r2
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	7b9a      	ldrb	r2, [r3, #14]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	7bda      	ldrb	r2, [r3, #15]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	7c1a      	ldrb	r2, [r3, #16]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	7c5a      	ldrb	r2, [r3, #17]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	01000101 	.word	0x01000101

080063f0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08c      	sub	sp, #48	@ 0x30
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	4613      	mov	r3, r2
 80063fc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006404:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800641e:	2302      	movs	r3, #2
 8006420:	e0da      	b.n	80065d8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b09      	cmp	r3, #9
 800642c:	d002      	beq.n	8006434 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800642e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006430:	2209      	movs	r2, #9
 8006432:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	785a      	ldrb	r2, [r3, #1]
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	3302      	adds	r3, #2
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	3303      	adds	r3, #3
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	b29b      	uxth	r3, r3
 8006456:	4313      	orrs	r3, r2
 8006458:	b29b      	uxth	r3, r3
 800645a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800645e:	bf28      	it	cs
 8006460:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8006464:	b29a      	uxth	r2, r3
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	791a      	ldrb	r2, [r3, #4]
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	795a      	ldrb	r2, [r3, #5]
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	799a      	ldrb	r2, [r3, #6]
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	79da      	ldrb	r2, [r3, #7]
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	7a1a      	ldrb	r2, [r3, #8]
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	2b09      	cmp	r3, #9
 8006496:	f240 809d 	bls.w	80065d4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800649a:	2309      	movs	r3, #9
 800649c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80064a2:	e081      	b.n	80065a8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80064a4:	f107 0316 	add.w	r3, r7, #22
 80064a8:	4619      	mov	r1, r3
 80064aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064ac:	f000 f9e7 	bl	800687e <USBH_GetNextDesc>
 80064b0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80064b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b4:	785b      	ldrb	r3, [r3, #1]
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d176      	bne.n	80065a8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80064ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b09      	cmp	r3, #9
 80064c0:	d002      	beq.n	80064c8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80064c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c4:	2209      	movs	r2, #9
 80064c6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80064c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064cc:	221a      	movs	r2, #26
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	3308      	adds	r3, #8
 80064d4:	6a3a      	ldr	r2, [r7, #32]
 80064d6:	4413      	add	r3, r2
 80064d8:	3302      	adds	r3, #2
 80064da:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80064dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064de:	69f8      	ldr	r0, [r7, #28]
 80064e0:	f000 f87e 	bl	80065e0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80064ee:	e043      	b.n	8006578 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80064f0:	f107 0316 	add.w	r3, r7, #22
 80064f4:	4619      	mov	r1, r3
 80064f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064f8:	f000 f9c1 	bl	800687e <USBH_GetNextDesc>
 80064fc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80064fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	2b05      	cmp	r3, #5
 8006504:	d138      	bne.n	8006578 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	795b      	ldrb	r3, [r3, #5]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d113      	bne.n	8006536 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8006512:	2b02      	cmp	r3, #2
 8006514:	d003      	beq.n	800651e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	799b      	ldrb	r3, [r3, #6]
 800651a:	2b03      	cmp	r3, #3
 800651c:	d10b      	bne.n	8006536 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	79db      	ldrb	r3, [r3, #7]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10b      	bne.n	800653e <USBH_ParseCfgDesc+0x14e>
 8006526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b09      	cmp	r3, #9
 800652c:	d007      	beq.n	800653e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800652e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006530:	2209      	movs	r2, #9
 8006532:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006534:	e003      	b.n	800653e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006538:	2207      	movs	r2, #7
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	e000      	b.n	8006540 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800653e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006544:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006548:	3201      	adds	r2, #1
 800654a:	00d2      	lsls	r2, r2, #3
 800654c:	211a      	movs	r1, #26
 800654e:	fb01 f303 	mul.w	r3, r1, r3
 8006552:	4413      	add	r3, r2
 8006554:	3308      	adds	r3, #8
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	4413      	add	r3, r2
 800655a:	3304      	adds	r3, #4
 800655c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800655e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006560:	69b9      	ldr	r1, [r7, #24]
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 f870 	bl	8006648 <USBH_ParseEPDesc>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800656e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006572:	3301      	adds	r3, #1
 8006574:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	791b      	ldrb	r3, [r3, #4]
 800657c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006580:	429a      	cmp	r2, r3
 8006582:	d204      	bcs.n	800658e <USBH_ParseCfgDesc+0x19e>
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	885a      	ldrh	r2, [r3, #2]
 8006588:	8afb      	ldrh	r3, [r7, #22]
 800658a:	429a      	cmp	r2, r3
 800658c:	d8b0      	bhi.n	80064f0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	791b      	ldrb	r3, [r3, #4]
 8006592:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006596:	429a      	cmp	r2, r3
 8006598:	d201      	bcs.n	800659e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800659a:	2303      	movs	r3, #3
 800659c:	e01c      	b.n	80065d8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800659e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065a2:	3301      	adds	r3, #1
 80065a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80065a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d805      	bhi.n	80065bc <USBH_ParseCfgDesc+0x1cc>
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	885a      	ldrh	r2, [r3, #2]
 80065b4:	8afb      	ldrh	r3, [r7, #22]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	f63f af74 	bhi.w	80064a4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	791b      	ldrb	r3, [r3, #4]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	bf28      	it	cs
 80065c4:	2302      	movcs	r3, #2
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d201      	bcs.n	80065d4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e001      	b.n	80065d8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80065d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3730      	adds	r7, #48	@ 0x30
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	785a      	ldrb	r2, [r3, #1]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	789a      	ldrb	r2, [r3, #2]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	78da      	ldrb	r2, [r3, #3]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	3304      	adds	r3, #4
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b02      	cmp	r3, #2
 8006612:	bf28      	it	cs
 8006614:	2302      	movcs	r3, #2
 8006616:	b2da      	uxtb	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	795a      	ldrb	r2, [r3, #5]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	799a      	ldrb	r2, [r3, #6]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	79da      	ldrb	r2, [r3, #7]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	7a1a      	ldrb	r2, [r3, #8]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	721a      	strb	r2, [r3, #8]
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	785a      	ldrb	r2, [r3, #1]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	789a      	ldrb	r2, [r3, #2]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	78da      	ldrb	r2, [r3, #3]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3304      	adds	r3, #4
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3305      	adds	r3, #5
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	b29b      	uxth	r3, r3
 800668a:	4313      	orrs	r3, r2
 800668c:	b29a      	uxth	r2, r3
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	799a      	ldrb	r2, [r3, #6]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	889b      	ldrh	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066aa:	d804      	bhi.n	80066b6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80066b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b4:	d901      	bls.n	80066ba <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80066b6:	2303      	movs	r3, #3
 80066b8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d136      	bne.n	8006732 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	78db      	ldrb	r3, [r3, #3]
 80066c8:	f003 0303 	and.w	r3, r3, #3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d108      	bne.n	80066e2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	889b      	ldrh	r3, [r3, #4]
 80066d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066d8:	f240 8097 	bls.w	800680a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80066dc:	2303      	movs	r3, #3
 80066de:	75fb      	strb	r3, [r7, #23]
 80066e0:	e093      	b.n	800680a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	78db      	ldrb	r3, [r3, #3]
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d107      	bne.n	80066fe <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	889b      	ldrh	r3, [r3, #4]
 80066f2:	2b40      	cmp	r3, #64	@ 0x40
 80066f4:	f240 8089 	bls.w	800680a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80066f8:	2303      	movs	r3, #3
 80066fa:	75fb      	strb	r3, [r7, #23]
 80066fc:	e085      	b.n	800680a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	78db      	ldrb	r3, [r3, #3]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	2b01      	cmp	r3, #1
 8006708:	d005      	beq.n	8006716 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	78db      	ldrb	r3, [r3, #3]
 800670e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006712:	2b03      	cmp	r3, #3
 8006714:	d10a      	bne.n	800672c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	799b      	ldrb	r3, [r3, #6]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <USBH_ParseEPDesc+0xde>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	799b      	ldrb	r3, [r3, #6]
 8006722:	2b10      	cmp	r3, #16
 8006724:	d970      	bls.n	8006808 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8006726:	2303      	movs	r3, #3
 8006728:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800672a:	e06d      	b.n	8006808 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800672c:	2303      	movs	r3, #3
 800672e:	75fb      	strb	r3, [r7, #23]
 8006730:	e06b      	b.n	800680a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006738:	2b01      	cmp	r3, #1
 800673a:	d13c      	bne.n	80067b6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	78db      	ldrb	r3, [r3, #3]
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d005      	beq.n	8006754 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	78db      	ldrb	r3, [r3, #3]
 800674c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	889b      	ldrh	r3, [r3, #4]
 8006758:	2b40      	cmp	r3, #64	@ 0x40
 800675a:	d956      	bls.n	800680a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800675c:	2303      	movs	r3, #3
 800675e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8006760:	e053      	b.n	800680a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	78db      	ldrb	r3, [r3, #3]
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	2b01      	cmp	r3, #1
 800676c:	d10e      	bne.n	800678c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	799b      	ldrb	r3, [r3, #6]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d007      	beq.n	8006786 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800677a:	2b10      	cmp	r3, #16
 800677c:	d803      	bhi.n	8006786 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8006782:	2b40      	cmp	r3, #64	@ 0x40
 8006784:	d941      	bls.n	800680a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006786:	2303      	movs	r3, #3
 8006788:	75fb      	strb	r3, [r7, #23]
 800678a:	e03e      	b.n	800680a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	78db      	ldrb	r3, [r3, #3]
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	2b03      	cmp	r3, #3
 8006796:	d10b      	bne.n	80067b0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	799b      	ldrb	r3, [r3, #6]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d004      	beq.n	80067aa <USBH_ParseEPDesc+0x162>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	889b      	ldrh	r3, [r3, #4]
 80067a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a8:	d32f      	bcc.n	800680a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80067aa:	2303      	movs	r3, #3
 80067ac:	75fb      	strb	r3, [r7, #23]
 80067ae:	e02c      	b.n	800680a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80067b0:	2303      	movs	r3, #3
 80067b2:	75fb      	strb	r3, [r7, #23]
 80067b4:	e029      	b.n	800680a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d120      	bne.n	8006802 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	78db      	ldrb	r3, [r3, #3]
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d106      	bne.n	80067da <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	889b      	ldrh	r3, [r3, #4]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d01a      	beq.n	800680a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80067d4:	2303      	movs	r3, #3
 80067d6:	75fb      	strb	r3, [r7, #23]
 80067d8:	e017      	b.n	800680a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	78db      	ldrb	r3, [r3, #3]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d10a      	bne.n	80067fc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	799b      	ldrb	r3, [r3, #6]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <USBH_ParseEPDesc+0x1ae>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	889b      	ldrh	r3, [r3, #4]
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d909      	bls.n	800680a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80067f6:	2303      	movs	r3, #3
 80067f8:	75fb      	strb	r3, [r7, #23]
 80067fa:	e006      	b.n	800680a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80067fc:	2303      	movs	r3, #3
 80067fe:	75fb      	strb	r3, [r7, #23]
 8006800:	e003      	b.n	800680a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8006802:	2303      	movs	r3, #3
 8006804:	75fb      	strb	r3, [r7, #23]
 8006806:	e000      	b.n	800680a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006808:	bf00      	nop
  }

  return status;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
}
 800680c:	4618      	mov	r0, r3
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3301      	adds	r3, #1
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d120      	bne.n	8006872 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	1e9a      	subs	r2, r3, #2
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	4293      	cmp	r3, r2
 800683a:	bf28      	it	cs
 800683c:	4613      	movcs	r3, r2
 800683e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3302      	adds	r3, #2
 8006844:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006846:	2300      	movs	r3, #0
 8006848:	82fb      	strh	r3, [r7, #22]
 800684a:	e00b      	b.n	8006864 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800684c:	8afb      	ldrh	r3, [r7, #22]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	3301      	adds	r3, #1
 800685c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800685e:	8afb      	ldrh	r3, [r7, #22]
 8006860:	3302      	adds	r3, #2
 8006862:	82fb      	strh	r3, [r7, #22]
 8006864:	8afa      	ldrh	r2, [r7, #22]
 8006866:	8abb      	ldrh	r3, [r7, #20]
 8006868:	429a      	cmp	r2, r3
 800686a:	d3ef      	bcc.n	800684c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2200      	movs	r2, #0
 8006870:	701a      	strb	r2, [r3, #0]
  }
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	7812      	ldrb	r2, [r2, #0]
 8006890:	4413      	add	r3, r2
 8006892:	b29a      	uxth	r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4413      	add	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80068a4:	68fb      	ldr	r3, [r7, #12]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80068c0:	2301      	movs	r3, #1
 80068c2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	789b      	ldrb	r3, [r3, #2]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d002      	beq.n	80068d2 <USBH_CtlReq+0x20>
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d00f      	beq.n	80068f0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80068d0:	e027      	b.n	8006922 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	88fa      	ldrh	r2, [r7, #6]
 80068dc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2202      	movs	r2, #2
 80068e8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80068ea:	2301      	movs	r3, #1
 80068ec:	75fb      	strb	r3, [r7, #23]
      break;
 80068ee:	e018      	b.n	8006922 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 f81b 	bl	800692c <USBH_HandleControl>
 80068f6:	4603      	mov	r3, r0
 80068f8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <USBH_CtlReq+0x54>
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	2b03      	cmp	r3, #3
 8006904:	d106      	bne.n	8006914 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	761a      	strb	r2, [r3, #24]
      break;
 8006912:	e005      	b.n	8006920 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d102      	bne.n	8006920 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	709a      	strb	r2, [r3, #2]
      break;
 8006920:	bf00      	nop
  }
  return status;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af02      	add	r7, sp, #8
 8006932:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006934:	2301      	movs	r3, #1
 8006936:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006938:	2300      	movs	r3, #0
 800693a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	7e1b      	ldrb	r3, [r3, #24]
 8006940:	3b01      	subs	r3, #1
 8006942:	2b0a      	cmp	r3, #10
 8006944:	f200 8156 	bhi.w	8006bf4 <USBH_HandleControl+0x2c8>
 8006948:	a201      	add	r2, pc, #4	@ (adr r2, 8006950 <USBH_HandleControl+0x24>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	0800697d 	.word	0x0800697d
 8006954:	08006997 	.word	0x08006997
 8006958:	08006a01 	.word	0x08006a01
 800695c:	08006a27 	.word	0x08006a27
 8006960:	08006a5f 	.word	0x08006a5f
 8006964:	08006a89 	.word	0x08006a89
 8006968:	08006adb 	.word	0x08006adb
 800696c:	08006afd 	.word	0x08006afd
 8006970:	08006b39 	.word	0x08006b39
 8006974:	08006b5f 	.word	0x08006b5f
 8006978:	08006b9d 	.word	0x08006b9d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f103 0110 	add.w	r1, r3, #16
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	795b      	ldrb	r3, [r3, #5]
 8006986:	461a      	mov	r2, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f943 	bl	8006c14 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	761a      	strb	r2, [r3, #24]
      break;
 8006994:	e139      	b.n	8006c0a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	795b      	ldrb	r3, [r3, #5]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fb4f 	bl	8007040 <USBH_LL_GetURBState>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d11e      	bne.n	80069ea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	7c1b      	ldrb	r3, [r3, #16]
 80069b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80069b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8adb      	ldrh	r3, [r3, #22]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80069be:	7b7b      	ldrb	r3, [r7, #13]
 80069c0:	2b80      	cmp	r3, #128	@ 0x80
 80069c2:	d103      	bne.n	80069cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2203      	movs	r2, #3
 80069c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80069ca:	e115      	b.n	8006bf8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2205      	movs	r2, #5
 80069d0:	761a      	strb	r2, [r3, #24]
      break;
 80069d2:	e111      	b.n	8006bf8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80069d4:	7b7b      	ldrb	r3, [r7, #13]
 80069d6:	2b80      	cmp	r3, #128	@ 0x80
 80069d8:	d103      	bne.n	80069e2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2209      	movs	r2, #9
 80069de:	761a      	strb	r2, [r3, #24]
      break;
 80069e0:	e10a      	b.n	8006bf8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2207      	movs	r2, #7
 80069e6:	761a      	strb	r2, [r3, #24]
      break;
 80069e8:	e106      	b.n	8006bf8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d003      	beq.n	80069f8 <USBH_HandleControl+0xcc>
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	f040 8100 	bne.w	8006bf8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	220b      	movs	r2, #11
 80069fc:	761a      	strb	r2, [r3, #24]
      break;
 80069fe:	e0fb      	b.n	8006bf8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6899      	ldr	r1, [r3, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	899a      	ldrh	r2, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	791b      	ldrb	r3, [r3, #4]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f93a 	bl	8006c92 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2204      	movs	r2, #4
 8006a22:	761a      	strb	r2, [r3, #24]
      break;
 8006a24:	e0f1      	b.n	8006c0a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	791b      	ldrb	r3, [r3, #4]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fb07 	bl	8007040 <USBH_LL_GetURBState>
 8006a32:	4603      	mov	r3, r0
 8006a34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d102      	bne.n	8006a42 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2209      	movs	r2, #9
 8006a40:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	d102      	bne.n	8006a4e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006a4c:	e0d6      	b.n	8006bfc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	f040 80d3 	bne.w	8006bfc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	220b      	movs	r2, #11
 8006a5a:	761a      	strb	r2, [r3, #24]
      break;
 8006a5c:	e0ce      	b.n	8006bfc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6899      	ldr	r1, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	899a      	ldrh	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	795b      	ldrb	r3, [r3, #5]
 8006a6a:	2001      	movs	r0, #1
 8006a6c:	9000      	str	r0, [sp, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f8ea 	bl	8006c48 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2206      	movs	r2, #6
 8006a84:	761a      	strb	r2, [r3, #24]
      break;
 8006a86:	e0c0      	b.n	8006c0a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	795b      	ldrb	r3, [r3, #5]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fad6 	bl	8007040 <USBH_LL_GetURBState>
 8006a94:	4603      	mov	r3, r0
 8006a96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d103      	bne.n	8006aa6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2207      	movs	r2, #7
 8006aa2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006aa4:	e0ac      	b.n	8006c00 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	2b05      	cmp	r3, #5
 8006aaa:	d105      	bne.n	8006ab8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	220c      	movs	r2, #12
 8006ab0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab6:	e0a3      	b.n	8006c00 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d103      	bne.n	8006ac6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2205      	movs	r2, #5
 8006ac2:	761a      	strb	r2, [r3, #24]
      break;
 8006ac4:	e09c      	b.n	8006c00 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	f040 8099 	bne.w	8006c00 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	220b      	movs	r2, #11
 8006ad2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad8:	e092      	b.n	8006c00 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	791b      	ldrb	r3, [r3, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f8d5 	bl	8006c92 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2208      	movs	r2, #8
 8006af8:	761a      	strb	r2, [r3, #24]

      break;
 8006afa:	e086      	b.n	8006c0a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	791b      	ldrb	r3, [r3, #4]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa9c 	bl	8007040 <USBH_LL_GetURBState>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d105      	bne.n	8006b1e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	220d      	movs	r2, #13
 8006b16:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006b1c:	e072      	b.n	8006c04 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d103      	bne.n	8006b2c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	220b      	movs	r2, #11
 8006b28:	761a      	strb	r2, [r3, #24]
      break;
 8006b2a:	e06b      	b.n	8006c04 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d168      	bne.n	8006c04 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006b32:	2303      	movs	r3, #3
 8006b34:	73fb      	strb	r3, [r7, #15]
      break;
 8006b36:	e065      	b.n	8006c04 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	795b      	ldrb	r3, [r3, #5]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	9200      	str	r2, [sp, #0]
 8006b40:	2200      	movs	r2, #0
 8006b42:	2100      	movs	r1, #0
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f87f 	bl	8006c48 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	220a      	movs	r2, #10
 8006b5a:	761a      	strb	r2, [r3, #24]
      break;
 8006b5c:	e055      	b.n	8006c0a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	795b      	ldrb	r3, [r3, #5]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa6b 	bl	8007040 <USBH_LL_GetURBState>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d105      	bne.n	8006b80 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	220d      	movs	r2, #13
 8006b7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006b7e:	e043      	b.n	8006c08 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d103      	bne.n	8006b8e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2209      	movs	r2, #9
 8006b8a:	761a      	strb	r2, [r3, #24]
      break;
 8006b8c:	e03c      	b.n	8006c08 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d139      	bne.n	8006c08 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	220b      	movs	r2, #11
 8006b98:	761a      	strb	r2, [r3, #24]
      break;
 8006b9a:	e035      	b.n	8006c08 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	7e5b      	ldrb	r3, [r3, #25]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	765a      	strb	r2, [r3, #25]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	7e5b      	ldrb	r3, [r3, #25]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d806      	bhi.n	8006bbe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006bbc:	e025      	b.n	8006c0a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006bc4:	2106      	movs	r1, #6
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	795b      	ldrb	r3, [r3, #5]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f8b9 	bl	8006d4e <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	791b      	ldrb	r3, [r3, #4]
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f8b3 	bl	8006d4e <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006bee:	2302      	movs	r3, #2
 8006bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf2:	e00a      	b.n	8006c0a <USBH_HandleControl+0x2de>

    default:
      break;
 8006bf4:	bf00      	nop
 8006bf6:	e008      	b.n	8006c0a <USBH_HandleControl+0x2de>
      break;
 8006bf8:	bf00      	nop
 8006bfa:	e006      	b.n	8006c0a <USBH_HandleControl+0x2de>
      break;
 8006bfc:	bf00      	nop
 8006bfe:	e004      	b.n	8006c0a <USBH_HandleControl+0x2de>
      break;
 8006c00:	bf00      	nop
 8006c02:	e002      	b.n	8006c0a <USBH_HandleControl+0x2de>
      break;
 8006c04:	bf00      	nop
 8006c06:	e000      	b.n	8006c0a <USBH_HandleControl+0x2de>
      break;
 8006c08:	bf00      	nop
  }

  return status;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af04      	add	r7, sp, #16
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006c22:	79f9      	ldrb	r1, [r7, #7]
 8006c24:	2300      	movs	r3, #0
 8006c26:	9303      	str	r3, [sp, #12]
 8006c28:	2308      	movs	r3, #8
 8006c2a:	9302      	str	r3, [sp, #8]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	2300      	movs	r3, #0
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	2300      	movs	r3, #0
 8006c36:	2200      	movs	r2, #0
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f9d0 	bl	8006fde <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af04      	add	r7, sp, #16
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	4611      	mov	r1, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	460b      	mov	r3, r1
 8006c58:	80fb      	strh	r3, [r7, #6]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006c6c:	7979      	ldrb	r1, [r7, #5]
 8006c6e:	7e3b      	ldrb	r3, [r7, #24]
 8006c70:	9303      	str	r3, [sp, #12]
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	9302      	str	r3, [sp, #8]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2200      	movs	r2, #0
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f9ab 	bl	8006fde <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b088      	sub	sp, #32
 8006c96:	af04      	add	r7, sp, #16
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	80fb      	strh	r3, [r7, #6]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ca8:	7979      	ldrb	r1, [r7, #5]
 8006caa:	2300      	movs	r3, #0
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	9302      	str	r3, [sp, #8]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 f98d 	bl	8006fde <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006cc4:	2300      	movs	r3, #0

}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b086      	sub	sp, #24
 8006cd2:	af04      	add	r7, sp, #16
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	4608      	mov	r0, r1
 8006cd8:	4611      	mov	r1, r2
 8006cda:	461a      	mov	r2, r3
 8006cdc:	4603      	mov	r3, r0
 8006cde:	70fb      	strb	r3, [r7, #3]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70bb      	strb	r3, [r7, #2]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006ce8:	7878      	ldrb	r0, [r7, #1]
 8006cea:	78ba      	ldrb	r2, [r7, #2]
 8006cec:	78f9      	ldrb	r1, [r7, #3]
 8006cee:	8b3b      	ldrh	r3, [r7, #24]
 8006cf0:	9302      	str	r3, [sp, #8]
 8006cf2:	7d3b      	ldrb	r3, [r7, #20]
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	7c3b      	ldrb	r3, [r7, #16]
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f93f 	bl	8006f80 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f836 	bl	8006d8a <USBH_GetFreePipe>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006d22:	89fb      	ldrh	r3, [r7, #14]
 8006d24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00a      	beq.n	8006d42 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006d2c:	78fa      	ldrb	r2, [r7, #3]
 8006d2e:	89fb      	ldrh	r3, [r7, #14]
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	33e0      	adds	r3, #224	@ 0xe0
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006d42:	89fb      	ldrh	r3, [r7, #14]
 8006d44:	b2db      	uxtb	r3, r3
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	2b0f      	cmp	r3, #15
 8006d5e:	d80d      	bhi.n	8006d7c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	33e0      	adds	r3, #224	@ 0xe0
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	33e0      	adds	r3, #224	@ 0xe0
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]
 8006d9a:	e00f      	b.n	8006dbc <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	33e0      	adds	r3, #224	@ 0xe0
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	e007      	b.n	8006dc6 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	3301      	adds	r3, #1
 8006dba:	73fb      	strb	r3, [r7, #15]
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	2b0f      	cmp	r3, #15
 8006dc0:	d9ec      	bls.n	8006d9c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006dc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
	...

08006dd4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006dd8:	4802      	ldr	r0, [pc, #8]	@ (8006de4 <MX_USB_HOST_Process+0x10>)
 8006dda:	f7fe fce5 	bl	80057a8 <USBH_Process>
}
 8006dde:	bf00      	nop
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	200001b0 	.word	0x200001b0

08006de8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff f89e 	bl	8005f38 <USBH_LL_IncTimer>
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff f8d6 	bl	8005fc4 <USBH_LL_Connect>
}
 8006e18:	bf00      	nop
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff f8df 	bl	8005ff2 <USBH_LL_Disconnect>
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff f890 	bl	8005f8c <USBH_LL_PortEnabled>
}
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff f890 	bl	8005fa8 <USBH_LL_PortDisabled>
}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fa fcc8 	bl	800183c <HAL_HCD_Start>
 8006eac:	4603      	mov	r3, r0
 8006eae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 f8fa 	bl	80070ac <USBH_Get_USB_Status>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fa fcd0 	bl	8001882 <HAL_HCD_Stop>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 f8df 	bl	80070ac <USBH_Get_USB_Status>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fa fcf7 	bl	8001902 <HAL_HCD_GetCurrentSpeed>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d00c      	beq.n	8006f34 <USBH_LL_GetSpeed+0x38>
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d80d      	bhi.n	8006f3a <USBH_LL_GetSpeed+0x3e>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <USBH_LL_GetSpeed+0x2c>
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d003      	beq.n	8006f2e <USBH_LL_GetSpeed+0x32>
 8006f26:	e008      	b.n	8006f3a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f2c:	e008      	b.n	8006f40 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	73fb      	strb	r3, [r7, #15]
    break;
 8006f32:	e005      	b.n	8006f40 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006f34:	2302      	movs	r3, #2
 8006f36:	73fb      	strb	r3, [r7, #15]
    break;
 8006f38:	e002      	b.n	8006f40 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f3e:	bf00      	nop
  }
  return  speed;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fa fcab 	bl	80018bc <HAL_HCD_ResetPort>
 8006f66:	4603      	mov	r3, r0
 8006f68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 f89d 	bl	80070ac <USBH_Get_USB_Status>
 8006f72:	4603      	mov	r3, r0
 8006f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006f80:	b590      	push	{r4, r7, lr}
 8006f82:	b089      	sub	sp, #36	@ 0x24
 8006f84:	af04      	add	r7, sp, #16
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	4608      	mov	r0, r1
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	4603      	mov	r3, r0
 8006f90:	70fb      	strb	r3, [r7, #3]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70bb      	strb	r3, [r7, #2]
 8006f96:	4613      	mov	r3, r2
 8006f98:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8006fa8:	787c      	ldrb	r4, [r7, #1]
 8006faa:	78ba      	ldrb	r2, [r7, #2]
 8006fac:	78f9      	ldrb	r1, [r7, #3]
 8006fae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006fb0:	9302      	str	r3, [sp, #8]
 8006fb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	f7fa f8d5 	bl	800116e <HAL_HCD_HC_Init>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 f86e 	bl	80070ac <USBH_Get_USB_Status>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd90      	pop	{r4, r7, pc}

08006fde <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006fde:	b590      	push	{r4, r7, lr}
 8006fe0:	b089      	sub	sp, #36	@ 0x24
 8006fe2:	af04      	add	r7, sp, #16
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	4611      	mov	r1, r2
 8006fea:	461a      	mov	r2, r3
 8006fec:	4603      	mov	r3, r0
 8006fee:	70fb      	strb	r3, [r7, #3]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70bb      	strb	r3, [r7, #2]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007006:	787c      	ldrb	r4, [r7, #1]
 8007008:	78ba      	ldrb	r2, [r7, #2]
 800700a:	78f9      	ldrb	r1, [r7, #3]
 800700c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007010:	9303      	str	r3, [sp, #12]
 8007012:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007014:	9302      	str	r3, [sp, #8]
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	4623      	mov	r3, r4
 8007022:	f7fa f95d 	bl	80012e0 <HAL_HCD_HC_SubmitRequest>
 8007026:	4603      	mov	r3, r0
 8007028:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f83d 	bl	80070ac <USBH_Get_USB_Status>
 8007032:	4603      	mov	r3, r0
 8007034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007036:	7bbb      	ldrb	r3, [r7, #14]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	bd90      	pop	{r4, r7, pc}

08007040 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	4611      	mov	r1, r2
 8007056:	4618      	mov	r0, r3
 8007058:	f7fa fc3e 	bl	80018d8 <HAL_HCD_HC_GetURBState>
 800705c:	4603      	mov	r3, r0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007078:	2b01      	cmp	r3, #1
 800707a:	d103      	bne.n	8007084 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	4618      	mov	r0, r3
 8007080:	f000 f840 	bl	8007104 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007084:	20c8      	movs	r0, #200	@ 0xc8
 8007086:	f7f9 fdb1 	bl	8000bec <HAL_Delay>
  return USBH_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7f9 fda5 	bl	8000bec <HAL_Delay>
}
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d817      	bhi.n	80070f0 <USBH_Get_USB_Status+0x44>
 80070c0:	a201      	add	r2, pc, #4	@ (adr r2, 80070c8 <USBH_Get_USB_Status+0x1c>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	080070d9 	.word	0x080070d9
 80070cc:	080070df 	.word	0x080070df
 80070d0:	080070e5 	.word	0x080070e5
 80070d4:	080070eb 	.word	0x080070eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
    break;
 80070dc:	e00b      	b.n	80070f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80070de:	2302      	movs	r3, #2
 80070e0:	73fb      	strb	r3, [r7, #15]
    break;
 80070e2:	e008      	b.n	80070f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
    break;
 80070e8:	e005      	b.n	80070f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80070ea:	2302      	movs	r3, #2
 80070ec:	73fb      	strb	r3, [r7, #15]
    break;
 80070ee:	e002      	b.n	80070f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80070f0:	2302      	movs	r3, #2
 80070f2:	73fb      	strb	r3, [r7, #15]
    break;
 80070f4:	bf00      	nop
  }
  return usb_status;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]
 800711c:	e001      	b.n	8007122 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800711e:	2301      	movs	r3, #1
 8007120:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	461a      	mov	r2, r3
 8007126:	2101      	movs	r1, #1
 8007128:	4803      	ldr	r0, [pc, #12]	@ (8007138 <MX_DriverVbusFS+0x34>)
 800712a:	f7f9 ffed 	bl	8001108 <HAL_GPIO_WritePin>
}
 800712e:	bf00      	nop
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40020800 	.word	0x40020800

0800713c <memset>:
 800713c:	4402      	add	r2, r0
 800713e:	4603      	mov	r3, r0
 8007140:	4293      	cmp	r3, r2
 8007142:	d100      	bne.n	8007146 <memset+0xa>
 8007144:	4770      	bx	lr
 8007146:	f803 1b01 	strb.w	r1, [r3], #1
 800714a:	e7f9      	b.n	8007140 <memset+0x4>

0800714c <__libc_init_array>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	4d0d      	ldr	r5, [pc, #52]	@ (8007184 <__libc_init_array+0x38>)
 8007150:	4c0d      	ldr	r4, [pc, #52]	@ (8007188 <__libc_init_array+0x3c>)
 8007152:	1b64      	subs	r4, r4, r5
 8007154:	10a4      	asrs	r4, r4, #2
 8007156:	2600      	movs	r6, #0
 8007158:	42a6      	cmp	r6, r4
 800715a:	d109      	bne.n	8007170 <__libc_init_array+0x24>
 800715c:	4d0b      	ldr	r5, [pc, #44]	@ (800718c <__libc_init_array+0x40>)
 800715e:	4c0c      	ldr	r4, [pc, #48]	@ (8007190 <__libc_init_array+0x44>)
 8007160:	f000 f818 	bl	8007194 <_init>
 8007164:	1b64      	subs	r4, r4, r5
 8007166:	10a4      	asrs	r4, r4, #2
 8007168:	2600      	movs	r6, #0
 800716a:	42a6      	cmp	r6, r4
 800716c:	d105      	bne.n	800717a <__libc_init_array+0x2e>
 800716e:	bd70      	pop	{r4, r5, r6, pc}
 8007170:	f855 3b04 	ldr.w	r3, [r5], #4
 8007174:	4798      	blx	r3
 8007176:	3601      	adds	r6, #1
 8007178:	e7ee      	b.n	8007158 <__libc_init_array+0xc>
 800717a:	f855 3b04 	ldr.w	r3, [r5], #4
 800717e:	4798      	blx	r3
 8007180:	3601      	adds	r6, #1
 8007182:	e7f2      	b.n	800716a <__libc_init_array+0x1e>
 8007184:	080071b4 	.word	0x080071b4
 8007188:	080071b4 	.word	0x080071b4
 800718c:	080071b4 	.word	0x080071b4
 8007190:	080071b8 	.word	0x080071b8

08007194 <_init>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	bf00      	nop
 8007198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719a:	bc08      	pop	{r3}
 800719c:	469e      	mov	lr, r3
 800719e:	4770      	bx	lr

080071a0 <_fini>:
 80071a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a2:	bf00      	nop
 80071a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a6:	bc08      	pop	{r3}
 80071a8:	469e      	mov	lr, r3
 80071aa:	4770      	bx	lr
