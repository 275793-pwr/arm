
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003ed4  08003ed4  00004ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd0  08003fd0  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fd0  08003fd0  00004fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fd8  08003fd8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd8  08003fd8  00004fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fdc  08003fdc  00004fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003fe0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000005c  0800403c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  0800403c  00005290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e497  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f3  00000000  00000000  0001351c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00015810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdb  00000000  00000000  000166f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018924  00000000  00000000  000172d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f39e  00000000  00000000  0002fbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cbfe  00000000  00000000  0003ef95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbb93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c8  00000000  00000000  000cbbd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000d00a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ebc 	.word	0x08003ebc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003ebc 	.word	0x08003ebc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2iz>:
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800070c:	d30f      	bcc.n	800072e <__aeabi_f2iz+0x2a>
 800070e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d90d      	bls.n	8000734 <__aeabi_f2iz+0x30>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000720:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000724:	fa23 f002 	lsr.w	r0, r3, r2
 8000728:	bf18      	it	ne
 800072a:	4240      	negne	r0, r0
 800072c:	4770      	bx	lr
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	4770      	bx	lr
 8000734:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000738:	d101      	bne.n	800073e <__aeabi_f2iz+0x3a>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	d105      	bne.n	800074a <__aeabi_f2iz+0x46>
 800073e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000742:	bf08      	it	eq
 8000744:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr

08000750 <TMC2209_create>:


// Public functions

TMC2209_HandleTypeDef TMC2209_create(UART_HandleTypeDef * huart, TMC2209_SerialAddress_t serial_address)
{
 8000750:	b4b0      	push	{r4, r5, r7}
 8000752:	b08d      	sub	sp, #52	@ 0x34
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	4613      	mov	r3, r2
 800075c:	71fb      	strb	r3, [r7, #7]
    TMC2209_HandleTypeDef htmc;
    htmc.huart = huart;
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	613b      	str	r3, [r7, #16]
    htmc.serial_address = serial_address;
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	753b      	strb	r3, [r7, #20]
    htmc.cool_step_enabled = false;
 8000766:	2300      	movs	r3, #0
 8000768:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    htmc.toff = TOFF_DEFAULT; // Initialize toff
 800076c:	2303      	movs	r3, #3
 800076e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Initialize register unions to zero
    htmc.global_config.bytes = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
    htmc.driver_current.bytes = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    htmc.chopper_config.bytes = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
    htmc.pwm_config.bytes = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
    htmc.cool_config.bytes = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28

    return htmc;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	461d      	mov	r5, r3
 800078a:	f107 0410 	add.w	r4, r7, #16
 800078e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000792:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000796:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	3734      	adds	r7, #52	@ 0x34
 800079e:	46bd      	mov	sp, r7
 80007a0:	bcb0      	pop	{r4, r5, r7}
 80007a2:	4770      	bx	lr

080007a4 <TMC2209_enable>:


void TMC2209_enable(TMC2209_HandleTypeDef * htmc)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  htmc->chopper_config.toff = htmc->toff;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7f1b      	ldrb	r3, [r3, #28]
 80007b0:	f003 030f 	and.w	r3, r3, #15
 80007b4:	b2d9      	uxtb	r1, r3
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	7c13      	ldrb	r3, [r2, #16]
 80007ba:	f361 0303 	bfi	r3, r1, #0, #4
 80007be:	7413      	strb	r3, [r2, #16]
  writeStoredChopperConfig(htmc);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 fa31 	bl	8000c28 <writeStoredChopperConfig>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <TMC2209_disable>:

void TMC2209_disable(TMC2209_HandleTypeDef * htmc)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  htmc->chopper_config.toff = TOFF_DISABLE;
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	7c13      	ldrb	r3, [r2, #16]
 80007da:	f023 030f 	bic.w	r3, r3, #15
 80007de:	7413      	strb	r3, [r2, #16]
  writeStoredChopperConfig(htmc);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 fa21 	bl	8000c28 <writeStoredChopperConfig>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <TMC2209_setRunCurrent>:
  }
  writeStoredChopperConfig(htmc);
}

void TMC2209_setRunCurrent(TMC2209_HandleTypeDef * htmc, uint8_t percent)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b084      	sub	sp, #16
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	460b      	mov	r3, r1
 80007f8:	70fb      	strb	r3, [r7, #3]
  uint8_t run_current = percentToCurrentSetting(percent);
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f9bc 	bl	8000b7a <percentToCurrentSetting>
 8000802:	4603      	mov	r3, r0
 8000804:	73fb      	strb	r3, [r7, #15]
  htmc->driver_current.irun = run_current;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	f003 031f 	and.w	r3, r3, #31
 800080c:	b2d9      	uxtb	r1, r3
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	7b53      	ldrb	r3, [r2, #13]
 8000812:	f361 0304 	bfi	r3, r1, #0, #5
 8000816:	7353      	strb	r3, [r2, #13]
  writeStoredDriverCurrent(htmc);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 f9d9 	bl	8000bd0 <writeStoredDriverCurrent>
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <TMC2209_disableAutomaticCurrentScaling>:
  htmc->pwm_config.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
  writeStoredPwmConfig(htmc);
}

void TMC2209_disableAutomaticCurrentScaling(TMC2209_HandleTypeDef * htmc)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
  htmc->pwm_config.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	7d93      	ldrb	r3, [r2, #22]
 8000832:	f023 0304 	bic.w	r3, r3, #4
 8000836:	7593      	strb	r3, [r2, #22]
  writeStoredPwmConfig(htmc);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 fa04 	bl	8000c46 <writeStoredPwmConfig>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <TMC2209_disableAutomaticGradientAdaptation>:
  htmc->pwm_config.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
  writeStoredPwmConfig(htmc);
}

void TMC2209_disableAutomaticGradientAdaptation(TMC2209_HandleTypeDef * htmc)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
  htmc->pwm_config.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	7d93      	ldrb	r3, [r2, #22]
 8000852:	f023 0308 	bic.w	r3, r3, #8
 8000856:	7593      	strb	r3, [r2, #22]
  writeStoredPwmConfig(htmc);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 f9f4 	bl	8000c46 <writeStoredPwmConfig>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <TMC2209_moveAtVelocity>:
  reply_delay_data.replydelay = reply_delay;
  writeRegister(htmc, ADDRESS_REPLYDELAY, reply_delay_data.bytes);
}

void TMC2209_moveAtVelocity(TMC2209_HandleTypeDef * htmc, int32_t microsteps_per_period)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
  writeRegister(htmc, ADDRESS_VACTUAL, microsteps_per_period);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	2122      	movs	r1, #34	@ 0x22
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 f944 	bl	8000b04 <writeRegister>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <TMC2209_enableStealthChop>:
{
  writeRegister(htmc, ADDRESS_VACTUAL, VACTUAL_STEP_DIR_INTERFACE);
}

void TMC2209_enableStealthChop(TMC2209_HandleTypeDef * htmc)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  htmc->global_config.enable_spread_cycle = 0;
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	7a13      	ldrb	r3, [r2, #8]
 8000890:	f023 0304 	bic.w	r3, r3, #4
 8000894:	7213      	strb	r3, [r2, #8]
  writeStoredGlobalConfig(htmc);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f98b 	bl	8000bb2 <writeStoredGlobalConfig>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <TMC2209_disableStealthChop>:

void TMC2209_disableStealthChop(TMC2209_HandleTypeDef * htmc)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  htmc->global_config.enable_spread_cycle = 1;
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	7a13      	ldrb	r3, [r2, #8]
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	7213      	strb	r3, [r2, #8]
  writeStoredGlobalConfig(htmc);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f97b 	bl	8000bb2 <writeStoredGlobalConfig>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <TMC2209_clearDriveError>:
  global_status_union.global_status.reset = 1;
  writeRegister(htmc, ADDRESS_GSTAT, global_status_union.bytes);
}

void TMC2209_clearDriveError(TMC2209_HandleTypeDef * htmc)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  TMC2209_GlobalStatusUnion_t global_status_union;
  global_status_union.bytes = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  global_status_union.global_status.drv_err = 1;
 80008d0:	7b3b      	ldrb	r3, [r7, #12]
 80008d2:	f043 0302 	orr.w	r3, r3, #2
 80008d6:	733b      	strb	r3, [r7, #12]
  writeRegister(htmc, ADDRESS_GSTAT, global_status_union.bytes);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	461a      	mov	r2, r3
 80008dc:	2101      	movs	r1, #1
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f000 f910 	bl	8000b04 <writeRegister>
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <serialWrite>:
}

// private helper functions

static HAL_StatusTypeDef serialWrite(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80fb      	strh	r3, [r7, #6]
  if (huart != NULL)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d00a      	beq.n	8000916 <serialWrite+0x2a>
    // or using a specific UART mode if available.
    // For a generic HAL approach, we'll assume the UART is configured for half-duplex
    // or that the DE pin is handled externally or by the HAL configuration.
    // If using a DE pin, you would assert it here before transmitting.

    HAL_StatusTypeDef status = HAL_UART_Transmit(huart, data, size, HAL_MAX_DELAY);
 8000900:	88fa      	ldrh	r2, [r7, #6]
 8000902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000906:	68b9      	ldr	r1, [r7, #8]
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f002 fc53 	bl	80031b4 <HAL_UART_Transmit>
 800090e:	4603      	mov	r3, r0
 8000910:	75fb      	strb	r3, [r7, #23]

    // If using a DE pin, you would deassert it here after transmitting.

    return status;
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	e000      	b.n	8000918 <serialWrite+0x2c>
  }
  return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <minimizeMotorCurrent>:

  return global_config.pdn_disable;
}

static void minimizeMotorCurrent(TMC2209_HandleTypeDef * htmc)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  htmc->driver_current.irun = CURRENT_SETTING_MIN;
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	7b53      	ldrb	r3, [r2, #13]
 800092c:	f023 031f 	bic.w	r3, r3, #31
 8000930:	7353      	strb	r3, [r2, #13]
  htmc->driver_current.ihold = CURRENT_SETTING_MIN;
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	7b13      	ldrb	r3, [r2, #12]
 8000936:	f023 031f 	bic.w	r3, r3, #31
 800093a:	7313      	strb	r3, [r2, #12]
  writeStoredDriverCurrent(htmc);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f947 	bl	8000bd0 <writeStoredDriverCurrent>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <reverseData>:

static uint32_t reverseData(uint32_t data)
{
 800094a:	b480      	push	{r7}
 800094c:	b085      	sub	sp, #20
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  uint32_t reversed_data = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  uint8_t right_shift;
  uint8_t left_shift;
  for (uint8_t i=0; i<DATA_SIZE; ++i)
 8000956:	2300      	movs	r3, #0
 8000958:	72fb      	strb	r3, [r7, #11]
 800095a:	e016      	b.n	800098a <reverseData+0x40>
  {
    right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 800095c:	7afb      	ldrb	r3, [r7, #11]
 800095e:	f1c3 0303 	rsb	r3, r3, #3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	72bb      	strb	r3, [r7, #10]
    left_shift = i * BITS_PER_BYTE;
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	727b      	strb	r3, [r7, #9]
    reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 800096e:	7abb      	ldrb	r3, [r7, #10]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	fa22 f303 	lsr.w	r3, r2, r3
 8000976:	b2da      	uxtb	r2, r3
 8000978:	7a7b      	ldrb	r3, [r7, #9]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
  for (uint8_t i=0; i<DATA_SIZE; ++i)
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	3301      	adds	r3, #1
 8000988:	72fb      	strb	r3, [r7, #11]
 800098a:	7afb      	ldrb	r3, [r7, #11]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d9e5      	bls.n	800095c <reverseData+0x12>
  }
  return reversed_data;
 8000990:	68fb      	ldr	r3, [r7, #12]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <calculateCrc>:

static uint8_t calculateCrc(uint64_t datagram_bytes, uint8_t datagram_size)
{
 800099c:	b4f0      	push	{r4, r5, r6, r7}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	75fb      	strb	r3, [r7, #23]
  uint8_t byte;
  for (uint8_t i=0; i<(datagram_size - 1); ++i)
 80009ae:	2300      	movs	r3, #0
 80009b0:	757b      	strb	r3, [r7, #21]
 80009b2:	e037      	b.n	8000a24 <calculateCrc+0x88>
  {
    byte = (datagram_bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80009b4:	7d7b      	ldrb	r3, [r7, #21]
 80009b6:	00d9      	lsls	r1, r3, #3
 80009b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80009bc:	f1c1 0620 	rsb	r6, r1, #32
 80009c0:	f1a1 0020 	sub.w	r0, r1, #32
 80009c4:	fa22 f401 	lsr.w	r4, r2, r1
 80009c8:	fa03 f606 	lsl.w	r6, r3, r6
 80009cc:	4334      	orrs	r4, r6
 80009ce:	fa23 f000 	lsr.w	r0, r3, r0
 80009d2:	4304      	orrs	r4, r0
 80009d4:	fa23 f501 	lsr.w	r5, r3, r1
 80009d8:	4623      	mov	r3, r4
 80009da:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j=0; j<BITS_PER_BYTE; ++j)
 80009dc:	2300      	movs	r3, #0
 80009de:	753b      	strb	r3, [r7, #20]
 80009e0:	e01a      	b.n	8000a18 <calculateCrc+0x7c>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	09db      	lsrs	r3, r3, #7
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	461a      	mov	r2, r3
 80009ea:	7dbb      	ldrb	r3, [r7, #22]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d008      	beq.n	8000a06 <calculateCrc+0x6a>
      {
        crc = (crc << 1) ^ 0x07;
 80009f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	f083 0307 	eor.w	r3, r3, #7
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	75fb      	strb	r3, [r7, #23]
 8000a04:	e002      	b.n	8000a0c <calculateCrc+0x70>
      }
      else
      {
        crc = crc << 1;
 8000a06:	7dfb      	ldrb	r3, [r7, #23]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	75fb      	strb	r3, [r7, #23]
      }
      byte = byte >> 1;
 8000a0c:	7dbb      	ldrb	r3, [r7, #22]
 8000a0e:	085b      	lsrs	r3, r3, #1
 8000a10:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j=0; j<BITS_PER_BYTE; ++j)
 8000a12:	7d3b      	ldrb	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	753b      	strb	r3, [r7, #20]
 8000a18:	7d3b      	ldrb	r3, [r7, #20]
 8000a1a:	2b07      	cmp	r3, #7
 8000a1c:	d9e1      	bls.n	80009e2 <calculateCrc+0x46>
  for (uint8_t i=0; i<(datagram_size - 1); ++i)
 8000a1e:	7d7b      	ldrb	r3, [r7, #21]
 8000a20:	3301      	adds	r3, #1
 8000a22:	757b      	strb	r3, [r7, #21]
 8000a24:	7d7a      	ldrb	r2, [r7, #21]
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	dbc2      	blt.n	80009b4 <calculateCrc+0x18>
    }
  }
  return crc;
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bcf0      	pop	{r4, r5, r6, r7}
 8000a38:	4770      	bx	lr

08000a3a <sendDatagramUnidirectional>:

static void sendDatagramUnidirectional(UART_HandleTypeDef *huart, uint64_t datagram_bytes, uint8_t datagram_size)
{
 8000a3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a3e:	b089      	sub	sp, #36	@ 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	e9c7 2300 	strd	r2, r3, [r7]
 8000a48:	466b      	mov	r3, sp
 8000a4a:	60bb      	str	r3, [r7, #8]
  uint8_t byte;
  uint8_t data_buffer[datagram_size];
 8000a4c:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8000a50:	460b      	mov	r3, r1
 8000a52:	3b01      	subs	r3, #1
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	b2cb      	uxtb	r3, r1
 8000a58:	2200      	movs	r2, #0
 8000a5a:	469a      	mov	sl, r3
 8000a5c:	4693      	mov	fp, r2
 8000a5e:	f04f 0200 	mov.w	r2, #0
 8000a62:	f04f 0300 	mov.w	r3, #0
 8000a66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000a6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000a6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000a72:	b2cb      	uxtb	r3, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	4698      	mov	r8, r3
 8000a78:	4691      	mov	r9, r2
 8000a7a:	f04f 0200 	mov.w	r2, #0
 8000a7e:	f04f 0300 	mov.w	r3, #0
 8000a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a8e:	460b      	mov	r3, r1
 8000a90:	3307      	adds	r3, #7
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	ebad 0d03 	sub.w	sp, sp, r3
 8000a9a:	466b      	mov	r3, sp
 8000a9c:	3300      	adds	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  for (uint8_t i=0; i<datagram_size; ++i)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	77fb      	strb	r3, [r7, #31]
 8000aa4:	e01a      	b.n	8000adc <sendDatagramUnidirectional+0xa2>
  {
    byte = (datagram_bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8000aa6:	7ffb      	ldrb	r3, [r7, #31]
 8000aa8:	00d9      	lsls	r1, r3, #3
 8000aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000aae:	f1c1 0620 	rsb	r6, r1, #32
 8000ab2:	f1a1 0020 	sub.w	r0, r1, #32
 8000ab6:	fa22 f401 	lsr.w	r4, r2, r1
 8000aba:	fa03 f606 	lsl.w	r6, r3, r6
 8000abe:	4334      	orrs	r4, r6
 8000ac0:	fa23 f000 	lsr.w	r0, r3, r0
 8000ac4:	4304      	orrs	r4, r0
 8000ac6:	fa23 f501 	lsr.w	r5, r3, r1
 8000aca:	4623      	mov	r3, r4
 8000acc:	74fb      	strb	r3, [r7, #19]
    data_buffer[i] = byte;
 8000ace:	7ffb      	ldrb	r3, [r7, #31]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	7cf9      	ldrb	r1, [r7, #19]
 8000ad4:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i=0; i<datagram_size; ++i)
 8000ad6:	7ffb      	ldrb	r3, [r7, #31]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	77fb      	strb	r3, [r7, #31]
 8000adc:	7ffa      	ldrb	r2, [r7, #31]
 8000ade:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d3df      	bcc.n	8000aa6 <sendDatagramUnidirectional+0x6c>
  }
  serialWrite(huart, data_buffer, datagram_size);
 8000ae6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	6979      	ldr	r1, [r7, #20]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff fefb 	bl	80008ec <serialWrite>
 8000af6:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8000afa:	bf00      	nop
 8000afc:	3724      	adds	r7, #36	@ 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b04 <writeRegister>:
  // the reply directly.
}

static void writeRegister(TMC2209_HandleTypeDef *htmc, uint8_t register_address,
  uint32_t data)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	72fb      	strb	r3, [r7, #11]
  TMC2209_WriteReadReplyDatagram_t write_datagram;
  write_datagram.bytes = 0;
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	f04f 0300 	mov.w	r3, #0
 8000b1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  write_datagram.sync = SYNC;
 8000b1e:	7c3b      	ldrb	r3, [r7, #16]
 8000b20:	2205      	movs	r2, #5
 8000b22:	f362 0303 	bfi	r3, r2, #0, #4
 8000b26:	743b      	strb	r3, [r7, #16]
  write_datagram.serial_address = htmc->serial_address;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	747b      	strb	r3, [r7, #17]
  write_datagram.register_address = register_address;
 8000b2e:	7afb      	ldrb	r3, [r7, #11]
 8000b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	7cbb      	ldrb	r3, [r7, #18]
 8000b38:	f362 0306 	bfi	r3, r2, #0, #7
 8000b3c:	74bb      	strb	r3, [r7, #18]
  write_datagram.rw = RW_WRITE;
 8000b3e:	7cbb      	ldrb	r3, [r7, #18]
 8000b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b44:	74bb      	strb	r3, [r7, #18]
  write_datagram.data = reverseData(data);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff feff 	bl	800094a <reverseData>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f8c7 3013 	str.w	r3, [r7, #19]
  write_datagram.crc = calculateCrc(write_datagram.bytes, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8000b52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b56:	2208      	movs	r2, #8
 8000b58:	f7ff ff20 	bl	800099c <calculateCrc>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	75fb      	strb	r3, [r7, #23]

  sendDatagramUnidirectional(htmc->huart, write_datagram.bytes, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	6819      	ldr	r1, [r3, #0]
 8000b64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b68:	2008      	movs	r0, #8
 8000b6a:	9000      	str	r0, [sp, #0]
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	f7ff ff64 	bl	8000a3a <sendDatagramUnidirectional>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <percentToCurrentSetting>:

  return 0; // Return 0 if all retries fail
}

static uint8_t percentToCurrentSetting(uint8_t percent)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af02      	add	r7, sp, #8
 8000b80:	4603      	mov	r3, r0
 8000b82:	71fb      	strb	r3, [r7, #7]
  uint8_t constrained_percent = constrain_uint32(percent,
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2264      	movs	r2, #100	@ 0x64
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f86a 	bl	8000c64 <constrain_uint32>
 8000b90:	4603      	mov	r3, r0
 8000b92:	73fb      	strb	r3, [r7, #15]
    PERCENT_MIN,
    PERCENT_MAX);
  uint8_t current_setting = map_uint8(constrained_percent,
 8000b94:	7bf8      	ldrb	r0, [r7, #15]
 8000b96:	231f      	movs	r3, #31
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2264      	movs	r2, #100	@ 0x64
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f000 f876 	bl	8000c90 <map_uint8>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	73bb      	strb	r3, [r7, #14]
    PERCENT_MIN,
    PERCENT_MAX,
    CURRENT_SETTING_MIN,
    CURRENT_SETTING_MAX);
  return current_setting;
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <writeStoredGlobalConfig>:
    PERCENT_MAX);
  return percent;
}

static void writeStoredGlobalConfig(TMC2209_HandleTypeDef *htmc)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_GCONF, htmc->global_config.bytes);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ff9e 	bl	8000b04 <writeRegister>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <writeStoredDriverCurrent>:
{
  return readRegister(htmc, ADDRESS_GCONF);
}

static void writeStoredDriverCurrent(TMC2209_HandleTypeDef *htmc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_IHOLD_IRUN, htmc->driver_current.bytes);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2110      	movs	r1, #16
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff8f 	bl	8000b04 <writeRegister>

  if (htmc->driver_current.irun >= SEIMIN_UPPER_CURRENT_LIMIT)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7b5b      	ldrb	r3, [r3, #13]
 8000bea:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b13      	cmp	r3, #19
 8000bf2:	d905      	bls.n	8000c00 <writeStoredDriverCurrent+0x30>
  {
    htmc->cool_config.seimin = SEIMIN_UPPER_SETTING;
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	7e53      	ldrb	r3, [r2, #25]
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bfc:	7653      	strb	r3, [r2, #25]
 8000bfe:	e004      	b.n	8000c0a <writeStoredDriverCurrent+0x3a>
  }
  else
  {
    htmc->cool_config.seimin = SEIMIN_LOWER_SETTING;
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	7e53      	ldrb	r3, [r2, #25]
 8000c04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c08:	7653      	strb	r3, [r2, #25]
  }
  if (htmc->cool_step_enabled)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7f5b      	ldrb	r3, [r3, #29]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d006      	beq.n	8000c20 <writeStoredDriverCurrent+0x50>
  {
    writeRegister(htmc, ADDRESS_COOLCONF, htmc->cool_config.bytes);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	461a      	mov	r2, r3
 8000c18:	2142      	movs	r1, #66	@ 0x42
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ff72 	bl	8000b04 <writeRegister>
  }
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <writeStoredChopperConfig>:

static void writeStoredChopperConfig(TMC2209_HandleTypeDef *htmc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_CHOPCONF, htmc->chopper_config.bytes);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	461a      	mov	r2, r3
 8000c36:	216c      	movs	r1, #108	@ 0x6c
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff63 	bl	8000b04 <writeRegister>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <writeStoredPwmConfig>:
{
  return readRegister(htmc, ADDRESS_CHOPCONF);
}

static void writeStoredPwmConfig(TMC2209_HandleTypeDef *htmc)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_PWMCONF, htmc->pwm_config.bytes);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	461a      	mov	r2, r3
 8000c54:	2170      	movs	r1, #112	@ 0x70
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ff54 	bl	8000b04 <writeRegister>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <constrain_uint32>:
{
  return readRegister(htmc, ADDRESS_PWMCONF);
}

static uint32_t constrain_uint32(uint32_t value, uint32_t low, uint32_t high)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  return ((value)<(low)?(low):((value)>(high)?(high):(value)));
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d305      	bcc.n	8000c84 <constrain_uint32+0x20>
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	bf28      	it	cs
 8000c80:	4613      	movcs	r3, r2
 8000c82:	e000      	b.n	8000c86 <constrain_uint32+0x22>
 8000c84:	68bb      	ldr	r3, [r7, #8]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <map_uint8>:

static uint8_t map_uint8(uint8_t x, uint8_t in_min, uint8_t in_max, uint8_t out_min, uint8_t out_max)
{
 8000c90:	b490      	push	{r4, r7}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4604      	mov	r4, r0
 8000c98:	4608      	mov	r0, r1
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71bb      	strb	r3, [r7, #6]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	717b      	strb	r3, [r7, #5]
 8000caa:	4613      	mov	r3, r2
 8000cac:	713b      	strb	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000cae:	79fa      	ldrb	r2, [r7, #7]
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	7c39      	ldrb	r1, [r7, #16]
 8000cb6:	793a      	ldrb	r2, [r7, #4]
 8000cb8:	1a8a      	subs	r2, r1, r2
 8000cba:	fb03 f202 	mul.w	r2, r3, r2
 8000cbe:	7979      	ldrb	r1, [r7, #5]
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	1acb      	subs	r3, r1, r3
 8000cc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	793b      	ldrb	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b2db      	uxtb	r3, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc90      	pop	{r4, r7}
 8000cd8:	4770      	bx	lr
	...

08000cdc <TMC2209_init>:


void TMC2209_init(TMC2209_HandleTypeDef * htmc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    // HAL_UART_Init(htmc->huart); // Assuming UART is already initialized by CubeMX

    // Initialize the driver
    htmc->serial_address = htmc->serial_address; // Redundant, but keeps the structure
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	791a      	ldrb	r2, [r3, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	711a      	strb	r2, [r3, #4]

    // Set operation mode to serial
    htmc->global_config.bytes = 0;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
    htmc->global_config.i_scale_analog = 0;
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	7a13      	ldrb	r3, [r2, #8]
 8000cf6:	f023 0301 	bic.w	r3, r3, #1
 8000cfa:	7213      	strb	r3, [r2, #8]
    htmc->global_config.pdn_disable = 1;
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	7a13      	ldrb	r3, [r2, #8]
 8000d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d04:	7213      	strb	r3, [r2, #8]
    htmc->global_config.mstep_reg_select = 1;
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	7a13      	ldrb	r3, [r2, #8]
 8000d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0e:	7213      	strb	r3, [r2, #8]
    htmc->global_config.multistep_filt = 1;
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	7a53      	ldrb	r3, [r2, #9]
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	7253      	strb	r3, [r2, #9]
    writeStoredGlobalConfig(htmc);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ff49 	bl	8000bb2 <writeStoredGlobalConfig>

    // Set registers to defaults
    htmc->driver_current.bytes = 0;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
    htmc->driver_current.ihold = IHOLD_DEFAULT;
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	7b13      	ldrb	r3, [r2, #12]
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	f361 0304 	bfi	r3, r1, #0, #5
 8000d30:	7313      	strb	r3, [r2, #12]
    htmc->driver_current.irun = IRUN_DEFAULT;
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	7b53      	ldrb	r3, [r2, #13]
 8000d36:	f043 031f 	orr.w	r3, r3, #31
 8000d3a:	7353      	strb	r3, [r2, #13]
    htmc->driver_current.iholddelay = IHOLDDELAY_DEFAULT;
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	7b93      	ldrb	r3, [r2, #14]
 8000d40:	2101      	movs	r1, #1
 8000d42:	f361 0303 	bfi	r3, r1, #0, #4
 8000d46:	7393      	strb	r3, [r2, #14]
    writeRegister(htmc, ADDRESS_IHOLD_IRUN, htmc->driver_current.bytes);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2110      	movs	r1, #16
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff fed7 	bl	8000b04 <writeRegister>

    htmc->chopper_config.bytes = CHOPPER_CONFIG_DEFAULT;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a32      	ldr	r2, [pc, #200]	@ (8000e24 <TMC2209_init+0x148>)
 8000d5a:	611a      	str	r2, [r3, #16]
    htmc->chopper_config.tbl = TBL_DEFAULT;
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	6913      	ldr	r3, [r2, #16]
 8000d60:	2102      	movs	r1, #2
 8000d62:	f361 33d0 	bfi	r3, r1, #15, #2
 8000d66:	6113      	str	r3, [r2, #16]
    htmc->chopper_config.hend = HEND_DEFAULT;
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	8a13      	ldrh	r3, [r2, #16]
 8000d6c:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
 8000d70:	8213      	strh	r3, [r2, #16]
    htmc->chopper_config.hstart = HSTART_DEFAULT;
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	7c13      	ldrb	r3, [r2, #16]
 8000d76:	2105      	movs	r1, #5
 8000d78:	f361 1306 	bfi	r3, r1, #4, #3
 8000d7c:	7413      	strb	r3, [r2, #16]
    htmc->chopper_config.toff = TOFF_DEFAULT;
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	7c13      	ldrb	r3, [r2, #16]
 8000d82:	2103      	movs	r1, #3
 8000d84:	f361 0303 	bfi	r3, r1, #0, #4
 8000d88:	7413      	strb	r3, [r2, #16]
    writeRegister(htmc, ADDRESS_CHOPCONF, htmc->chopper_config.bytes);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	216c      	movs	r1, #108	@ 0x6c
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff feb6 	bl	8000b04 <writeRegister>

    htmc->pwm_config.bytes = PWM_CONFIG_DEFAULT;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a23      	ldr	r2, [pc, #140]	@ (8000e28 <TMC2209_init+0x14c>)
 8000d9c:	615a      	str	r2, [r3, #20]
    writeRegister(htmc, ADDRESS_PWMCONF, htmc->pwm_config.bytes);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	461a      	mov	r2, r3
 8000da4:	2170      	movs	r1, #112	@ 0x70
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff feac 	bl	8000b04 <writeRegister>

    htmc->cool_config.bytes = COOLCONF_DEFAULT;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
    writeRegister(htmc, ADDRESS_COOLCONF, htmc->cool_config.bytes);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	461a      	mov	r2, r3
 8000db8:	2142      	movs	r1, #66	@ 0x42
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fea2 	bl	8000b04 <writeRegister>

    writeRegister(htmc, ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8000dc0:	2214      	movs	r2, #20
 8000dc2:	2111      	movs	r1, #17
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fe9d 	bl	8000b04 <writeRegister>
    writeRegister(htmc, ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2113      	movs	r1, #19
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fe98 	bl	8000b04 <writeRegister>
    writeRegister(htmc, ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2122      	movs	r1, #34	@ 0x22
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff fe93 	bl	8000b04 <writeRegister>
    writeRegister(htmc, ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2114      	movs	r1, #20
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fe8e 	bl	8000b04 <writeRegister>
    writeRegister(htmc, ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2140      	movs	r1, #64	@ 0x40
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fe89 	bl	8000b04 <writeRegister>
    writeRegister(htmc, ADDRESS_COOLCONF, COOLCONF_DEFAULT); // Written twice in original, keeping for now
 8000df2:	2200      	movs	r2, #0
 8000df4:	2142      	movs	r1, #66	@ 0x42
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fe84 	bl	8000b04 <writeRegister>

    TMC2209_clearDriveError(htmc);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fd61 	bl	80008c4 <TMC2209_clearDriveError>
    minimizeMotorCurrent(htmc);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff fd8c 	bl	8000920 <minimizeMotorCurrent>
    TMC2209_disable(htmc);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fce0 	bl	80007ce <TMC2209_disable>
    TMC2209_disableAutomaticCurrentScaling(htmc);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fd09 	bl	8000826 <TMC2209_disableAutomaticCurrentScaling>
    TMC2209_disableAutomaticGradientAdaptation(htmc);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff fd16 	bl	8000846 <TMC2209_disableAutomaticGradientAdaptation>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	10000053 	.word	0x10000053
 8000e28:	c10d0024 	.word	0xc10d0024

08000e2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e40:	4b35      	ldr	r3, [pc, #212]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a34      	ldr	r2, [pc, #208]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b32      	ldr	r3, [pc, #200]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0310 	and.w	r3, r3, #16
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e58:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e5e:	f043 0320 	orr.w	r3, r3, #32
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b2c      	ldr	r3, [pc, #176]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0320 	and.w	r3, r3, #32
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b29      	ldr	r3, [pc, #164]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a28      	ldr	r2, [pc, #160]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a22      	ldr	r2, [pc, #136]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <MX_GPIO_Init+0xec>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000ea6:	481d      	ldr	r0, [pc, #116]	@ (8000f1c <MX_GPIO_Init+0xf0>)
 8000ea8:	f001 faeb 	bl	8002482 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000eb2:	481b      	ldr	r0, [pc, #108]	@ (8000f20 <MX_GPIO_Init+0xf4>)
 8000eb4:	f001 fae5 	bl	8002482 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8000eb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4815      	ldr	r0, [pc, #84]	@ (8000f24 <MX_GPIO_Init+0xf8>)
 8000ece:	f001 f93d 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 8000ed2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <MX_GPIO_Init+0xf0>)
 8000eec:	f001 f92e 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin;
 8000ef0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <MX_GPIO_Init+0xf4>)
 8000f0a:	f001 f91f 	bl	800214c <HAL_GPIO_Init>

}
 8000f0e:	bf00      	nop
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	40010800 	.word	0x40010800
 8000f24:	40011000 	.word	0x40011000

08000f28 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000f36:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 8000f3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000f42:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 8000f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f46:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000f48:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000f4a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 f80e 	bl	8000f7e <Lcd_init>

	return lcd;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	461d      	mov	r5, r3
 8000f66:	f107 0410 	add.w	r4, r7, #16
 8000f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f72:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	3728      	adds	r7, #40	@ 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bdb0      	pop	{r4, r5, r7, pc}

08000f7e <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7d9b      	ldrb	r3, [r3, #22]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10c      	bne.n	8000fa8 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000f8e:	2133      	movs	r1, #51	@ 0x33
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f87b 	bl	800108c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000f96:	2132      	movs	r1, #50	@ 0x32
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f877 	bl	800108c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000f9e:	2128      	movs	r1, #40	@ 0x28
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f873 	bl	800108c <lcd_write_command>
 8000fa6:	e003      	b.n	8000fb0 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000fa8:	2138      	movs	r1, #56	@ 0x38
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f86e 	bl	800108c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f86a 	bl	800108c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000fb8:	210c      	movs	r1, #12
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f866 	bl	800108c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000fc0:	2106      	movs	r1, #6
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f862 	bl	800108c <lcd_write_command>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	4906      	ldr	r1, [pc, #24]	@ (8000ffc <Lcd_int+0x2c>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 faba 	bl	800355c <siprintf>

	Lcd_string(lcd, buffer);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f806 	bl	8001000 <Lcd_string>
}
 8000ff4:	bf00      	nop
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	08003ed4 	.word	0x08003ed4

08001000 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e00a      	b.n	8001026 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f864 	bl	80010e8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	3301      	adds	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	7bfc      	ldrb	r4, [r7, #15]
 8001028:	6838      	ldr	r0, [r7, #0]
 800102a:	f7ff f88f 	bl	800014c <strlen>
 800102e:	4603      	mov	r3, r0
 8001030:	429c      	cmp	r4, r3
 8001032:	d3ed      	bcc.n	8001010 <Lcd_string+0x10>
	}
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}
	...

08001040 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
 800104c:	4613      	mov	r3, r2
 800104e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <Lcd_cursor+0x30>)
 8001054:	5cd2      	ldrb	r2, [r2, r3]
 8001056:	78bb      	ldrb	r3, [r7, #2]
 8001058:	4413      	add	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	3b80      	subs	r3, #128	@ 0x80
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f812 	bl	800108c <lcd_write_command>
	#endif
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08003f6c 	.word	0x08003f6c

08001074 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800107c:	2101      	movs	r1, #1
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f804 	bl	800108c <lcd_write_command>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6898      	ldr	r0, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	899b      	ldrh	r3, [r3, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	f001 f9ed 	bl	8002482 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7d9b      	ldrb	r3, [r3, #22]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d111      	bne.n	80010d4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2204      	movs	r2, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f842 	bl	8001144 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2204      	movs	r2, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f839 	bl	8001144 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80010d2:	e005      	b.n	80010e0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2208      	movs	r2, #8
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f832 	bl	8001144 <lcd_write>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6898      	ldr	r0, [r3, #8]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	899b      	ldrh	r3, [r3, #12]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	f001 f9bf 	bl	8002482 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7d9b      	ldrb	r3, [r3, #22]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d111      	bne.n	8001130 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2204      	movs	r2, #4
 8001114:	4619      	mov	r1, r3
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f814 	bl	8001144 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2204      	movs	r2, #4
 8001126:	4619      	mov	r1, r3
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f80b 	bl	8001144 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800112e:	e005      	b.n	800113c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2208      	movs	r2, #8
 8001134:	4619      	mov	r1, r3
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 f804 	bl	8001144 <lcd_write>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
 8001150:	4613      	mov	r3, r2
 8001152:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e019      	b.n	800118e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	8819      	ldrh	r1, [r3, #0]
 8001172:	78fa      	ldrb	r2, [r7, #3]
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	fa42 f303 	asr.w	r3, r2, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	f001 f97d 	bl	8002482 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3301      	adds	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	78bb      	ldrb	r3, [r7, #2]
 8001192:	429a      	cmp	r2, r3
 8001194:	d3e1      	bcc.n	800115a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6918      	ldr	r0, [r3, #16]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	8a9b      	ldrh	r3, [r3, #20]
 800119e:	2201      	movs	r2, #1
 80011a0:	4619      	mov	r1, r3
 80011a2:	f001 f96e 	bl	8002482 <HAL_GPIO_WritePin>
	DELAY(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 fec8 	bl	8001f3c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6918      	ldr	r0, [r3, #16]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	8a9b      	ldrh	r3, [r3, #20]
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	f001 f963 	bl	8002482 <HAL_GPIO_WritePin>
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <handle_motor_movement>:
/* USER CODE BEGIN 0 */



void handle_motor_movement(TMC2209_HandleTypeDef* htmc, uint32_t accel, uint32_t distance, float speed)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b08b      	sub	sp, #44	@ 0x2c
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  while (true)
  {

    for (int i = 0; i <= accel; i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011d6:	e029      	b.n	800122c <handle_motor_movement+0x68>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 80011d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011dc:	489d      	ldr	r0, [pc, #628]	@ (8001454 <handle_motor_movement+0x290>)
 80011de:	f001 f939 	bl	8002454 <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 811f 	beq.w	8001428 <handle_motor_movement+0x264>
      TMC2209_moveAtVelocity(htmc, speed * i / accel);
 80011ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011ec:	f7ff f870 	bl	80002d0 <__aeabi_i2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f8bf 	bl	8000378 <__aeabi_fmul>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461c      	mov	r4, r3
 80011fe:	68b8      	ldr	r0, [r7, #8]
 8001200:	f7ff f862 	bl	80002c8 <__aeabi_ui2f>
 8001204:	4603      	mov	r3, r0
 8001206:	4619      	mov	r1, r3
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff f969 	bl	80004e0 <__aeabi_fdiv>
 800120e:	4603      	mov	r3, r0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fa77 	bl	8000704 <__aeabi_f2iz>
 8001216:	4603      	mov	r3, r0
 8001218:	4619      	mov	r1, r3
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff fb23 	bl	8000866 <TMC2209_moveAtVelocity>
      HAL_Delay(2);
 8001220:	2002      	movs	r0, #2
 8001222:	f000 fe8b 	bl	8001f3c <HAL_Delay>
    for (int i = 0; i <= accel; i++)
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	3301      	adds	r3, #1
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	429a      	cmp	r2, r3
 8001232:	d2d1      	bcs.n	80011d8 <handle_motor_movement+0x14>
    }
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001234:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001238:	4886      	ldr	r0, [pc, #536]	@ (8001454 <handle_motor_movement+0x290>)
 800123a:	f001 f90b 	bl	8002454 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80f3 	beq.w	800142c <handle_motor_movement+0x268>
    TMC2209_moveAtVelocity(htmc, speed);
 8001246:	6838      	ldr	r0, [r7, #0]
 8001248:	f7ff fa5c 	bl	8000704 <__aeabi_f2iz>
 800124c:	4603      	mov	r3, r0
 800124e:	4619      	mov	r1, r3
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7ff fb08 	bl	8000866 <TMC2209_moveAtVelocity>
    for (int j = 0; j < distance; j++)
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	e00e      	b.n	800127a <handle_motor_movement+0xb6>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 800125c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001260:	487c      	ldr	r0, [pc, #496]	@ (8001454 <handle_motor_movement+0x290>)
 8001262:	f001 f8f7 	bl	8002454 <HAL_GPIO_ReadPin>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80e1 	beq.w	8001430 <handle_motor_movement+0x26c>
      HAL_Delay(10);
 800126e:	200a      	movs	r0, #10
 8001270:	f000 fe64 	bl	8001f3c <HAL_Delay>
    for (int j = 0; j < distance; j++)
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	3301      	adds	r3, #1
 8001278:	623b      	str	r3, [r7, #32]
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	d8ec      	bhi.n	800125c <handle_motor_movement+0x98>
    }
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001282:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001286:	4873      	ldr	r0, [pc, #460]	@ (8001454 <handle_motor_movement+0x290>)
 8001288:	f001 f8e4 	bl	8002454 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80d0 	beq.w	8001434 <handle_motor_movement+0x270>
    for (int i = accel; i > 0; i--)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	e029      	b.n	80012ee <handle_motor_movement+0x12a>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 800129a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129e:	486d      	ldr	r0, [pc, #436]	@ (8001454 <handle_motor_movement+0x290>)
 80012a0:	f001 f8d8 	bl	8002454 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80c6 	beq.w	8001438 <handle_motor_movement+0x274>
      TMC2209_moveAtVelocity(htmc, speed * i / accel);
 80012ac:	69f8      	ldr	r0, [r7, #28]
 80012ae:	f7ff f80f 	bl	80002d0 <__aeabi_i2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f85e 	bl	8000378 <__aeabi_fmul>
 80012bc:	4603      	mov	r3, r0
 80012be:	461c      	mov	r4, r3
 80012c0:	68b8      	ldr	r0, [r7, #8]
 80012c2:	f7ff f801 	bl	80002c8 <__aeabi_ui2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff f908 	bl	80004e0 <__aeabi_fdiv>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fa16 	bl	8000704 <__aeabi_f2iz>
 80012d8:	4603      	mov	r3, r0
 80012da:	4619      	mov	r1, r3
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff fac2 	bl	8000866 <TMC2209_moveAtVelocity>
      HAL_Delay(2);
 80012e2:	2002      	movs	r0, #2
 80012e4:	f000 fe2a 	bl	8001f3c <HAL_Delay>
    for (int i = accel; i > 0; i--)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	dcd2      	bgt.n	800129a <handle_motor_movement+0xd6>
    }
    HAL_Delay(100);
 80012f4:	2064      	movs	r0, #100	@ 0x64
 80012f6:	f000 fe21 	bl	8001f3c <HAL_Delay>

    for (int i = 0; i <= accel; i++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	e02c      	b.n	800135a <handle_motor_movement+0x196>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001300:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001304:	4853      	ldr	r0, [pc, #332]	@ (8001454 <handle_motor_movement+0x290>)
 8001306:	f001 f8a5 	bl	8002454 <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 8095 	beq.w	800143c <handle_motor_movement+0x278>
      TMC2209_moveAtVelocity(htmc, - speed * i / accel);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001318:	69b8      	ldr	r0, [r7, #24]
 800131a:	f7fe ffd9 	bl	80002d0 <__aeabi_i2f>
 800131e:	4603      	mov	r3, r0
 8001320:	4619      	mov	r1, r3
 8001322:	4620      	mov	r0, r4
 8001324:	f7ff f828 	bl	8000378 <__aeabi_fmul>
 8001328:	4603      	mov	r3, r0
 800132a:	461c      	mov	r4, r3
 800132c:	68b8      	ldr	r0, [r7, #8]
 800132e:	f7fe ffcb 	bl	80002c8 <__aeabi_ui2f>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff f8d2 	bl	80004e0 <__aeabi_fdiv>
 800133c:	4603      	mov	r3, r0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f9e0 	bl	8000704 <__aeabi_f2iz>
 8001344:	4603      	mov	r3, r0
 8001346:	4619      	mov	r1, r3
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f7ff fa8c 	bl	8000866 <TMC2209_moveAtVelocity>
      HAL_Delay(2);
 800134e:	2002      	movs	r0, #2
 8001350:	f000 fdf4 	bl	8001f3c <HAL_Delay>
    for (int i = 0; i <= accel; i++)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	3301      	adds	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	429a      	cmp	r2, r3
 8001360:	d2ce      	bcs.n	8001300 <handle_motor_movement+0x13c>
    }
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001362:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001366:	483b      	ldr	r0, [pc, #236]	@ (8001454 <handle_motor_movement+0x290>)
 8001368:	f001 f874 	bl	8002454 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d066      	beq.n	8001440 <handle_motor_movement+0x27c>
    TMC2209_moveAtVelocity(htmc, -speed);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f9c3 	bl	8000704 <__aeabi_f2iz>
 800137e:	4603      	mov	r3, r0
 8001380:	4619      	mov	r1, r3
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff fa6f 	bl	8000866 <TMC2209_moveAtVelocity>
    for (int j = 0; j < distance; j++)
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e00d      	b.n	80013aa <handle_motor_movement+0x1e6>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 800138e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001392:	4830      	ldr	r0, [pc, #192]	@ (8001454 <handle_motor_movement+0x290>)
 8001394:	f001 f85e 	bl	8002454 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d052      	beq.n	8001444 <handle_motor_movement+0x280>
      HAL_Delay(10);
 800139e:	200a      	movs	r0, #10
 80013a0:	f000 fdcc 	bl	8001f3c <HAL_Delay>
    for (int j = 0; j < distance; j++)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d8ed      	bhi.n	800138e <handle_motor_movement+0x1ca>
    }
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 80013b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013b6:	4827      	ldr	r0, [pc, #156]	@ (8001454 <handle_motor_movement+0x290>)
 80013b8:	f001 f84c 	bl	8002454 <HAL_GPIO_ReadPin>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d042      	beq.n	8001448 <handle_motor_movement+0x284>
    for (int i = accel; i > 0; i--)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	e02b      	b.n	8001420 <handle_motor_movement+0x25c>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 80013c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013cc:	4821      	ldr	r0, [pc, #132]	@ (8001454 <handle_motor_movement+0x290>)
 80013ce:	f001 f841 	bl	8002454 <HAL_GPIO_ReadPin>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d039      	beq.n	800144c <handle_motor_movement+0x288>
      TMC2209_moveAtVelocity(htmc, - speed * i / accel);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80013de:	6938      	ldr	r0, [r7, #16]
 80013e0:	f7fe ff76 	bl	80002d0 <__aeabi_i2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4619      	mov	r1, r3
 80013e8:	4620      	mov	r0, r4
 80013ea:	f7fe ffc5 	bl	8000378 <__aeabi_fmul>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461c      	mov	r4, r3
 80013f2:	68b8      	ldr	r0, [r7, #8]
 80013f4:	f7fe ff68 	bl	80002c8 <__aeabi_ui2f>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4619      	mov	r1, r3
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff f86f 	bl	80004e0 <__aeabi_fdiv>
 8001402:	4603      	mov	r3, r0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f97d 	bl	8000704 <__aeabi_f2iz>
 800140a:	4603      	mov	r3, r0
 800140c:	4619      	mov	r1, r3
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f7ff fa29 	bl	8000866 <TMC2209_moveAtVelocity>
      HAL_Delay(2);
 8001414:	2002      	movs	r0, #2
 8001416:	f000 fd91 	bl	8001f3c <HAL_Delay>
    for (int i = accel; i > 0; i--)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3b01      	subs	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b00      	cmp	r3, #0
 8001424:	dcd0      	bgt.n	80013c8 <handle_motor_movement+0x204>
    for (int i = 0; i <= accel; i++)
 8001426:	e6d4      	b.n	80011d2 <handle_motor_movement+0xe>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001428:	bf00      	nop
 800142a:	e010      	b.n	800144e <handle_motor_movement+0x28a>
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 800142c:	bf00      	nop
 800142e:	e00e      	b.n	800144e <handle_motor_movement+0x28a>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001430:	bf00      	nop
 8001432:	e00c      	b.n	800144e <handle_motor_movement+0x28a>
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001434:	bf00      	nop
 8001436:	e00a      	b.n	800144e <handle_motor_movement+0x28a>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001438:	bf00      	nop
 800143a:	e008      	b.n	800144e <handle_motor_movement+0x28a>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 800143c:	bf00      	nop
 800143e:	e006      	b.n	800144e <handle_motor_movement+0x28a>
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001440:	bf00      	nop
 8001442:	e004      	b.n	800144e <handle_motor_movement+0x28a>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001444:	bf00      	nop
 8001446:	e002      	b.n	800144e <handle_motor_movement+0x28a>
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001448:	bf00      	nop
 800144a:	e000      	b.n	800144e <handle_motor_movement+0x28a>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 800144c:	bf00      	nop
    }
  }

}
 800144e:	372c      	adds	r7, #44	@ 0x2c
 8001450:	46bd      	mov	sp, r7
 8001452:	bd90      	pop	{r4, r7, pc}
 8001454:	40011000 	.word	0x40011000

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b0ae      	sub	sp, #184	@ 0xb8
 800145c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145e:	f000 fd0b 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001462:	f000 fb03 	bl	8001a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001466:	f7ff fce1 	bl	8000e2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800146a:	f000 fc6b 	bl	8001d44 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800146e:	f000 fbd9 	bl	8001c24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  Lcd_PortType ports[] = {
 8001472:	4bbc      	ldr	r3, [pc, #752]	@ (8001764 <main+0x30c>)
 8001474:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8001478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800147a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    GPIOB, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin};
 800147e:	4aba      	ldr	r2, [pc, #744]	@ (8001768 <main+0x310>)
 8001480:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001484:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001488:	e883 0003 	stmia.w	r3, {r0, r1}


  lcd = Lcd_create(ports, pins, GPIOA, LCD_RS_Pin, GPIOA, LCD_EN_Pin, LCD_4_BIT_MODE);
 800148c:	4cb7      	ldr	r4, [pc, #732]	@ (800176c <main+0x314>)
 800148e:	f107 0020 	add.w	r0, r7, #32
 8001492:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001496:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800149a:	2300      	movs	r3, #0
 800149c:	9303      	str	r3, [sp, #12]
 800149e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	4bb2      	ldr	r3, [pc, #712]	@ (8001770 <main+0x318>)
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	4bb0      	ldr	r3, [pc, #704]	@ (8001770 <main+0x318>)
 80014b0:	f7ff fd3a 	bl	8000f28 <Lcd_create>
 80014b4:	4625      	mov	r5, r4
 80014b6:	f107 0420 	add.w	r4, r7, #32
 80014ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c2:	e885 0003 	stmia.w	r5, {r0, r1}

  // Lcd_string(&lcd, "Hello World");
  
  Lcd_cursor(&lcd, 1,0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2101      	movs	r1, #1
 80014ca:	48a8      	ldr	r0, [pc, #672]	@ (800176c <main+0x314>)
 80014cc:	f7ff fdb8 	bl	8001040 <Lcd_cursor>
  // const char* hello = "Hello World\0";


  // HAL_UART_Transmit(&huart2, hello, sizeof(hello), 32767);

  htmc = TMC2209_create(&huart2, SERIAL_ADDRESS_0); // Assuming SERIAL_ADDRESS_0 is the desired address
 80014d0:	4ca8      	ldr	r4, [pc, #672]	@ (8001774 <main+0x31c>)
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	49a8      	ldr	r1, [pc, #672]	@ (8001778 <main+0x320>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f939 	bl	8000750 <TMC2209_create>
 80014de:	4625      	mov	r5, r4
 80014e0:	463c      	mov	r4, r7
 80014e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  TMC2209_init(&htmc);
 80014ee:	48a1      	ldr	r0, [pc, #644]	@ (8001774 <main+0x31c>)
 80014f0:	f7ff fbf4 	bl	8000cdc <TMC2209_init>

  
  // TMC2209_setStallGuardThreshold(&htmc, 20);
  
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80014f4:	213c      	movs	r1, #60	@ 0x3c
 80014f6:	48a1      	ldr	r0, [pc, #644]	@ (800177c <main+0x324>)
 80014f8:	f001 fc8e 	bl	8002e18 <HAL_TIM_Encoder_Start>

  TMC2209_disable(&htmc);
 80014fc:	489d      	ldr	r0, [pc, #628]	@ (8001774 <main+0x31c>)
 80014fe:	f7ff f966 	bl	80007ce <TMC2209_disable>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t accel = 100;
 8001502:	2364      	movs	r3, #100	@ 0x64
 8001504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t distance = 100;
 8001508:	2364      	movs	r3, #100	@ 0x64
 800150a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  float speed = 5000;
 800150e:	4b9c      	ldr	r3, [pc, #624]	@ (8001780 <main+0x328>)
 8001510:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  bool stealthchop = false;
 8001514:	2300      	movs	r3, #0
 8001516:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

  bool run = false;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
  int current = 100;
 8001520:	2364      	movs	r3, #100	@ 0x64
 8001522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  bool last_changed;

  // Menu items
  const char* menuItems[] = {
 8001526:	4b97      	ldr	r3, [pc, #604]	@ (8001784 <main+0x32c>)
 8001528:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800152c:	461d      	mov	r5, r3
 800152e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001532:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001536:	e884 0003 	stmia.w	r4, {r0, r1}
    "speed",
    "stealthchop",
    "current",
    "start"
  };
  const int numMenuItems = sizeof(menuItems) / sizeof(menuItems[0]);
 800153a:	2306      	movs	r3, #6
 800153c:	677b      	str	r3, [r7, #116]	@ 0x74

  int selectedMenuItem = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t encoderValue = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t initialEncoderValue = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  bool adjustingParameter = false;
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

  while (1)
  {
    if (run)
 8001556:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 800155a:	2b00      	cmp	r3, #0
 800155c:	d047      	beq.n	80015ee <main+0x196>
    {
      Lcd_clear(&lcd);
 800155e:	4883      	ldr	r0, [pc, #524]	@ (800176c <main+0x314>)
 8001560:	f7ff fd88 	bl	8001074 <Lcd_clear>
      Lcd_cursor(&lcd, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	4880      	ldr	r0, [pc, #512]	@ (800176c <main+0x314>)
 800156a:	f7ff fd69 	bl	8001040 <Lcd_cursor>
      Lcd_string(&lcd, "RUNNING...");
 800156e:	4986      	ldr	r1, [pc, #536]	@ (8001788 <main+0x330>)
 8001570:	487e      	ldr	r0, [pc, #504]	@ (800176c <main+0x314>)
 8001572:	f7ff fd45 	bl	8001000 <Lcd_string>
      TMC2209_enable(&htmc);
 8001576:	487f      	ldr	r0, [pc, #508]	@ (8001774 <main+0x31c>)
 8001578:	f7ff f914 	bl	80007a4 <TMC2209_enable>
      if (stealthchop)
 800157c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <main+0x134>
      {
        TMC2209_enableStealthChop(&htmc);
 8001584:	487b      	ldr	r0, [pc, #492]	@ (8001774 <main+0x31c>)
 8001586:	f7ff f97d 	bl	8000884 <TMC2209_enableStealthChop>
 800158a:	e002      	b.n	8001592 <main+0x13a>
      }
      else
      {
        TMC2209_disableStealthChop(&htmc);
 800158c:	4879      	ldr	r0, [pc, #484]	@ (8001774 <main+0x31c>)
 800158e:	f7ff f989 	bl	80008a4 <TMC2209_disableStealthChop>
      }
      HAL_Delay(200);
 8001592:	20c8      	movs	r0, #200	@ 0xc8
 8001594:	f000 fcd2 	bl	8001f3c <HAL_Delay>
      TMC2209_setRunCurrent(&htmc, current);
 8001598:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	4874      	ldr	r0, [pc, #464]	@ (8001774 <main+0x31c>)
 80015a2:	f7ff f924 	bl	80007ee <TMC2209_setRunCurrent>
      HAL_Delay(200);
 80015a6:	20c8      	movs	r0, #200	@ 0xc8
 80015a8:	f000 fcc8 	bl	8001f3c <HAL_Delay>

      handle_motor_movement(&htmc, accel, distance, speed);
 80015ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015b0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80015b4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80015b8:	486e      	ldr	r0, [pc, #440]	@ (8001774 <main+0x31c>)
 80015ba:	f7ff fe03 	bl	80011c4 <handle_motor_movement>

      TMC2209_moveAtVelocity(&htmc, 0);
 80015be:	2100      	movs	r1, #0
 80015c0:	486c      	ldr	r0, [pc, #432]	@ (8001774 <main+0x31c>)
 80015c2:	f7ff f950 	bl	8000866 <TMC2209_moveAtVelocity>
      TMC2209_setRunCurrent(&htmc, 10);
 80015c6:	210a      	movs	r1, #10
 80015c8:	486a      	ldr	r0, [pc, #424]	@ (8001774 <main+0x31c>)
 80015ca:	f7ff f910 	bl	80007ee <TMC2209_setRunCurrent>
      TMC2209_disable(&htmc);
 80015ce:	4869      	ldr	r0, [pc, #420]	@ (8001774 <main+0x31c>)
 80015d0:	f7ff f8fd 	bl	80007ce <TMC2209_disable>
      run = false;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
      while (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)); // Wait for button release
 80015da:	bf00      	nop
 80015dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015e0:	486a      	ldr	r0, [pc, #424]	@ (800178c <main+0x334>)
 80015e2:	f000 ff37 	bl	8002454 <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f7      	beq.n	80015dc <main+0x184>
 80015ec:	e7b3      	b.n	8001556 <main+0xfe>
    }
    else
    {
      if (!adjustingParameter)
 80015ee:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80015f2:	f083 0301 	eor.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80e4 	beq.w	80017c6 <main+0x36e>
      {
        // Menu navigation
        encoderValue = (TIM2->CNT) >> 2;
 80015fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        int menuIndex = (encoderValue - initialEncoderValue) % numMenuItems;
 800160a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800160e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001616:	fbb3 f1f2 	udiv	r1, r3, r2
 800161a:	fb01 f202 	mul.w	r2, r1, r2
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (menuIndex < 0) menuIndex += numMenuItems;
 8001622:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001624:	2b00      	cmp	r3, #0
 8001626:	da03      	bge.n	8001630 <main+0x1d8>
 8001628:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800162a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800162c:	4413      	add	r3, r2
 800162e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        selectedMenuItem = menuIndex;
 8001630:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        // Display menu
        Lcd_clear(&lcd);
 8001636:	484d      	ldr	r0, [pc, #308]	@ (800176c <main+0x314>)
 8001638:	f7ff fd1c 	bl	8001074 <Lcd_clear>
        Lcd_cursor(&lcd, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	484a      	ldr	r0, [pc, #296]	@ (800176c <main+0x314>)
 8001642:	f7ff fcfd 	bl	8001040 <Lcd_cursor>
        Lcd_string(&lcd, ">");
 8001646:	4952      	ldr	r1, [pc, #328]	@ (8001790 <main+0x338>)
 8001648:	4848      	ldr	r0, [pc, #288]	@ (800176c <main+0x314>)
 800164a:	f7ff fcd9 	bl	8001000 <Lcd_string>

        for (int i = 0; i < 2; i++) // Display only two items at a time
 800164e:	2300      	movs	r3, #0
 8001650:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001652:	e069      	b.n	8001728 <main+0x2d0>
        {
          int itemIndex = (selectedMenuItem + i) % numMenuItems;
 8001654:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001658:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800165a:	4413      	add	r3, r2
 800165c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800165e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001662:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001664:	fb01 f202 	mul.w	r2, r1, r2
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	66fb      	str	r3, [r7, #108]	@ 0x6c
          Lcd_cursor(&lcd, i, 1);
 800166c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2201      	movs	r2, #1
 8001672:	4619      	mov	r1, r3
 8001674:	483d      	ldr	r0, [pc, #244]	@ (800176c <main+0x314>)
 8001676:	f7ff fce3 	bl	8001040 <Lcd_cursor>
          Lcd_string(&lcd, menuItems[itemIndex]);
 800167a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	33a8      	adds	r3, #168	@ 0xa8
 8001680:	443b      	add	r3, r7
 8001682:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8001686:	4619      	mov	r1, r3
 8001688:	4838      	ldr	r0, [pc, #224]	@ (800176c <main+0x314>)
 800168a:	f7ff fcb9 	bl	8001000 <Lcd_string>
          Lcd_cursor(&lcd, i, 10); // Display values on the right side
 800168e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001690:	b2db      	uxtb	r3, r3
 8001692:	220a      	movs	r2, #10
 8001694:	4619      	mov	r1, r3
 8001696:	4835      	ldr	r0, [pc, #212]	@ (800176c <main+0x314>)
 8001698:	f7ff fcd2 	bl	8001040 <Lcd_cursor>
          switch (itemIndex)
 800169c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d83f      	bhi.n	8001722 <main+0x2ca>
 80016a2:	a201      	add	r2, pc, #4	@ (adr r2, 80016a8 <main+0x250>)
 80016a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a8:	080016c1 	.word	0x080016c1
 80016ac:	080016cf 	.word	0x080016cf
 80016b0:	080016dd 	.word	0x080016dd
 80016b4:	080016f1 	.word	0x080016f1
 80016b8:	0800170d 	.word	0x0800170d
 80016bc:	08001719 	.word	0x08001719
          {
            case 0: // accel
              Lcd_int(&lcd, accel);
 80016c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4829      	ldr	r0, [pc, #164]	@ (800176c <main+0x314>)
 80016c8:	f7ff fc82 	bl	8000fd0 <Lcd_int>
              break;
 80016cc:	e029      	b.n	8001722 <main+0x2ca>
            case 1: // distance
              Lcd_int(&lcd, distance);
 80016ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80016d2:	4619      	mov	r1, r3
 80016d4:	4825      	ldr	r0, [pc, #148]	@ (800176c <main+0x314>)
 80016d6:	f7ff fc7b 	bl	8000fd0 <Lcd_int>
              break;
 80016da:	e022      	b.n	8001722 <main+0x2ca>
            case 2: // speed
              Lcd_int(&lcd, speed);
 80016dc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80016e0:	f7ff f810 	bl	8000704 <__aeabi_f2iz>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4619      	mov	r1, r3
 80016e8:	4820      	ldr	r0, [pc, #128]	@ (800176c <main+0x314>)
 80016ea:	f7ff fc71 	bl	8000fd0 <Lcd_int>
              break;
 80016ee:	e018      	b.n	8001722 <main+0x2ca>
            case 3: // stealthchop
              if (stealthchop)
 80016f0:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <main+0x2aa>
              {
                Lcd_string(&lcd, "true");
 80016f8:	4926      	ldr	r1, [pc, #152]	@ (8001794 <main+0x33c>)
 80016fa:	481c      	ldr	r0, [pc, #112]	@ (800176c <main+0x314>)
 80016fc:	f7ff fc80 	bl	8001000 <Lcd_string>
              }
              else
              Lcd_string(&lcd, "false");
              break;
 8001700:	e00f      	b.n	8001722 <main+0x2ca>
              Lcd_string(&lcd, "false");
 8001702:	4925      	ldr	r1, [pc, #148]	@ (8001798 <main+0x340>)
 8001704:	4819      	ldr	r0, [pc, #100]	@ (800176c <main+0x314>)
 8001706:	f7ff fc7b 	bl	8001000 <Lcd_string>
              break;
 800170a:	e00a      	b.n	8001722 <main+0x2ca>
            case 4: // current
              Lcd_int(&lcd, current);
 800170c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8001710:	4816      	ldr	r0, [pc, #88]	@ (800176c <main+0x314>)
 8001712:	f7ff fc5d 	bl	8000fd0 <Lcd_int>
              break;
 8001716:	e004      	b.n	8001722 <main+0x2ca>
            case 5: // start
              Lcd_string(&lcd, "");
 8001718:	4920      	ldr	r1, [pc, #128]	@ (800179c <main+0x344>)
 800171a:	4814      	ldr	r0, [pc, #80]	@ (800176c <main+0x314>)
 800171c:	f7ff fc70 	bl	8001000 <Lcd_string>
              break;
 8001720:	bf00      	nop
        for (int i = 0; i < 2; i++) // Display only two items at a time
 8001722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001724:	3301      	adds	r3, #1
 8001726:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800172a:	2b01      	cmp	r3, #1
 800172c:	dd92      	ble.n	8001654 <main+0x1fc>
          }
        }

        // Select item
        if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin))
 800172e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001732:	4816      	ldr	r0, [pc, #88]	@ (800178c <main+0x334>)
 8001734:	f000 fe8e 	bl	8002454 <HAL_GPIO_ReadPin>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 8160 	bne.w	8001a00 <main+0x5a8>
        {
          HAL_Delay(100); // Debounce
 8001740:	2064      	movs	r0, #100	@ 0x64
 8001742:	f000 fbfb 	bl	8001f3c <HAL_Delay>
          if (selectedMenuItem == numMenuItems - 1) // Start selected
 8001746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001748:	3b01      	subs	r3, #1
 800174a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800174e:	429a      	cmp	r2, r3
 8001750:	d126      	bne.n	80017a0 <main+0x348>
          {
            HAL_Delay(500); // Delay before starting
 8001752:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001756:	f000 fbf1 	bl	8001f3c <HAL_Delay>
            run = true;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
 8001760:	e027      	b.n	80017b2 <main+0x35a>
 8001762:	bf00      	nop
 8001764:	08003f04 	.word	0x08003f04
 8001768:	08003f14 	.word	0x08003f14
 800176c:	20000098 	.word	0x20000098
 8001770:	40010800 	.word	0x40010800
 8001774:	20000078 	.word	0x20000078
 8001778:	200000fc 	.word	0x200000fc
 800177c:	200000b4 	.word	0x200000b4
 8001780:	459c4000 	.word	0x459c4000
 8001784:	08003f54 	.word	0x08003f54
 8001788:	08003ed8 	.word	0x08003ed8
 800178c:	40011000 	.word	0x40011000
 8001790:	08003ee4 	.word	0x08003ee4
 8001794:	08003ee8 	.word	0x08003ee8
 8001798:	08003ef0 	.word	0x08003ef0
 800179c:	08003ef8 	.word	0x08003ef8
          }
          else
          {
            adjustingParameter = true;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
            initialEncoderValue = (TIM2->CNT) >> 2; // Store initial value for adjustment
 80017a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          }
          while (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)); // Wait for button release
 80017b2:	bf00      	nop
 80017b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017b8:	48a5      	ldr	r0, [pc, #660]	@ (8001a50 <main+0x5f8>)
 80017ba:	f000 fe4b 	bl	8002454 <HAL_GPIO_ReadPin>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f7      	beq.n	80017b4 <main+0x35c>
 80017c4:	e11c      	b.n	8001a00 <main+0x5a8>
        }
      }
      else // Adjusting parameter
      {
        encoderValue = (TIM2->CNT) >> 2;
 80017c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        int diff = encoderValue - initialEncoderValue;
 80017d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80017d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	673b      	str	r3, [r7, #112]	@ 0x70

        Lcd_clear(&lcd);
 80017de:	489d      	ldr	r0, [pc, #628]	@ (8001a54 <main+0x5fc>)
 80017e0:	f7ff fc48 	bl	8001074 <Lcd_clear>
        Lcd_cursor(&lcd, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	489a      	ldr	r0, [pc, #616]	@ (8001a54 <main+0x5fc>)
 80017ea:	f7ff fc29 	bl	8001040 <Lcd_cursor>
        Lcd_string(&lcd, menuItems[selectedMenuItem]);
 80017ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	33a8      	adds	r3, #168	@ 0xa8
 80017f6:	443b      	add	r3, r7
 80017f8:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80017fc:	4619      	mov	r1, r3
 80017fe:	4895      	ldr	r0, [pc, #596]	@ (8001a54 <main+0x5fc>)
 8001800:	f7ff fbfe 	bl	8001000 <Lcd_string>
        Lcd_cursor(&lcd, 1, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2101      	movs	r1, #1
 8001808:	4892      	ldr	r0, [pc, #584]	@ (8001a54 <main+0x5fc>)
 800180a:	f7ff fc19 	bl	8001040 <Lcd_cursor>
        Lcd_string(&lcd, "Adjust:");
 800180e:	4992      	ldr	r1, [pc, #584]	@ (8001a58 <main+0x600>)
 8001810:	4890      	ldr	r0, [pc, #576]	@ (8001a54 <main+0x5fc>)
 8001812:	f7ff fbf5 	bl	8001000 <Lcd_string>

        switch (selectedMenuItem)
 8001816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800181a:	2b04      	cmp	r3, #4
 800181c:	f200 80cf 	bhi.w	80019be <main+0x566>
 8001820:	a201      	add	r2, pc, #4	@ (adr r2, 8001828 <main+0x3d0>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	0800183d 	.word	0x0800183d
 800182c:	0800187d 	.word	0x0800187d
 8001830:	080018bd 	.word	0x080018bd
 8001834:	08001929 	.word	0x08001929
 8001838:	08001981 	.word	0x08001981
        {
          case 0: // accel
            accel += diff;
 800183c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800183e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001842:	4413      	add	r3, r2
 8001844:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            if (accel < 1) accel = 1;
 8001848:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <main+0x3fe>
 8001850:	2301      	movs	r3, #1
 8001852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            if (accel > 200) accel = 200;
 8001856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800185a:	2bc8      	cmp	r3, #200	@ 0xc8
 800185c:	d902      	bls.n	8001864 <main+0x40c>
 800185e:	23c8      	movs	r3, #200	@ 0xc8
 8001860:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            Lcd_cursor(&lcd, 1, 10);
 8001864:	220a      	movs	r2, #10
 8001866:	2101      	movs	r1, #1
 8001868:	487a      	ldr	r0, [pc, #488]	@ (8001a54 <main+0x5fc>)
 800186a:	f7ff fbe9 	bl	8001040 <Lcd_cursor>
            Lcd_int(&lcd, accel);
 800186e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001872:	4619      	mov	r1, r3
 8001874:	4877      	ldr	r0, [pc, #476]	@ (8001a54 <main+0x5fc>)
 8001876:	f7ff fbab 	bl	8000fd0 <Lcd_int>
            break;
 800187a:	e0a0      	b.n	80019be <main+0x566>
          case 1: // distance
            distance += diff;
 800187c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800187e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001882:	4413      	add	r3, r2
 8001884:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            if (distance < 10) distance = 10;
 8001888:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800188c:	2b09      	cmp	r3, #9
 800188e:	d802      	bhi.n	8001896 <main+0x43e>
 8001890:	230a      	movs	r3, #10
 8001892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            if (distance > 200) distance = 200;
 8001896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800189a:	2bc8      	cmp	r3, #200	@ 0xc8
 800189c:	d902      	bls.n	80018a4 <main+0x44c>
 800189e:	23c8      	movs	r3, #200	@ 0xc8
 80018a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            Lcd_cursor(&lcd, 1, 10);
 80018a4:	220a      	movs	r2, #10
 80018a6:	2101      	movs	r1, #1
 80018a8:	486a      	ldr	r0, [pc, #424]	@ (8001a54 <main+0x5fc>)
 80018aa:	f7ff fbc9 	bl	8001040 <Lcd_cursor>
            Lcd_int(&lcd, distance);
 80018ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018b2:	4619      	mov	r1, r3
 80018b4:	4867      	ldr	r0, [pc, #412]	@ (8001a54 <main+0x5fc>)
 80018b6:	f7ff fb8b 	bl	8000fd0 <Lcd_int>
            break;
 80018ba:	e080      	b.n	80019be <main+0x566>
          case 2: // speed
            speed += diff * 10; // Adjust speed in larger steps
 80018bc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fd02 	bl	80002d0 <__aeabi_i2f>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4619      	mov	r1, r3
 80018d0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80018d4:	f7fe fc48 	bl	8000168 <__addsf3>
 80018d8:	4603      	mov	r3, r0
 80018da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            if (speed < 100) speed = 100;
 80018de:	495f      	ldr	r1, [pc, #380]	@ (8001a5c <main+0x604>)
 80018e0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80018e4:	f7fe fee6 	bl	80006b4 <__aeabi_fcmplt>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <main+0x49c>
 80018ee:	4b5b      	ldr	r3, [pc, #364]	@ (8001a5c <main+0x604>)
 80018f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            if (speed > 10000) speed = 10000;
 80018f4:	495a      	ldr	r1, [pc, #360]	@ (8001a60 <main+0x608>)
 80018f6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80018fa:	f7fe fef9 	bl	80006f0 <__aeabi_fcmpgt>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <main+0x4b2>
 8001904:	4b56      	ldr	r3, [pc, #344]	@ (8001a60 <main+0x608>)
 8001906:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            Lcd_cursor(&lcd, 1, 10);
 800190a:	220a      	movs	r2, #10
 800190c:	2101      	movs	r1, #1
 800190e:	4851      	ldr	r0, [pc, #324]	@ (8001a54 <main+0x5fc>)
 8001910:	f7ff fb96 	bl	8001040 <Lcd_cursor>
            Lcd_int(&lcd, speed);
 8001914:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001918:	f7fe fef4 	bl	8000704 <__aeabi_f2iz>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	484c      	ldr	r0, [pc, #304]	@ (8001a54 <main+0x5fc>)
 8001922:	f7ff fb55 	bl	8000fd0 <Lcd_int>
            break;
 8001926:	e04a      	b.n	80019be <main+0x566>
          case 3: // stealthchop
            if (diff != 0) // Toggle on any encoder movement
 8001928:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800192a:	2b00      	cmp	r3, #0
 800192c:	d015      	beq.n	800195a <main+0x502>
            {
              stealthchop = !stealthchop;
 800192e:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf14      	ite	ne
 8001936:	2301      	movne	r3, #1
 8001938:	2300      	moveq	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f083 0301 	eor.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 8001946:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
              initialEncoderValue = encoderValue; // Reset initial value after toggle
 8001952:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001956:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            }
            Lcd_cursor(&lcd, 1, 10);
 800195a:	220a      	movs	r2, #10
 800195c:	2101      	movs	r1, #1
 800195e:	483d      	ldr	r0, [pc, #244]	@ (8001a54 <main+0x5fc>)
 8001960:	f7ff fb6e 	bl	8001040 <Lcd_cursor>
            if (stealthchop)
 8001964:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <main+0x51e>
            {
              Lcd_string(&lcd, "true");
 800196c:	493d      	ldr	r1, [pc, #244]	@ (8001a64 <main+0x60c>)
 800196e:	4839      	ldr	r0, [pc, #228]	@ (8001a54 <main+0x5fc>)
 8001970:	f7ff fb46 	bl	8001000 <Lcd_string>
            }
            else
            {
              Lcd_string(&lcd, "false");
            }
            break;
 8001974:	e023      	b.n	80019be <main+0x566>
              Lcd_string(&lcd, "false");
 8001976:	493c      	ldr	r1, [pc, #240]	@ (8001a68 <main+0x610>)
 8001978:	4836      	ldr	r0, [pc, #216]	@ (8001a54 <main+0x5fc>)
 800197a:	f7ff fb41 	bl	8001000 <Lcd_string>
            break;
 800197e:	e01e      	b.n	80019be <main+0x566>
          case 4: // current
            current += diff;
 8001980:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001984:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001986:	4413      	add	r3, r2
 8001988:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            if (current < 2) current = 2;
 800198c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001990:	2b01      	cmp	r3, #1
 8001992:	dc02      	bgt.n	800199a <main+0x542>
 8001994:	2302      	movs	r3, #2
 8001996:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            if (current > 100) current = 100;
 800199a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800199e:	2b64      	cmp	r3, #100	@ 0x64
 80019a0:	dd02      	ble.n	80019a8 <main+0x550>
 80019a2:	2364      	movs	r3, #100	@ 0x64
 80019a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            Lcd_cursor(&lcd, 1, 10);
 80019a8:	220a      	movs	r2, #10
 80019aa:	2101      	movs	r1, #1
 80019ac:	4829      	ldr	r0, [pc, #164]	@ (8001a54 <main+0x5fc>)
 80019ae:	f7ff fb47 	bl	8001040 <Lcd_cursor>
            Lcd_int(&lcd, current);
 80019b2:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80019b6:	4827      	ldr	r0, [pc, #156]	@ (8001a54 <main+0x5fc>)
 80019b8:	f7ff fb0a 	bl	8000fd0 <Lcd_int>
            break;
 80019bc:	bf00      	nop
        }

        initialEncoderValue = encoderValue; // Update initial value for continuous adjustment
 80019be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

        // Exit adjustment
        if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin))
 80019c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ca:	4821      	ldr	r0, [pc, #132]	@ (8001a50 <main+0x5f8>)
 80019cc:	f000 fd42 	bl	8002454 <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d114      	bne.n	8001a00 <main+0x5a8>
        {
          HAL_Delay(100); // Debounce
 80019d6:	2064      	movs	r0, #100	@ 0x64
 80019d8:	f000 fab0 	bl	8001f3c <HAL_Delay>
          adjustingParameter = false;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
          initialEncoderValue = (TIM2->CNT) >> 2; // Store initial value for menu navigation
 80019e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          while (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)); // Wait for button release
 80019ee:	bf00      	nop
 80019f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019f4:	4816      	ldr	r0, [pc, #88]	@ (8001a50 <main+0x5f8>)
 80019f6:	f000 fd2d 	bl	8002454 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f7      	beq.n	80019f0 <main+0x598>
        }
      }
      if (!last_changed)
 8001a00:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001a04:	f083 0301 	eor.w	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d013      	beq.n	8001a36 <main+0x5de>
      {
        // last_changed = !((TIM2->CNT) >> 2 == encoderValue && (HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)));
        while ((TIM2->CNT) >> 2 == encoderValue && (HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)))
 8001a0e:	e002      	b.n	8001a16 <main+0x5be>
        {
          /* code */
          HAL_Delay(10); // Reduced delay for smoother menu scrolling
 8001a10:	200a      	movs	r0, #10
 8001a12:	f000 fa93 	bl	8001f3c <HAL_Delay>
        while ((TIM2->CNT) >> 2 == encoderValue && (HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)))
 8001a16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d107      	bne.n	8001a36 <main+0x5de>
 8001a26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a2a:	4809      	ldr	r0, [pc, #36]	@ (8001a50 <main+0x5f8>)
 8001a2c:	f000 fd12 	bl	8002454 <HAL_GPIO_ReadPin>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ec      	bne.n	8001a10 <main+0x5b8>
        }
      }
      last_changed = !((HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)));
 8001a36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a3a:	4805      	ldr	r0, [pc, #20]	@ (8001a50 <main+0x5f8>)
 8001a3c:	f000 fd0a 	bl	8002454 <HAL_GPIO_ReadPin>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    if (run)
 8001a4e:	e582      	b.n	8001556 <main+0xfe>
 8001a50:	40011000 	.word	0x40011000
 8001a54:	20000098 	.word	0x20000098
 8001a58:	08003efc 	.word	0x08003efc
 8001a5c:	42c80000 	.word	0x42c80000
 8001a60:	461c4000 	.word	0x461c4000
 8001a64:	08003ee8 	.word	0x08003ee8
 8001a68:	08003ef0 	.word	0x08003ef0

08001a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b090      	sub	sp, #64	@ 0x40
 8001a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a72:	f107 0318 	add.w	r3, r7, #24
 8001a76:	2228      	movs	r2, #40	@ 0x28
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 fd90 	bl	80035a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a92:	2301      	movs	r3, #1
 8001a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a96:	2310      	movs	r3, #16
 8001a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9e:	f107 0318 	add.w	r3, r7, #24
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fd06 	bl	80024b4 <HAL_RCC_OscConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001aae:	f000 f818 	bl	8001ae2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 ff74 	bl	80029b8 <HAL_RCC_ClockConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001ad6:	f000 f804 	bl	8001ae2 <Error_Handler>
  }
}
 8001ada:	bf00      	nop
 8001adc:	3740      	adds	r7, #64	@ 0x40
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae6:	b672      	cpsid	i
}
 8001ae8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aea:	bf00      	nop
 8001aec:	e7fd      	b.n	8001aea <Error_Handler+0x8>
	...

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_MspInit+0x5c>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	4a14      	ldr	r2, [pc, #80]	@ (8001b4c <HAL_MspInit+0x5c>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6193      	str	r3, [r2, #24]
 8001b02:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <HAL_MspInit+0x5c>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <HAL_MspInit+0x5c>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_MspInit+0x5c>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <HAL_MspInit+0x5c>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_MspInit+0x60>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <HAL_MspInit+0x60>)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <NMI_Handler+0x4>

08001b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 f9ae 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb4:	4a14      	ldr	r2, [pc, #80]	@ (8001c08 <_sbrk+0x5c>)
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <_sbrk+0x60>)
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <_sbrk+0x64>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	@ (8001c14 <_sbrk+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d207      	bcs.n	8001bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bdc:	f001 fce8 	bl	80035b0 <__errno>
 8001be0:	4603      	mov	r3, r0
 8001be2:	220c      	movs	r2, #12
 8001be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bea:	e009      	b.n	8001c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <_sbrk+0x64>)
 8001bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20005000 	.word	0x20005000
 8001c0c:	00000400 	.word	0x00000400
 8001c10:	200000b0 	.word	0x200000b0
 8001c14:	20000290 	.word	0x20000290

08001c18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	@ 0x30
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2224      	movs	r2, #36	@ 0x24
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f001 fcb4 	bl	80035a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c40:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c62:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c64:	2280      	movs	r2, #128	@ 0x80
 8001c66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV8;
 8001c74:	230c      	movs	r3, #12
 8001c76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c78:	230a      	movs	r3, #10
 8001c7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c80:	2301      	movs	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV8;
 8001c84:	230c      	movs	r3, #12
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001c88:	230a      	movs	r3, #10
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4619      	mov	r1, r3
 8001c92:	480d      	ldr	r0, [pc, #52]	@ (8001cc8 <MX_TIM2_Init+0xa4>)
 8001c94:	f001 f81e 	bl	8002cd4 <HAL_TIM_Encoder_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c9e:	f7ff ff20 	bl	8001ae2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	@ (8001cc8 <MX_TIM2_Init+0xa4>)
 8001cb0:	f001 f9d2 	bl	8003058 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001cba:	f7ff ff12 	bl	8001ae2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	@ 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200000b4 	.word	0x200000b4

08001ccc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cea:	d123      	bne.n	8001d34 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cec:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <HAL_TIM_Encoder_MspInit+0x70>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	4a12      	ldr	r2, [pc, #72]	@ (8001d3c <HAL_TIM_Encoder_MspInit+0x70>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	61d3      	str	r3, [r2, #28]
 8001cf8:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <HAL_TIM_Encoder_MspInit+0x70>)
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b0d      	ldr	r3, [pc, #52]	@ (8001d3c <HAL_TIM_Encoder_MspInit+0x70>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a0c      	ldr	r2, [pc, #48]	@ (8001d3c <HAL_TIM_Encoder_MspInit+0x70>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_TIM_Encoder_MspInit+0x70>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4804      	ldr	r0, [pc, #16]	@ (8001d40 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d30:	f000 fa0c 	bl	800214c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d34:	bf00      	nop
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010800 	.word	0x40010800

08001d44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <MX_USART2_UART_Init+0x50>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d7c:	f001 f9ca 	bl	8003114 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d86:	f7ff feac 	bl	8001ae2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200000fc 	.word	0x200000fc
 8001d94:	40004400 	.word	0x40004400

08001d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e20 <HAL_UART_MspInit+0x88>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d12f      	bne.n	8001e18 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	@ (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc2:	61d3      	str	r3, [r2, #28]
 8001dc4:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a13      	ldr	r2, [pc, #76]	@ (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de8:	2304      	movs	r3, #4
 8001dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480b      	ldr	r0, [pc, #44]	@ (8001e28 <HAL_UART_MspInit+0x90>)
 8001dfc:	f000 f9a6 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e00:	2308      	movs	r3, #8
 8001e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4619      	mov	r1, r3
 8001e12:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <HAL_UART_MspInit+0x90>)
 8001e14:	f000 f99a 	bl	800214c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40004400 	.word	0x40004400
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010800 	.word	0x40010800

08001e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e2c:	f7ff fef4 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e30:	480b      	ldr	r0, [pc, #44]	@ (8001e60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e32:	490c      	ldr	r1, [pc, #48]	@ (8001e64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e34:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a09      	ldr	r2, [pc, #36]	@ (8001e6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e48:	4c09      	ldr	r4, [pc, #36]	@ (8001e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e56:	f001 fbb1 	bl	80035bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e5a:	f7ff fafd 	bl	8001458 <main>
  bx lr
 8001e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e68:	08003fe0 	.word	0x08003fe0
  ldr r2, =_sbss
 8001e6c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e70:	20000290 	.word	0x20000290

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <HAL_Init+0x28>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a07      	ldr	r2, [pc, #28]	@ (8001ea0 <HAL_Init+0x28>)
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 f92b 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8e:	200f      	movs	r0, #15
 8001e90:	f000 f808 	bl	8001ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e94:	f7ff fe2c 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40022000 	.word	0x40022000

08001ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_InitTick+0x54>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <HAL_InitTick+0x58>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f935 	bl	8002132 <HAL_SYSTICK_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00e      	b.n	8001ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d80a      	bhi.n	8001eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ee0:	f000 f90b 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee4:	4a06      	ldr	r2, [pc, #24]	@ (8001f00 <HAL_InitTick+0x5c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000008 	.word	0x20000008
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_IncTick+0x1c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <HAL_IncTick+0x20>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a03      	ldr	r2, [pc, #12]	@ (8001f24 <HAL_IncTick+0x20>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	20000008 	.word	0x20000008
 8001f24:	20000144 	.word	0x20000144

08001f28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b02      	ldr	r3, [pc, #8]	@ (8001f38 <HAL_GetTick+0x10>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000144 	.word	0x20000144

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff fff0 	bl	8001f28 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffe0 	bl	8001f28 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db0a      	blt.n	8002012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	490c      	ldr	r1, [pc, #48]	@ (8002034 <__NVIC_SetPriority+0x4c>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	440b      	add	r3, r1
 800200c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002010:	e00a      	b.n	8002028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4908      	ldr	r1, [pc, #32]	@ (8002038 <__NVIC_SetPriority+0x50>)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3b04      	subs	r3, #4
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	440b      	add	r3, r1
 8002026:	761a      	strb	r2, [r3, #24]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	@ 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f1c3 0307 	rsb	r3, r3, #7
 8002056:	2b04      	cmp	r3, #4
 8002058:	bf28      	it	cs
 800205a:	2304      	movcs	r3, #4
 800205c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3304      	adds	r3, #4
 8002062:	2b06      	cmp	r3, #6
 8002064:	d902      	bls.n	800206c <NVIC_EncodePriority+0x30>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3b03      	subs	r3, #3
 800206a:	e000      	b.n	800206e <NVIC_EncodePriority+0x32>
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002084:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	43d9      	mvns	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	4313      	orrs	r3, r2
         );
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	@ 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020c4:	f7ff ff90 	bl	8001fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff49 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210c:	f7ff ff5e 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 8002110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff90 	bl	800203c <NVIC_EncodePriority>
 800211c:	4602      	mov	r2, r0
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff5f 	bl	8001fe8 <__NVIC_SetPriority>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ffb0 	bl	80020a0 <SysTick_Config>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b08b      	sub	sp, #44	@ 0x2c
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215e:	e169      	b.n	8002434 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002160:	2201      	movs	r2, #1
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	429a      	cmp	r2, r3
 800217a:	f040 8158 	bne.w	800242e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4a9a      	ldr	r2, [pc, #616]	@ (80023ec <HAL_GPIO_Init+0x2a0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d05e      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 8002188:	4a98      	ldr	r2, [pc, #608]	@ (80023ec <HAL_GPIO_Init+0x2a0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d875      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 800218e:	4a98      	ldr	r2, [pc, #608]	@ (80023f0 <HAL_GPIO_Init+0x2a4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d058      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 8002194:	4a96      	ldr	r2, [pc, #600]	@ (80023f0 <HAL_GPIO_Init+0x2a4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d86f      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 800219a:	4a96      	ldr	r2, [pc, #600]	@ (80023f4 <HAL_GPIO_Init+0x2a8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d052      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 80021a0:	4a94      	ldr	r2, [pc, #592]	@ (80023f4 <HAL_GPIO_Init+0x2a8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d869      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021a6:	4a94      	ldr	r2, [pc, #592]	@ (80023f8 <HAL_GPIO_Init+0x2ac>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d04c      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 80021ac:	4a92      	ldr	r2, [pc, #584]	@ (80023f8 <HAL_GPIO_Init+0x2ac>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d863      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021b2:	4a92      	ldr	r2, [pc, #584]	@ (80023fc <HAL_GPIO_Init+0x2b0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d046      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 80021b8:	4a90      	ldr	r2, [pc, #576]	@ (80023fc <HAL_GPIO_Init+0x2b0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d85d      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021be:	2b12      	cmp	r3, #18
 80021c0:	d82a      	bhi.n	8002218 <HAL_GPIO_Init+0xcc>
 80021c2:	2b12      	cmp	r3, #18
 80021c4:	d859      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021c6:	a201      	add	r2, pc, #4	@ (adr r2, 80021cc <HAL_GPIO_Init+0x80>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	08002247 	.word	0x08002247
 80021d0:	08002221 	.word	0x08002221
 80021d4:	08002233 	.word	0x08002233
 80021d8:	08002275 	.word	0x08002275
 80021dc:	0800227b 	.word	0x0800227b
 80021e0:	0800227b 	.word	0x0800227b
 80021e4:	0800227b 	.word	0x0800227b
 80021e8:	0800227b 	.word	0x0800227b
 80021ec:	0800227b 	.word	0x0800227b
 80021f0:	0800227b 	.word	0x0800227b
 80021f4:	0800227b 	.word	0x0800227b
 80021f8:	0800227b 	.word	0x0800227b
 80021fc:	0800227b 	.word	0x0800227b
 8002200:	0800227b 	.word	0x0800227b
 8002204:	0800227b 	.word	0x0800227b
 8002208:	0800227b 	.word	0x0800227b
 800220c:	0800227b 	.word	0x0800227b
 8002210:	08002229 	.word	0x08002229
 8002214:	0800223d 	.word	0x0800223d
 8002218:	4a79      	ldr	r2, [pc, #484]	@ (8002400 <HAL_GPIO_Init+0x2b4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800221e:	e02c      	b.n	800227a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	623b      	str	r3, [r7, #32]
          break;
 8002226:	e029      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	3304      	adds	r3, #4
 800222e:	623b      	str	r3, [r7, #32]
          break;
 8002230:	e024      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	3308      	adds	r3, #8
 8002238:	623b      	str	r3, [r7, #32]
          break;
 800223a:	e01f      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	330c      	adds	r3, #12
 8002242:	623b      	str	r3, [r7, #32]
          break;
 8002244:	e01a      	b.n	800227c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800224e:	2304      	movs	r3, #4
 8002250:	623b      	str	r3, [r7, #32]
          break;
 8002252:	e013      	b.n	800227c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800225c:	2308      	movs	r3, #8
 800225e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	611a      	str	r2, [r3, #16]
          break;
 8002266:	e009      	b.n	800227c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002268:	2308      	movs	r3, #8
 800226a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	615a      	str	r2, [r3, #20]
          break;
 8002272:	e003      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
          break;
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x130>
          break;
 800227a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2bff      	cmp	r3, #255	@ 0xff
 8002280:	d801      	bhi.n	8002286 <HAL_GPIO_Init+0x13a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	e001      	b.n	800228a <HAL_GPIO_Init+0x13e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3304      	adds	r3, #4
 800228a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2bff      	cmp	r3, #255	@ 0xff
 8002290:	d802      	bhi.n	8002298 <HAL_GPIO_Init+0x14c>
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	e002      	b.n	800229e <HAL_GPIO_Init+0x152>
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	3b08      	subs	r3, #8
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	210f      	movs	r1, #15
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	401a      	ands	r2, r3
 80022b0:	6a39      	ldr	r1, [r7, #32]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	431a      	orrs	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80b1 	beq.w	800242e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002404 <HAL_GPIO_Init+0x2b8>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002404 <HAL_GPIO_Init+0x2b8>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002404 <HAL_GPIO_Init+0x2b8>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022e4:	4a48      	ldr	r2, [pc, #288]	@ (8002408 <HAL_GPIO_Init+0x2bc>)
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	3302      	adds	r3, #2
 80022ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220f      	movs	r2, #15
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a40      	ldr	r2, [pc, #256]	@ (800240c <HAL_GPIO_Init+0x2c0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d013      	beq.n	8002338 <HAL_GPIO_Init+0x1ec>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3f      	ldr	r2, [pc, #252]	@ (8002410 <HAL_GPIO_Init+0x2c4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00d      	beq.n	8002334 <HAL_GPIO_Init+0x1e8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a3e      	ldr	r2, [pc, #248]	@ (8002414 <HAL_GPIO_Init+0x2c8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d007      	beq.n	8002330 <HAL_GPIO_Init+0x1e4>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a3d      	ldr	r2, [pc, #244]	@ (8002418 <HAL_GPIO_Init+0x2cc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_GPIO_Init+0x1e0>
 8002328:	2303      	movs	r3, #3
 800232a:	e006      	b.n	800233a <HAL_GPIO_Init+0x1ee>
 800232c:	2304      	movs	r3, #4
 800232e:	e004      	b.n	800233a <HAL_GPIO_Init+0x1ee>
 8002330:	2302      	movs	r3, #2
 8002332:	e002      	b.n	800233a <HAL_GPIO_Init+0x1ee>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_GPIO_Init+0x1ee>
 8002338:	2300      	movs	r3, #0
 800233a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800233c:	f002 0203 	and.w	r2, r2, #3
 8002340:	0092      	lsls	r2, r2, #2
 8002342:	4093      	lsls	r3, r2
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800234a:	492f      	ldr	r1, [pc, #188]	@ (8002408 <HAL_GPIO_Init+0x2bc>)
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002364:	4b2d      	ldr	r3, [pc, #180]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	492c      	ldr	r1, [pc, #176]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]
 8002370:	e006      	b.n	8002380 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002372:	4b2a      	ldr	r3, [pc, #168]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	43db      	mvns	r3, r3
 800237a:	4928      	ldr	r1, [pc, #160]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 800237c:	4013      	ands	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800238c:	4b23      	ldr	r3, [pc, #140]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	4922      	ldr	r1, [pc, #136]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	60cb      	str	r3, [r1, #12]
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800239a:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	491e      	ldr	r1, [pc, #120]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023b4:	4b19      	ldr	r3, [pc, #100]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4918      	ldr	r1, [pc, #96]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023c2:	4b16      	ldr	r3, [pc, #88]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	4914      	ldr	r1, [pc, #80]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d021      	beq.n	8002420 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	490e      	ldr	r1, [pc, #56]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	e021      	b.n	800242e <HAL_GPIO_Init+0x2e2>
 80023ea:	bf00      	nop
 80023ec:	10320000 	.word	0x10320000
 80023f0:	10310000 	.word	0x10310000
 80023f4:	10220000 	.word	0x10220000
 80023f8:	10210000 	.word	0x10210000
 80023fc:	10120000 	.word	0x10120000
 8002400:	10110000 	.word	0x10110000
 8002404:	40021000 	.word	0x40021000
 8002408:	40010000 	.word	0x40010000
 800240c:	40010800 	.word	0x40010800
 8002410:	40010c00 	.word	0x40010c00
 8002414:	40011000 	.word	0x40011000
 8002418:	40011400 	.word	0x40011400
 800241c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_GPIO_Init+0x304>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	43db      	mvns	r3, r3
 8002428:	4909      	ldr	r1, [pc, #36]	@ (8002450 <HAL_GPIO_Init+0x304>)
 800242a:	4013      	ands	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	3301      	adds	r3, #1
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	f47f ae8e 	bne.w	8002160 <HAL_GPIO_Init+0x14>
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	372c      	adds	r7, #44	@ 0x2c
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	40010400 	.word	0x40010400

08002454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e001      	b.n	8002476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	807b      	strh	r3, [r7, #2]
 800248e:	4613      	mov	r3, r2
 8002490:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002492:	787b      	ldrb	r3, [r7, #1]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002498:	887a      	ldrh	r2, [r7, #2]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800249e:	e003      	b.n	80024a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024a0:	887b      	ldrh	r3, [r7, #2]
 80024a2:	041a      	lsls	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	611a      	str	r2, [r3, #16]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e272      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8087 	beq.w	80025e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d4:	4b92      	ldr	r3, [pc, #584]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d00c      	beq.n	80024fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024e0:	4b8f      	ldr	r3, [pc, #572]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d112      	bne.n	8002512 <HAL_RCC_OscConfig+0x5e>
 80024ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f8:	d10b      	bne.n	8002512 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fa:	4b89      	ldr	r3, [pc, #548]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d06c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x12c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d168      	bne.n	80025e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e24c      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800251a:	d106      	bne.n	800252a <HAL_RCC_OscConfig+0x76>
 800251c:	4b80      	ldr	r3, [pc, #512]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a7f      	ldr	r2, [pc, #508]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	e02e      	b.n	8002588 <HAL_RCC_OscConfig+0xd4>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10c      	bne.n	800254c <HAL_RCC_OscConfig+0x98>
 8002532:	4b7b      	ldr	r3, [pc, #492]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a7a      	ldr	r2, [pc, #488]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b78      	ldr	r3, [pc, #480]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a77      	ldr	r2, [pc, #476]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002544:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e01d      	b.n	8002588 <HAL_RCC_OscConfig+0xd4>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0xbc>
 8002556:	4b72      	ldr	r3, [pc, #456]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a71      	ldr	r2, [pc, #452]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 800255c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b6f      	ldr	r3, [pc, #444]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6e      	ldr	r2, [pc, #440]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0xd4>
 8002570:	4b6b      	ldr	r3, [pc, #428]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a6a      	ldr	r2, [pc, #424]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b68      	ldr	r3, [pc, #416]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a67      	ldr	r2, [pc, #412]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002586:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d013      	beq.n	80025b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7ff fcca 	bl	8001f28 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7ff fcc6 	bl	8001f28 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	@ 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e200      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0xe4>
 80025b6:	e014      	b.n	80025e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fcb6 	bl	8001f28 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff fcb2 	bl	8001f28 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	@ 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e1ec      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	4b53      	ldr	r3, [pc, #332]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x10c>
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d063      	beq.n	80026b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025fa:	4b49      	ldr	r3, [pc, #292]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b08      	cmp	r3, #8
 8002604:	d11c      	bne.n	8002640 <HAL_RCC_OscConfig+0x18c>
 8002606:	4b46      	ldr	r3, [pc, #280]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d116      	bne.n	8002640 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002612:	4b43      	ldr	r3, [pc, #268]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_RCC_OscConfig+0x176>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e1c0      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262a:	4b3d      	ldr	r3, [pc, #244]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4939      	ldr	r1, [pc, #228]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	e03a      	b.n	80026b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d020      	beq.n	800268a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002648:	4b36      	ldr	r3, [pc, #216]	@ (8002724 <HAL_RCC_OscConfig+0x270>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7ff fc6b 	bl	8001f28 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002656:	f7ff fc67 	bl	8001f28 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e1a1      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	4b2d      	ldr	r3, [pc, #180]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002674:	4b2a      	ldr	r3, [pc, #168]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4927      	ldr	r1, [pc, #156]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]
 8002688:	e015      	b.n	80026b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268a:	4b26      	ldr	r3, [pc, #152]	@ (8002724 <HAL_RCC_OscConfig+0x270>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff fc4a 	bl	8001f28 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7ff fc46 	bl	8001f28 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e180      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d03a      	beq.n	8002738 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d019      	beq.n	80026fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ca:	4b17      	ldr	r3, [pc, #92]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7ff fc2a 	bl	8001f28 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d8:	f7ff fc26 	bl	8001f28 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e160      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026f6:	2001      	movs	r0, #1
 80026f8:	f000 face 	bl	8002c98 <RCC_Delay>
 80026fc:	e01c      	b.n	8002738 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <HAL_RCC_OscConfig+0x274>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002704:	f7ff fc10 	bl	8001f28 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270a:	e00f      	b.n	800272c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7ff fc0c 	bl	8001f28 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d908      	bls.n	800272c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e146      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	42420000 	.word	0x42420000
 8002728:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	4b92      	ldr	r3, [pc, #584]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1e9      	bne.n	800270c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80a6 	beq.w	8002892 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b8b      	ldr	r3, [pc, #556]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10d      	bne.n	8002772 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	4b88      	ldr	r3, [pc, #544]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4a87      	ldr	r2, [pc, #540]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002760:	61d3      	str	r3, [r2, #28]
 8002762:	4b85      	ldr	r3, [pc, #532]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276e:	2301      	movs	r3, #1
 8002770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002772:	4b82      	ldr	r3, [pc, #520]	@ (800297c <HAL_RCC_OscConfig+0x4c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d118      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277e:	4b7f      	ldr	r3, [pc, #508]	@ (800297c <HAL_RCC_OscConfig+0x4c8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a7e      	ldr	r2, [pc, #504]	@ (800297c <HAL_RCC_OscConfig+0x4c8>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278a:	f7ff fbcd 	bl	8001f28 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002792:	f7ff fbc9 	bl	8001f28 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b64      	cmp	r3, #100	@ 0x64
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e103      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	4b75      	ldr	r3, [pc, #468]	@ (800297c <HAL_RCC_OscConfig+0x4c8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x312>
 80027b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	e02d      	b.n	8002822 <HAL_RCC_OscConfig+0x36e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x334>
 80027ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4a69      	ldr	r2, [pc, #420]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6213      	str	r3, [r2, #32]
 80027da:	4b67      	ldr	r3, [pc, #412]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4a66      	ldr	r2, [pc, #408]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	f023 0304 	bic.w	r3, r3, #4
 80027e4:	6213      	str	r3, [r2, #32]
 80027e6:	e01c      	b.n	8002822 <HAL_RCC_OscConfig+0x36e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d10c      	bne.n	800280a <HAL_RCC_OscConfig+0x356>
 80027f0:	4b61      	ldr	r3, [pc, #388]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4a60      	ldr	r2, [pc, #384]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6213      	str	r3, [r2, #32]
 80027fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4a5d      	ldr	r2, [pc, #372]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6213      	str	r3, [r2, #32]
 8002808:	e00b      	b.n	8002822 <HAL_RCC_OscConfig+0x36e>
 800280a:	4b5b      	ldr	r3, [pc, #364]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a5a      	ldr	r2, [pc, #360]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6213      	str	r3, [r2, #32]
 8002816:	4b58      	ldr	r3, [pc, #352]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a57      	ldr	r2, [pc, #348]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d015      	beq.n	8002856 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282a:	f7ff fb7d 	bl	8001f28 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7ff fb79 	bl	8001f28 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0b1      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	4b4b      	ldr	r3, [pc, #300]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ee      	beq.n	8002832 <HAL_RCC_OscConfig+0x37e>
 8002854:	e014      	b.n	8002880 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002856:	f7ff fb67 	bl	8001f28 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7ff fb63 	bl	8001f28 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e09b      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002874:	4b40      	ldr	r3, [pc, #256]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ee      	bne.n	800285e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002880:	7dfb      	ldrb	r3, [r7, #23]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d105      	bne.n	8002892 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002886:	4b3c      	ldr	r3, [pc, #240]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4a3b      	ldr	r2, [pc, #236]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002890:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8087 	beq.w	80029aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289c:	4b36      	ldr	r3, [pc, #216]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d061      	beq.n	800296c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d146      	bne.n	800293e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b0:	4b33      	ldr	r3, [pc, #204]	@ (8002980 <HAL_RCC_OscConfig+0x4cc>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7ff fb37 	bl	8001f28 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7ff fb33 	bl	8001f28 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e06d      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d0:	4b29      	ldr	r3, [pc, #164]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f0      	bne.n	80028be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e4:	d108      	bne.n	80028f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028e6:	4b24      	ldr	r3, [pc, #144]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4921      	ldr	r1, [pc, #132]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a19      	ldr	r1, [r3, #32]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	430b      	orrs	r3, r1
 800290a:	491b      	ldr	r1, [pc, #108]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002910:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <HAL_RCC_OscConfig+0x4cc>)
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7ff fb07 	bl	8001f28 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291e:	f7ff fb03 	bl	8001f28 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e03d      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x46a>
 800293c:	e035      	b.n	80029aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <HAL_RCC_OscConfig+0x4cc>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff faf0 	bl	8001f28 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7ff faec 	bl	8001f28 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e026      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x498>
 800296a:	e01e      	b.n	80029aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e019      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
 8002978:	40021000 	.word	0x40021000
 800297c:	40007000 	.word	0x40007000
 8002980:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <HAL_RCC_OscConfig+0x500>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	429a      	cmp	r2, r3
 8002996:	d106      	bne.n	80029a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000

080029b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0d0      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d910      	bls.n	80029fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b67      	ldr	r3, [pc, #412]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 0207 	bic.w	r2, r3, #7
 80029e2:	4965      	ldr	r1, [pc, #404]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b63      	ldr	r3, [pc, #396]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b8      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b59      	ldr	r3, [pc, #356]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a58      	ldr	r2, [pc, #352]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a2c:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a52      	ldr	r2, [pc, #328]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b50      	ldr	r3, [pc, #320]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	494d      	ldr	r1, [pc, #308]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d040      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b47      	ldr	r3, [pc, #284]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d115      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e07f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a76:	4b41      	ldr	r3, [pc, #260]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e073      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	4b3d      	ldr	r3, [pc, #244]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e06b      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a96:	4b39      	ldr	r3, [pc, #228]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4936      	ldr	r1, [pc, #216]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa8:	f7ff fa3e 	bl	8001f28 <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7ff fa3a 	bl	8001f28 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e053      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 020c 	and.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d1eb      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d210      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b24      	ldr	r3, [pc, #144]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	4922      	ldr	r1, [pc, #136]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e032      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4916      	ldr	r1, [pc, #88]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b32:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	490e      	ldr	r1, [pc, #56]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 f821 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	490a      	ldr	r1, [pc, #40]	@ (8002b80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b58:	5ccb      	ldrb	r3, [r1, r3]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a09      	ldr	r2, [pc, #36]	@ (8002b84 <HAL_RCC_ClockConfig+0x1cc>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_RCC_ClockConfig+0x1d0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f99c 	bl	8001ea4 <HAL_InitTick>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40022000 	.word	0x40022000
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	08003f70 	.word	0x08003f70
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000004 	.word	0x20000004

08002b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d002      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x30>
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bba:	e027      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bbc:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bbe:	613b      	str	r3, [r7, #16]
      break;
 8002bc0:	e027      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	0c9b      	lsrs	r3, r3, #18
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	4a17      	ldr	r2, [pc, #92]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bcc:	5cd3      	ldrb	r3, [r2, r3]
 8002bce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d010      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bda:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	0c5b      	lsrs	r3, r3, #17
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	4a11      	ldr	r2, [pc, #68]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002be6:	5cd3      	ldrb	r3, [r2, r3]
 8002be8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bee:	fb03 f202 	mul.w	r2, r3, r2
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	e004      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c00:	fb02 f303 	mul.w	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	613b      	str	r3, [r7, #16]
      break;
 8002c0a:	e002      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c0e:	613b      	str	r3, [r7, #16]
      break;
 8002c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c12:	693b      	ldr	r3, [r7, #16]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000
 8002c24:	007a1200 	.word	0x007a1200
 8002c28:	08003f88 	.word	0x08003f88
 8002c2c:	08003f98 	.word	0x08003f98
 8002c30:	003d0900 	.word	0x003d0900

08002c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c38:	4b02      	ldr	r3, [pc, #8]	@ (8002c44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	20000000 	.word	0x20000000

08002c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c4c:	f7ff fff2 	bl	8002c34 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	@ (8002c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	08003f80 	.word	0x08003f80

08002c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c74:	f7ff ffde 	bl	8002c34 <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	0adb      	lsrs	r3, r3, #11
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4903      	ldr	r1, [pc, #12]	@ (8002c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08003f80 	.word	0x08003f80

08002c98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <RCC_Delay+0x34>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <RCC_Delay+0x38>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	0a5b      	lsrs	r3, r3, #9
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cb4:	bf00      	nop
  }
  while (Delay --);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1e5a      	subs	r2, r3, #1
 8002cba:	60fa      	str	r2, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f9      	bne.n	8002cb4 <RCC_Delay+0x1c>
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	10624dd3 	.word	0x10624dd3

08002cd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e093      	b.n	8002e10 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7fe ffe5 	bl	8001ccc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d18:	f023 0307 	bic.w	r3, r3, #7
 8002d1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f000 f903 	bl	8002f34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d56:	f023 0303 	bic.w	r3, r3, #3
 8002d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	4313      	orrs	r3, r2
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002d74:	f023 030c 	bic.w	r3, r3, #12
 8002d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	4313      	orrs	r3, r2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	011a      	lsls	r2, r3, #4
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	031b      	lsls	r3, r3, #12
 8002da4:	4313      	orrs	r3, r2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d110      	bne.n	8002e6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e4e:	7b7b      	ldrb	r3, [r7, #13]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d001      	beq.n	8002e58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e069      	b.n	8002f2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e68:	e031      	b.n	8002ece <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d110      	bne.n	8002e92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e70:	7bbb      	ldrb	r3, [r7, #14]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e76:	7b3b      	ldrb	r3, [r7, #12]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d001      	beq.n	8002e80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e055      	b.n	8002f2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e90:	e01d      	b.n	8002ece <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d108      	bne.n	8002eaa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e98:	7bbb      	ldrb	r3, [r7, #14]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d105      	bne.n	8002eaa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e9e:	7b7b      	ldrb	r3, [r7, #13]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ea4:	7b3b      	ldrb	r3, [r7, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e03e      	b.n	8002f2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_TIM_Encoder_Start+0xc4>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d008      	beq.n	8002eec <HAL_TIM_Encoder_Start+0xd4>
 8002eda:	e00f      	b.n	8002efc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 f893 	bl	8003010 <TIM_CCxChannelCmd>
      break;
 8002eea:	e016      	b.n	8002f1a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f88b 	bl	8003010 <TIM_CCxChannelCmd>
      break;
 8002efa:	e00e      	b.n	8002f1a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2201      	movs	r2, #1
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f883 	bl	8003010 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2104      	movs	r1, #4
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f87c 	bl	8003010 <TIM_CCxChannelCmd>
      break;
 8002f18:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a2f      	ldr	r2, [pc, #188]	@ (8003004 <TIM_Base_SetConfig+0xd0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <TIM_Base_SetConfig+0x30>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f52:	d007      	beq.n	8002f64 <TIM_Base_SetConfig+0x30>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a2c      	ldr	r2, [pc, #176]	@ (8003008 <TIM_Base_SetConfig+0xd4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <TIM_Base_SetConfig+0x30>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a2b      	ldr	r2, [pc, #172]	@ (800300c <TIM_Base_SetConfig+0xd8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d108      	bne.n	8002f76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a22      	ldr	r2, [pc, #136]	@ (8003004 <TIM_Base_SetConfig+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_Base_SetConfig+0x62>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f84:	d007      	beq.n	8002f96 <TIM_Base_SetConfig+0x62>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1f      	ldr	r2, [pc, #124]	@ (8003008 <TIM_Base_SetConfig+0xd4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_Base_SetConfig+0x62>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a1e      	ldr	r2, [pc, #120]	@ (800300c <TIM_Base_SetConfig+0xd8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d108      	bne.n	8002fa8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a0d      	ldr	r2, [pc, #52]	@ (8003004 <TIM_Base_SetConfig+0xd0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d103      	bne.n	8002fdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f023 0201 	bic.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	611a      	str	r2, [r3, #16]
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40012c00 	.word	0x40012c00
 8003008:	40000400 	.word	0x40000400
 800300c:	40000800 	.word	0x40000800

08003010 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2201      	movs	r2, #1
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1a      	ldr	r2, [r3, #32]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	43db      	mvns	r3, r3
 8003032:	401a      	ands	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a1a      	ldr	r2, [r3, #32]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	431a      	orrs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800306c:	2302      	movs	r3, #2
 800306e:	e046      	b.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a16      	ldr	r2, [pc, #88]	@ (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00e      	beq.n	80030d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030bc:	d009      	beq.n	80030d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a12      	ldr	r2, [pc, #72]	@ (800310c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d004      	beq.n	80030d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a10      	ldr	r2, [pc, #64]	@ (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10c      	bne.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40000400 	.word	0x40000400
 8003110:	40000800 	.word	0x40000800

08003114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e042      	b.n	80031ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fe fe2c 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	@ 0x24
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f971 	bl	8003440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800316c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800317c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800318c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	@ 0x28
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d175      	bne.n	80032c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_UART_Transmit+0x2c>
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e06e      	b.n	80032c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2221      	movs	r2, #33	@ 0x21
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031f2:	f7fe fe99 	bl	8001f28 <HAL_GetTick>
 80031f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800320c:	d108      	bne.n	8003220 <HAL_UART_Transmit+0x6c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	e003      	b.n	8003228 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003228:	e02e      	b.n	8003288 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2200      	movs	r2, #0
 8003232:	2180      	movs	r1, #128	@ 0x80
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f848 	bl	80032ca <UART_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e03a      	b.n	80032c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	3302      	adds	r3, #2
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e007      	b.n	800327a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	3301      	adds	r3, #1
 8003278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1cb      	bne.n	800322a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2200      	movs	r2, #0
 800329a:	2140      	movs	r1, #64	@ 0x40
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f814 	bl	80032ca <UART_WaitOnFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e006      	b.n	80032c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032da:	e03b      	b.n	8003354 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032e2:	d037      	beq.n	8003354 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fe fe20 	bl	8001f28 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	6a3a      	ldr	r2, [r7, #32]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <UART_WaitOnFlagUntilTimeout+0x30>
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e03a      	b.n	8003374 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d023      	beq.n	8003354 <UART_WaitOnFlagUntilTimeout+0x8a>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b80      	cmp	r3, #128	@ 0x80
 8003310:	d020      	beq.n	8003354 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b40      	cmp	r3, #64	@ 0x40
 8003316:	d01d      	beq.n	8003354 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b08      	cmp	r3, #8
 8003324:	d116      	bne.n	8003354 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f81d 	bl	800337c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2208      	movs	r2, #8
 8003346:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e00f      	b.n	8003374 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4013      	ands	r3, r2
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	429a      	cmp	r2, r3
 8003370:	d0b4      	beq.n	80032dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800337c:	b480      	push	{r7}
 800337e:	b095      	sub	sp, #84	@ 0x54
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	330c      	adds	r3, #12
 800338a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338e:	e853 3f00 	ldrex	r3, [r3]
 8003392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003396:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800339a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80033a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e5      	bne.n	8003384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3314      	adds	r3, #20
 80033be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3314      	adds	r3, #20
 80033d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e5      	bne.n	80033b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d119      	bne.n	8003428 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	60bb      	str	r3, [r7, #8]
   return(result);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f023 0310 	bic.w	r3, r3, #16
 800340a:	647b      	str	r3, [r7, #68]	@ 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003414:	61ba      	str	r2, [r7, #24]
 8003416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6979      	ldr	r1, [r7, #20]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	613b      	str	r3, [r7, #16]
   return(result);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e5      	bne.n	80033f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003436:	bf00      	nop
 8003438:	3754      	adds	r7, #84	@ 0x54
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800347a:	f023 030c 	bic.w	r3, r3, #12
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	430b      	orrs	r3, r1
 8003486:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003554 <UART_SetConfig+0x114>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d103      	bne.n	80034b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034a8:	f7ff fbe2 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	e002      	b.n	80034b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034b0:	f7ff fbca 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 80034b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	009a      	lsls	r2, r3, #2
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	4a22      	ldr	r2, [pc, #136]	@ (8003558 <UART_SetConfig+0x118>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	0119      	lsls	r1, r3, #4
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009a      	lsls	r2, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003558 <UART_SetConfig+0x118>)
 80034ee:	fba3 0302 	umull	r0, r3, r3, r2
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	2064      	movs	r0, #100	@ 0x64
 80034f6:	fb00 f303 	mul.w	r3, r0, r3
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	3332      	adds	r3, #50	@ 0x32
 8003500:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <UART_SetConfig+0x118>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800350c:	4419      	add	r1, r3
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	009a      	lsls	r2, r3, #2
 8003518:	441a      	add	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	fbb2 f2f3 	udiv	r2, r2, r3
 8003524:	4b0c      	ldr	r3, [pc, #48]	@ (8003558 <UART_SetConfig+0x118>)
 8003526:	fba3 0302 	umull	r0, r3, r3, r2
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2064      	movs	r0, #100	@ 0x64
 800352e:	fb00 f303 	mul.w	r3, r0, r3
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	3332      	adds	r3, #50	@ 0x32
 8003538:	4a07      	ldr	r2, [pc, #28]	@ (8003558 <UART_SetConfig+0x118>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	f003 020f 	and.w	r2, r3, #15
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	440a      	add	r2, r1
 800354a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40013800 	.word	0x40013800
 8003558:	51eb851f 	.word	0x51eb851f

0800355c <siprintf>:
 800355c:	b40e      	push	{r1, r2, r3}
 800355e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003562:	b510      	push	{r4, lr}
 8003564:	2400      	movs	r4, #0
 8003566:	b09d      	sub	sp, #116	@ 0x74
 8003568:	ab1f      	add	r3, sp, #124	@ 0x7c
 800356a:	9002      	str	r0, [sp, #8]
 800356c:	9006      	str	r0, [sp, #24]
 800356e:	9107      	str	r1, [sp, #28]
 8003570:	9104      	str	r1, [sp, #16]
 8003572:	4809      	ldr	r0, [pc, #36]	@ (8003598 <siprintf+0x3c>)
 8003574:	4909      	ldr	r1, [pc, #36]	@ (800359c <siprintf+0x40>)
 8003576:	f853 2b04 	ldr.w	r2, [r3], #4
 800357a:	9105      	str	r1, [sp, #20]
 800357c:	6800      	ldr	r0, [r0, #0]
 800357e:	a902      	add	r1, sp, #8
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003584:	f000 f992 	bl	80038ac <_svfiprintf_r>
 8003588:	9b02      	ldr	r3, [sp, #8]
 800358a:	701c      	strb	r4, [r3, #0]
 800358c:	b01d      	add	sp, #116	@ 0x74
 800358e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003592:	b003      	add	sp, #12
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	2000000c 	.word	0x2000000c
 800359c:	ffff0208 	.word	0xffff0208

080035a0 <memset>:
 80035a0:	4603      	mov	r3, r0
 80035a2:	4402      	add	r2, r0
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d100      	bne.n	80035aa <memset+0xa>
 80035a8:	4770      	bx	lr
 80035aa:	f803 1b01 	strb.w	r1, [r3], #1
 80035ae:	e7f9      	b.n	80035a4 <memset+0x4>

080035b0 <__errno>:
 80035b0:	4b01      	ldr	r3, [pc, #4]	@ (80035b8 <__errno+0x8>)
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	2000000c 	.word	0x2000000c

080035bc <__libc_init_array>:
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	2600      	movs	r6, #0
 80035c0:	4d0c      	ldr	r5, [pc, #48]	@ (80035f4 <__libc_init_array+0x38>)
 80035c2:	4c0d      	ldr	r4, [pc, #52]	@ (80035f8 <__libc_init_array+0x3c>)
 80035c4:	1b64      	subs	r4, r4, r5
 80035c6:	10a4      	asrs	r4, r4, #2
 80035c8:	42a6      	cmp	r6, r4
 80035ca:	d109      	bne.n	80035e0 <__libc_init_array+0x24>
 80035cc:	f000 fc76 	bl	8003ebc <_init>
 80035d0:	2600      	movs	r6, #0
 80035d2:	4d0a      	ldr	r5, [pc, #40]	@ (80035fc <__libc_init_array+0x40>)
 80035d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003600 <__libc_init_array+0x44>)
 80035d6:	1b64      	subs	r4, r4, r5
 80035d8:	10a4      	asrs	r4, r4, #2
 80035da:	42a6      	cmp	r6, r4
 80035dc:	d105      	bne.n	80035ea <__libc_init_array+0x2e>
 80035de:	bd70      	pop	{r4, r5, r6, pc}
 80035e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e4:	4798      	blx	r3
 80035e6:	3601      	adds	r6, #1
 80035e8:	e7ee      	b.n	80035c8 <__libc_init_array+0xc>
 80035ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ee:	4798      	blx	r3
 80035f0:	3601      	adds	r6, #1
 80035f2:	e7f2      	b.n	80035da <__libc_init_array+0x1e>
 80035f4:	08003fd8 	.word	0x08003fd8
 80035f8:	08003fd8 	.word	0x08003fd8
 80035fc:	08003fd8 	.word	0x08003fd8
 8003600:	08003fdc 	.word	0x08003fdc

08003604 <__retarget_lock_acquire_recursive>:
 8003604:	4770      	bx	lr

08003606 <__retarget_lock_release_recursive>:
 8003606:	4770      	bx	lr

08003608 <_free_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4605      	mov	r5, r0
 800360c:	2900      	cmp	r1, #0
 800360e:	d040      	beq.n	8003692 <_free_r+0x8a>
 8003610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003614:	1f0c      	subs	r4, r1, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	bfb8      	it	lt
 800361a:	18e4      	addlt	r4, r4, r3
 800361c:	f000 f8de 	bl	80037dc <__malloc_lock>
 8003620:	4a1c      	ldr	r2, [pc, #112]	@ (8003694 <_free_r+0x8c>)
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	b933      	cbnz	r3, 8003634 <_free_r+0x2c>
 8003626:	6063      	str	r3, [r4, #4]
 8003628:	6014      	str	r4, [r2, #0]
 800362a:	4628      	mov	r0, r5
 800362c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003630:	f000 b8da 	b.w	80037e8 <__malloc_unlock>
 8003634:	42a3      	cmp	r3, r4
 8003636:	d908      	bls.n	800364a <_free_r+0x42>
 8003638:	6820      	ldr	r0, [r4, #0]
 800363a:	1821      	adds	r1, r4, r0
 800363c:	428b      	cmp	r3, r1
 800363e:	bf01      	itttt	eq
 8003640:	6819      	ldreq	r1, [r3, #0]
 8003642:	685b      	ldreq	r3, [r3, #4]
 8003644:	1809      	addeq	r1, r1, r0
 8003646:	6021      	streq	r1, [r4, #0]
 8003648:	e7ed      	b.n	8003626 <_free_r+0x1e>
 800364a:	461a      	mov	r2, r3
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	b10b      	cbz	r3, 8003654 <_free_r+0x4c>
 8003650:	42a3      	cmp	r3, r4
 8003652:	d9fa      	bls.n	800364a <_free_r+0x42>
 8003654:	6811      	ldr	r1, [r2, #0]
 8003656:	1850      	adds	r0, r2, r1
 8003658:	42a0      	cmp	r0, r4
 800365a:	d10b      	bne.n	8003674 <_free_r+0x6c>
 800365c:	6820      	ldr	r0, [r4, #0]
 800365e:	4401      	add	r1, r0
 8003660:	1850      	adds	r0, r2, r1
 8003662:	4283      	cmp	r3, r0
 8003664:	6011      	str	r1, [r2, #0]
 8003666:	d1e0      	bne.n	800362a <_free_r+0x22>
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4408      	add	r0, r1
 800366e:	6010      	str	r0, [r2, #0]
 8003670:	6053      	str	r3, [r2, #4]
 8003672:	e7da      	b.n	800362a <_free_r+0x22>
 8003674:	d902      	bls.n	800367c <_free_r+0x74>
 8003676:	230c      	movs	r3, #12
 8003678:	602b      	str	r3, [r5, #0]
 800367a:	e7d6      	b.n	800362a <_free_r+0x22>
 800367c:	6820      	ldr	r0, [r4, #0]
 800367e:	1821      	adds	r1, r4, r0
 8003680:	428b      	cmp	r3, r1
 8003682:	bf01      	itttt	eq
 8003684:	6819      	ldreq	r1, [r3, #0]
 8003686:	685b      	ldreq	r3, [r3, #4]
 8003688:	1809      	addeq	r1, r1, r0
 800368a:	6021      	streq	r1, [r4, #0]
 800368c:	6063      	str	r3, [r4, #4]
 800368e:	6054      	str	r4, [r2, #4]
 8003690:	e7cb      	b.n	800362a <_free_r+0x22>
 8003692:	bd38      	pop	{r3, r4, r5, pc}
 8003694:	2000028c 	.word	0x2000028c

08003698 <sbrk_aligned>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	4e0f      	ldr	r6, [pc, #60]	@ (80036d8 <sbrk_aligned+0x40>)
 800369c:	460c      	mov	r4, r1
 800369e:	6831      	ldr	r1, [r6, #0]
 80036a0:	4605      	mov	r5, r0
 80036a2:	b911      	cbnz	r1, 80036aa <sbrk_aligned+0x12>
 80036a4:	f000 fba8 	bl	8003df8 <_sbrk_r>
 80036a8:	6030      	str	r0, [r6, #0]
 80036aa:	4621      	mov	r1, r4
 80036ac:	4628      	mov	r0, r5
 80036ae:	f000 fba3 	bl	8003df8 <_sbrk_r>
 80036b2:	1c43      	adds	r3, r0, #1
 80036b4:	d103      	bne.n	80036be <sbrk_aligned+0x26>
 80036b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80036ba:	4620      	mov	r0, r4
 80036bc:	bd70      	pop	{r4, r5, r6, pc}
 80036be:	1cc4      	adds	r4, r0, #3
 80036c0:	f024 0403 	bic.w	r4, r4, #3
 80036c4:	42a0      	cmp	r0, r4
 80036c6:	d0f8      	beq.n	80036ba <sbrk_aligned+0x22>
 80036c8:	1a21      	subs	r1, r4, r0
 80036ca:	4628      	mov	r0, r5
 80036cc:	f000 fb94 	bl	8003df8 <_sbrk_r>
 80036d0:	3001      	adds	r0, #1
 80036d2:	d1f2      	bne.n	80036ba <sbrk_aligned+0x22>
 80036d4:	e7ef      	b.n	80036b6 <sbrk_aligned+0x1e>
 80036d6:	bf00      	nop
 80036d8:	20000288 	.word	0x20000288

080036dc <_malloc_r>:
 80036dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036e0:	1ccd      	adds	r5, r1, #3
 80036e2:	f025 0503 	bic.w	r5, r5, #3
 80036e6:	3508      	adds	r5, #8
 80036e8:	2d0c      	cmp	r5, #12
 80036ea:	bf38      	it	cc
 80036ec:	250c      	movcc	r5, #12
 80036ee:	2d00      	cmp	r5, #0
 80036f0:	4606      	mov	r6, r0
 80036f2:	db01      	blt.n	80036f8 <_malloc_r+0x1c>
 80036f4:	42a9      	cmp	r1, r5
 80036f6:	d904      	bls.n	8003702 <_malloc_r+0x26>
 80036f8:	230c      	movs	r3, #12
 80036fa:	6033      	str	r3, [r6, #0]
 80036fc:	2000      	movs	r0, #0
 80036fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003702:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80037d8 <_malloc_r+0xfc>
 8003706:	f000 f869 	bl	80037dc <__malloc_lock>
 800370a:	f8d8 3000 	ldr.w	r3, [r8]
 800370e:	461c      	mov	r4, r3
 8003710:	bb44      	cbnz	r4, 8003764 <_malloc_r+0x88>
 8003712:	4629      	mov	r1, r5
 8003714:	4630      	mov	r0, r6
 8003716:	f7ff ffbf 	bl	8003698 <sbrk_aligned>
 800371a:	1c43      	adds	r3, r0, #1
 800371c:	4604      	mov	r4, r0
 800371e:	d158      	bne.n	80037d2 <_malloc_r+0xf6>
 8003720:	f8d8 4000 	ldr.w	r4, [r8]
 8003724:	4627      	mov	r7, r4
 8003726:	2f00      	cmp	r7, #0
 8003728:	d143      	bne.n	80037b2 <_malloc_r+0xd6>
 800372a:	2c00      	cmp	r4, #0
 800372c:	d04b      	beq.n	80037c6 <_malloc_r+0xea>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	4639      	mov	r1, r7
 8003732:	4630      	mov	r0, r6
 8003734:	eb04 0903 	add.w	r9, r4, r3
 8003738:	f000 fb5e 	bl	8003df8 <_sbrk_r>
 800373c:	4581      	cmp	r9, r0
 800373e:	d142      	bne.n	80037c6 <_malloc_r+0xea>
 8003740:	6821      	ldr	r1, [r4, #0]
 8003742:	4630      	mov	r0, r6
 8003744:	1a6d      	subs	r5, r5, r1
 8003746:	4629      	mov	r1, r5
 8003748:	f7ff ffa6 	bl	8003698 <sbrk_aligned>
 800374c:	3001      	adds	r0, #1
 800374e:	d03a      	beq.n	80037c6 <_malloc_r+0xea>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	442b      	add	r3, r5
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	f8d8 3000 	ldr.w	r3, [r8]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	bb62      	cbnz	r2, 80037b8 <_malloc_r+0xdc>
 800375e:	f8c8 7000 	str.w	r7, [r8]
 8003762:	e00f      	b.n	8003784 <_malloc_r+0xa8>
 8003764:	6822      	ldr	r2, [r4, #0]
 8003766:	1b52      	subs	r2, r2, r5
 8003768:	d420      	bmi.n	80037ac <_malloc_r+0xd0>
 800376a:	2a0b      	cmp	r2, #11
 800376c:	d917      	bls.n	800379e <_malloc_r+0xc2>
 800376e:	1961      	adds	r1, r4, r5
 8003770:	42a3      	cmp	r3, r4
 8003772:	6025      	str	r5, [r4, #0]
 8003774:	bf18      	it	ne
 8003776:	6059      	strne	r1, [r3, #4]
 8003778:	6863      	ldr	r3, [r4, #4]
 800377a:	bf08      	it	eq
 800377c:	f8c8 1000 	streq.w	r1, [r8]
 8003780:	5162      	str	r2, [r4, r5]
 8003782:	604b      	str	r3, [r1, #4]
 8003784:	4630      	mov	r0, r6
 8003786:	f000 f82f 	bl	80037e8 <__malloc_unlock>
 800378a:	f104 000b 	add.w	r0, r4, #11
 800378e:	1d23      	adds	r3, r4, #4
 8003790:	f020 0007 	bic.w	r0, r0, #7
 8003794:	1ac2      	subs	r2, r0, r3
 8003796:	bf1c      	itt	ne
 8003798:	1a1b      	subne	r3, r3, r0
 800379a:	50a3      	strne	r3, [r4, r2]
 800379c:	e7af      	b.n	80036fe <_malloc_r+0x22>
 800379e:	6862      	ldr	r2, [r4, #4]
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	bf0c      	ite	eq
 80037a4:	f8c8 2000 	streq.w	r2, [r8]
 80037a8:	605a      	strne	r2, [r3, #4]
 80037aa:	e7eb      	b.n	8003784 <_malloc_r+0xa8>
 80037ac:	4623      	mov	r3, r4
 80037ae:	6864      	ldr	r4, [r4, #4]
 80037b0:	e7ae      	b.n	8003710 <_malloc_r+0x34>
 80037b2:	463c      	mov	r4, r7
 80037b4:	687f      	ldr	r7, [r7, #4]
 80037b6:	e7b6      	b.n	8003726 <_malloc_r+0x4a>
 80037b8:	461a      	mov	r2, r3
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	42a3      	cmp	r3, r4
 80037be:	d1fb      	bne.n	80037b8 <_malloc_r+0xdc>
 80037c0:	2300      	movs	r3, #0
 80037c2:	6053      	str	r3, [r2, #4]
 80037c4:	e7de      	b.n	8003784 <_malloc_r+0xa8>
 80037c6:	230c      	movs	r3, #12
 80037c8:	4630      	mov	r0, r6
 80037ca:	6033      	str	r3, [r6, #0]
 80037cc:	f000 f80c 	bl	80037e8 <__malloc_unlock>
 80037d0:	e794      	b.n	80036fc <_malloc_r+0x20>
 80037d2:	6005      	str	r5, [r0, #0]
 80037d4:	e7d6      	b.n	8003784 <_malloc_r+0xa8>
 80037d6:	bf00      	nop
 80037d8:	2000028c 	.word	0x2000028c

080037dc <__malloc_lock>:
 80037dc:	4801      	ldr	r0, [pc, #4]	@ (80037e4 <__malloc_lock+0x8>)
 80037de:	f7ff bf11 	b.w	8003604 <__retarget_lock_acquire_recursive>
 80037e2:	bf00      	nop
 80037e4:	20000284 	.word	0x20000284

080037e8 <__malloc_unlock>:
 80037e8:	4801      	ldr	r0, [pc, #4]	@ (80037f0 <__malloc_unlock+0x8>)
 80037ea:	f7ff bf0c 	b.w	8003606 <__retarget_lock_release_recursive>
 80037ee:	bf00      	nop
 80037f0:	20000284 	.word	0x20000284

080037f4 <__ssputs_r>:
 80037f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f8:	461f      	mov	r7, r3
 80037fa:	688e      	ldr	r6, [r1, #8]
 80037fc:	4682      	mov	sl, r0
 80037fe:	42be      	cmp	r6, r7
 8003800:	460c      	mov	r4, r1
 8003802:	4690      	mov	r8, r2
 8003804:	680b      	ldr	r3, [r1, #0]
 8003806:	d82d      	bhi.n	8003864 <__ssputs_r+0x70>
 8003808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800380c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003810:	d026      	beq.n	8003860 <__ssputs_r+0x6c>
 8003812:	6965      	ldr	r5, [r4, #20]
 8003814:	6909      	ldr	r1, [r1, #16]
 8003816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800381a:	eba3 0901 	sub.w	r9, r3, r1
 800381e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003822:	1c7b      	adds	r3, r7, #1
 8003824:	444b      	add	r3, r9
 8003826:	106d      	asrs	r5, r5, #1
 8003828:	429d      	cmp	r5, r3
 800382a:	bf38      	it	cc
 800382c:	461d      	movcc	r5, r3
 800382e:	0553      	lsls	r3, r2, #21
 8003830:	d527      	bpl.n	8003882 <__ssputs_r+0x8e>
 8003832:	4629      	mov	r1, r5
 8003834:	f7ff ff52 	bl	80036dc <_malloc_r>
 8003838:	4606      	mov	r6, r0
 800383a:	b360      	cbz	r0, 8003896 <__ssputs_r+0xa2>
 800383c:	464a      	mov	r2, r9
 800383e:	6921      	ldr	r1, [r4, #16]
 8003840:	f000 faf8 	bl	8003e34 <memcpy>
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800384a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800384e:	81a3      	strh	r3, [r4, #12]
 8003850:	6126      	str	r6, [r4, #16]
 8003852:	444e      	add	r6, r9
 8003854:	6026      	str	r6, [r4, #0]
 8003856:	463e      	mov	r6, r7
 8003858:	6165      	str	r5, [r4, #20]
 800385a:	eba5 0509 	sub.w	r5, r5, r9
 800385e:	60a5      	str	r5, [r4, #8]
 8003860:	42be      	cmp	r6, r7
 8003862:	d900      	bls.n	8003866 <__ssputs_r+0x72>
 8003864:	463e      	mov	r6, r7
 8003866:	4632      	mov	r2, r6
 8003868:	4641      	mov	r1, r8
 800386a:	6820      	ldr	r0, [r4, #0]
 800386c:	f000 faaa 	bl	8003dc4 <memmove>
 8003870:	2000      	movs	r0, #0
 8003872:	68a3      	ldr	r3, [r4, #8]
 8003874:	1b9b      	subs	r3, r3, r6
 8003876:	60a3      	str	r3, [r4, #8]
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	4433      	add	r3, r6
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003882:	462a      	mov	r2, r5
 8003884:	f000 fae4 	bl	8003e50 <_realloc_r>
 8003888:	4606      	mov	r6, r0
 800388a:	2800      	cmp	r0, #0
 800388c:	d1e0      	bne.n	8003850 <__ssputs_r+0x5c>
 800388e:	4650      	mov	r0, sl
 8003890:	6921      	ldr	r1, [r4, #16]
 8003892:	f7ff feb9 	bl	8003608 <_free_r>
 8003896:	230c      	movs	r3, #12
 8003898:	f8ca 3000 	str.w	r3, [sl]
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	e7e9      	b.n	800387e <__ssputs_r+0x8a>
	...

080038ac <_svfiprintf_r>:
 80038ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b0:	4698      	mov	r8, r3
 80038b2:	898b      	ldrh	r3, [r1, #12]
 80038b4:	4607      	mov	r7, r0
 80038b6:	061b      	lsls	r3, r3, #24
 80038b8:	460d      	mov	r5, r1
 80038ba:	4614      	mov	r4, r2
 80038bc:	b09d      	sub	sp, #116	@ 0x74
 80038be:	d510      	bpl.n	80038e2 <_svfiprintf_r+0x36>
 80038c0:	690b      	ldr	r3, [r1, #16]
 80038c2:	b973      	cbnz	r3, 80038e2 <_svfiprintf_r+0x36>
 80038c4:	2140      	movs	r1, #64	@ 0x40
 80038c6:	f7ff ff09 	bl	80036dc <_malloc_r>
 80038ca:	6028      	str	r0, [r5, #0]
 80038cc:	6128      	str	r0, [r5, #16]
 80038ce:	b930      	cbnz	r0, 80038de <_svfiprintf_r+0x32>
 80038d0:	230c      	movs	r3, #12
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038d8:	b01d      	add	sp, #116	@ 0x74
 80038da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038de:	2340      	movs	r3, #64	@ 0x40
 80038e0:	616b      	str	r3, [r5, #20]
 80038e2:	2300      	movs	r3, #0
 80038e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80038e6:	2320      	movs	r3, #32
 80038e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80038ec:	2330      	movs	r3, #48	@ 0x30
 80038ee:	f04f 0901 	mov.w	r9, #1
 80038f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80038f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003a90 <_svfiprintf_r+0x1e4>
 80038fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80038fe:	4623      	mov	r3, r4
 8003900:	469a      	mov	sl, r3
 8003902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003906:	b10a      	cbz	r2, 800390c <_svfiprintf_r+0x60>
 8003908:	2a25      	cmp	r2, #37	@ 0x25
 800390a:	d1f9      	bne.n	8003900 <_svfiprintf_r+0x54>
 800390c:	ebba 0b04 	subs.w	fp, sl, r4
 8003910:	d00b      	beq.n	800392a <_svfiprintf_r+0x7e>
 8003912:	465b      	mov	r3, fp
 8003914:	4622      	mov	r2, r4
 8003916:	4629      	mov	r1, r5
 8003918:	4638      	mov	r0, r7
 800391a:	f7ff ff6b 	bl	80037f4 <__ssputs_r>
 800391e:	3001      	adds	r0, #1
 8003920:	f000 80a7 	beq.w	8003a72 <_svfiprintf_r+0x1c6>
 8003924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003926:	445a      	add	r2, fp
 8003928:	9209      	str	r2, [sp, #36]	@ 0x24
 800392a:	f89a 3000 	ldrb.w	r3, [sl]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 809f 	beq.w	8003a72 <_svfiprintf_r+0x1c6>
 8003934:	2300      	movs	r3, #0
 8003936:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800393a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800393e:	f10a 0a01 	add.w	sl, sl, #1
 8003942:	9304      	str	r3, [sp, #16]
 8003944:	9307      	str	r3, [sp, #28]
 8003946:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800394a:	931a      	str	r3, [sp, #104]	@ 0x68
 800394c:	4654      	mov	r4, sl
 800394e:	2205      	movs	r2, #5
 8003950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003954:	484e      	ldr	r0, [pc, #312]	@ (8003a90 <_svfiprintf_r+0x1e4>)
 8003956:	f000 fa5f 	bl	8003e18 <memchr>
 800395a:	9a04      	ldr	r2, [sp, #16]
 800395c:	b9d8      	cbnz	r0, 8003996 <_svfiprintf_r+0xea>
 800395e:	06d0      	lsls	r0, r2, #27
 8003960:	bf44      	itt	mi
 8003962:	2320      	movmi	r3, #32
 8003964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003968:	0711      	lsls	r1, r2, #28
 800396a:	bf44      	itt	mi
 800396c:	232b      	movmi	r3, #43	@ 0x2b
 800396e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003972:	f89a 3000 	ldrb.w	r3, [sl]
 8003976:	2b2a      	cmp	r3, #42	@ 0x2a
 8003978:	d015      	beq.n	80039a6 <_svfiprintf_r+0xfa>
 800397a:	4654      	mov	r4, sl
 800397c:	2000      	movs	r0, #0
 800397e:	f04f 0c0a 	mov.w	ip, #10
 8003982:	9a07      	ldr	r2, [sp, #28]
 8003984:	4621      	mov	r1, r4
 8003986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800398a:	3b30      	subs	r3, #48	@ 0x30
 800398c:	2b09      	cmp	r3, #9
 800398e:	d94b      	bls.n	8003a28 <_svfiprintf_r+0x17c>
 8003990:	b1b0      	cbz	r0, 80039c0 <_svfiprintf_r+0x114>
 8003992:	9207      	str	r2, [sp, #28]
 8003994:	e014      	b.n	80039c0 <_svfiprintf_r+0x114>
 8003996:	eba0 0308 	sub.w	r3, r0, r8
 800399a:	fa09 f303 	lsl.w	r3, r9, r3
 800399e:	4313      	orrs	r3, r2
 80039a0:	46a2      	mov	sl, r4
 80039a2:	9304      	str	r3, [sp, #16]
 80039a4:	e7d2      	b.n	800394c <_svfiprintf_r+0xa0>
 80039a6:	9b03      	ldr	r3, [sp, #12]
 80039a8:	1d19      	adds	r1, r3, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	9103      	str	r1, [sp, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bfbb      	ittet	lt
 80039b2:	425b      	neglt	r3, r3
 80039b4:	f042 0202 	orrlt.w	r2, r2, #2
 80039b8:	9307      	strge	r3, [sp, #28]
 80039ba:	9307      	strlt	r3, [sp, #28]
 80039bc:	bfb8      	it	lt
 80039be:	9204      	strlt	r2, [sp, #16]
 80039c0:	7823      	ldrb	r3, [r4, #0]
 80039c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80039c4:	d10a      	bne.n	80039dc <_svfiprintf_r+0x130>
 80039c6:	7863      	ldrb	r3, [r4, #1]
 80039c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80039ca:	d132      	bne.n	8003a32 <_svfiprintf_r+0x186>
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	3402      	adds	r4, #2
 80039d0:	1d1a      	adds	r2, r3, #4
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	9203      	str	r2, [sp, #12]
 80039d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80039da:	9305      	str	r3, [sp, #20]
 80039dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003a94 <_svfiprintf_r+0x1e8>
 80039e0:	2203      	movs	r2, #3
 80039e2:	4650      	mov	r0, sl
 80039e4:	7821      	ldrb	r1, [r4, #0]
 80039e6:	f000 fa17 	bl	8003e18 <memchr>
 80039ea:	b138      	cbz	r0, 80039fc <_svfiprintf_r+0x150>
 80039ec:	2240      	movs	r2, #64	@ 0x40
 80039ee:	9b04      	ldr	r3, [sp, #16]
 80039f0:	eba0 000a 	sub.w	r0, r0, sl
 80039f4:	4082      	lsls	r2, r0
 80039f6:	4313      	orrs	r3, r2
 80039f8:	3401      	adds	r4, #1
 80039fa:	9304      	str	r3, [sp, #16]
 80039fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a00:	2206      	movs	r2, #6
 8003a02:	4825      	ldr	r0, [pc, #148]	@ (8003a98 <_svfiprintf_r+0x1ec>)
 8003a04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a08:	f000 fa06 	bl	8003e18 <memchr>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d036      	beq.n	8003a7e <_svfiprintf_r+0x1d2>
 8003a10:	4b22      	ldr	r3, [pc, #136]	@ (8003a9c <_svfiprintf_r+0x1f0>)
 8003a12:	bb1b      	cbnz	r3, 8003a5c <_svfiprintf_r+0x1b0>
 8003a14:	9b03      	ldr	r3, [sp, #12]
 8003a16:	3307      	adds	r3, #7
 8003a18:	f023 0307 	bic.w	r3, r3, #7
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	9303      	str	r3, [sp, #12]
 8003a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a22:	4433      	add	r3, r6
 8003a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a26:	e76a      	b.n	80038fe <_svfiprintf_r+0x52>
 8003a28:	460c      	mov	r4, r1
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a30:	e7a8      	b.n	8003984 <_svfiprintf_r+0xd8>
 8003a32:	2300      	movs	r3, #0
 8003a34:	f04f 0c0a 	mov.w	ip, #10
 8003a38:	4619      	mov	r1, r3
 8003a3a:	3401      	adds	r4, #1
 8003a3c:	9305      	str	r3, [sp, #20]
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a44:	3a30      	subs	r2, #48	@ 0x30
 8003a46:	2a09      	cmp	r2, #9
 8003a48:	d903      	bls.n	8003a52 <_svfiprintf_r+0x1a6>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0c6      	beq.n	80039dc <_svfiprintf_r+0x130>
 8003a4e:	9105      	str	r1, [sp, #20]
 8003a50:	e7c4      	b.n	80039dc <_svfiprintf_r+0x130>
 8003a52:	4604      	mov	r4, r0
 8003a54:	2301      	movs	r3, #1
 8003a56:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a5a:	e7f0      	b.n	8003a3e <_svfiprintf_r+0x192>
 8003a5c:	ab03      	add	r3, sp, #12
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	462a      	mov	r2, r5
 8003a62:	4638      	mov	r0, r7
 8003a64:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa0 <_svfiprintf_r+0x1f4>)
 8003a66:	a904      	add	r1, sp, #16
 8003a68:	f3af 8000 	nop.w
 8003a6c:	1c42      	adds	r2, r0, #1
 8003a6e:	4606      	mov	r6, r0
 8003a70:	d1d6      	bne.n	8003a20 <_svfiprintf_r+0x174>
 8003a72:	89ab      	ldrh	r3, [r5, #12]
 8003a74:	065b      	lsls	r3, r3, #25
 8003a76:	f53f af2d 	bmi.w	80038d4 <_svfiprintf_r+0x28>
 8003a7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a7c:	e72c      	b.n	80038d8 <_svfiprintf_r+0x2c>
 8003a7e:	ab03      	add	r3, sp, #12
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	462a      	mov	r2, r5
 8003a84:	4638      	mov	r0, r7
 8003a86:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <_svfiprintf_r+0x1f4>)
 8003a88:	a904      	add	r1, sp, #16
 8003a8a:	f000 f87d 	bl	8003b88 <_printf_i>
 8003a8e:	e7ed      	b.n	8003a6c <_svfiprintf_r+0x1c0>
 8003a90:	08003f9a 	.word	0x08003f9a
 8003a94:	08003fa0 	.word	0x08003fa0
 8003a98:	08003fa4 	.word	0x08003fa4
 8003a9c:	00000000 	.word	0x00000000
 8003aa0:	080037f5 	.word	0x080037f5

08003aa4 <_printf_common>:
 8003aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa8:	4616      	mov	r6, r2
 8003aaa:	4698      	mov	r8, r3
 8003aac:	688a      	ldr	r2, [r1, #8]
 8003aae:	690b      	ldr	r3, [r1, #16]
 8003ab0:	4607      	mov	r7, r0
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	bfb8      	it	lt
 8003ab6:	4613      	movlt	r3, r2
 8003ab8:	6033      	str	r3, [r6, #0]
 8003aba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003abe:	460c      	mov	r4, r1
 8003ac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ac4:	b10a      	cbz	r2, 8003aca <_printf_common+0x26>
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	6033      	str	r3, [r6, #0]
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	0699      	lsls	r1, r3, #26
 8003ace:	bf42      	ittt	mi
 8003ad0:	6833      	ldrmi	r3, [r6, #0]
 8003ad2:	3302      	addmi	r3, #2
 8003ad4:	6033      	strmi	r3, [r6, #0]
 8003ad6:	6825      	ldr	r5, [r4, #0]
 8003ad8:	f015 0506 	ands.w	r5, r5, #6
 8003adc:	d106      	bne.n	8003aec <_printf_common+0x48>
 8003ade:	f104 0a19 	add.w	sl, r4, #25
 8003ae2:	68e3      	ldr	r3, [r4, #12]
 8003ae4:	6832      	ldr	r2, [r6, #0]
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	42ab      	cmp	r3, r5
 8003aea:	dc2b      	bgt.n	8003b44 <_printf_common+0xa0>
 8003aec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	3b00      	subs	r3, #0
 8003af4:	bf18      	it	ne
 8003af6:	2301      	movne	r3, #1
 8003af8:	0692      	lsls	r2, r2, #26
 8003afa:	d430      	bmi.n	8003b5e <_printf_common+0xba>
 8003afc:	4641      	mov	r1, r8
 8003afe:	4638      	mov	r0, r7
 8003b00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b04:	47c8      	blx	r9
 8003b06:	3001      	adds	r0, #1
 8003b08:	d023      	beq.n	8003b52 <_printf_common+0xae>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	6922      	ldr	r2, [r4, #16]
 8003b0e:	f003 0306 	and.w	r3, r3, #6
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	bf14      	ite	ne
 8003b16:	2500      	movne	r5, #0
 8003b18:	6833      	ldreq	r3, [r6, #0]
 8003b1a:	f04f 0600 	mov.w	r6, #0
 8003b1e:	bf08      	it	eq
 8003b20:	68e5      	ldreq	r5, [r4, #12]
 8003b22:	f104 041a 	add.w	r4, r4, #26
 8003b26:	bf08      	it	eq
 8003b28:	1aed      	subeq	r5, r5, r3
 8003b2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b2e:	bf08      	it	eq
 8003b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b34:	4293      	cmp	r3, r2
 8003b36:	bfc4      	itt	gt
 8003b38:	1a9b      	subgt	r3, r3, r2
 8003b3a:	18ed      	addgt	r5, r5, r3
 8003b3c:	42b5      	cmp	r5, r6
 8003b3e:	d11a      	bne.n	8003b76 <_printf_common+0xd2>
 8003b40:	2000      	movs	r0, #0
 8003b42:	e008      	b.n	8003b56 <_printf_common+0xb2>
 8003b44:	2301      	movs	r3, #1
 8003b46:	4652      	mov	r2, sl
 8003b48:	4641      	mov	r1, r8
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	47c8      	blx	r9
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d103      	bne.n	8003b5a <_printf_common+0xb6>
 8003b52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b5a:	3501      	adds	r5, #1
 8003b5c:	e7c1      	b.n	8003ae2 <_printf_common+0x3e>
 8003b5e:	2030      	movs	r0, #48	@ 0x30
 8003b60:	18e1      	adds	r1, r4, r3
 8003b62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b6c:	4422      	add	r2, r4
 8003b6e:	3302      	adds	r3, #2
 8003b70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b74:	e7c2      	b.n	8003afc <_printf_common+0x58>
 8003b76:	2301      	movs	r3, #1
 8003b78:	4622      	mov	r2, r4
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	47c8      	blx	r9
 8003b80:	3001      	adds	r0, #1
 8003b82:	d0e6      	beq.n	8003b52 <_printf_common+0xae>
 8003b84:	3601      	adds	r6, #1
 8003b86:	e7d9      	b.n	8003b3c <_printf_common+0x98>

08003b88 <_printf_i>:
 8003b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b8c:	7e0f      	ldrb	r7, [r1, #24]
 8003b8e:	4691      	mov	r9, r2
 8003b90:	2f78      	cmp	r7, #120	@ 0x78
 8003b92:	4680      	mov	r8, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	469a      	mov	sl, r3
 8003b98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b9e:	d807      	bhi.n	8003bb0 <_printf_i+0x28>
 8003ba0:	2f62      	cmp	r7, #98	@ 0x62
 8003ba2:	d80a      	bhi.n	8003bba <_printf_i+0x32>
 8003ba4:	2f00      	cmp	r7, #0
 8003ba6:	f000 80d1 	beq.w	8003d4c <_printf_i+0x1c4>
 8003baa:	2f58      	cmp	r7, #88	@ 0x58
 8003bac:	f000 80b8 	beq.w	8003d20 <_printf_i+0x198>
 8003bb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bb8:	e03a      	b.n	8003c30 <_printf_i+0xa8>
 8003bba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bbe:	2b15      	cmp	r3, #21
 8003bc0:	d8f6      	bhi.n	8003bb0 <_printf_i+0x28>
 8003bc2:	a101      	add	r1, pc, #4	@ (adr r1, 8003bc8 <_printf_i+0x40>)
 8003bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bc8:	08003c21 	.word	0x08003c21
 8003bcc:	08003c35 	.word	0x08003c35
 8003bd0:	08003bb1 	.word	0x08003bb1
 8003bd4:	08003bb1 	.word	0x08003bb1
 8003bd8:	08003bb1 	.word	0x08003bb1
 8003bdc:	08003bb1 	.word	0x08003bb1
 8003be0:	08003c35 	.word	0x08003c35
 8003be4:	08003bb1 	.word	0x08003bb1
 8003be8:	08003bb1 	.word	0x08003bb1
 8003bec:	08003bb1 	.word	0x08003bb1
 8003bf0:	08003bb1 	.word	0x08003bb1
 8003bf4:	08003d33 	.word	0x08003d33
 8003bf8:	08003c5f 	.word	0x08003c5f
 8003bfc:	08003ced 	.word	0x08003ced
 8003c00:	08003bb1 	.word	0x08003bb1
 8003c04:	08003bb1 	.word	0x08003bb1
 8003c08:	08003d55 	.word	0x08003d55
 8003c0c:	08003bb1 	.word	0x08003bb1
 8003c10:	08003c5f 	.word	0x08003c5f
 8003c14:	08003bb1 	.word	0x08003bb1
 8003c18:	08003bb1 	.word	0x08003bb1
 8003c1c:	08003cf5 	.word	0x08003cf5
 8003c20:	6833      	ldr	r3, [r6, #0]
 8003c22:	1d1a      	adds	r2, r3, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6032      	str	r2, [r6, #0]
 8003c28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c30:	2301      	movs	r3, #1
 8003c32:	e09c      	b.n	8003d6e <_printf_i+0x1e6>
 8003c34:	6833      	ldr	r3, [r6, #0]
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	1d19      	adds	r1, r3, #4
 8003c3a:	6031      	str	r1, [r6, #0]
 8003c3c:	0606      	lsls	r6, r0, #24
 8003c3e:	d501      	bpl.n	8003c44 <_printf_i+0xbc>
 8003c40:	681d      	ldr	r5, [r3, #0]
 8003c42:	e003      	b.n	8003c4c <_printf_i+0xc4>
 8003c44:	0645      	lsls	r5, r0, #25
 8003c46:	d5fb      	bpl.n	8003c40 <_printf_i+0xb8>
 8003c48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	da03      	bge.n	8003c58 <_printf_i+0xd0>
 8003c50:	232d      	movs	r3, #45	@ 0x2d
 8003c52:	426d      	negs	r5, r5
 8003c54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c58:	230a      	movs	r3, #10
 8003c5a:	4858      	ldr	r0, [pc, #352]	@ (8003dbc <_printf_i+0x234>)
 8003c5c:	e011      	b.n	8003c82 <_printf_i+0xfa>
 8003c5e:	6821      	ldr	r1, [r4, #0]
 8003c60:	6833      	ldr	r3, [r6, #0]
 8003c62:	0608      	lsls	r0, r1, #24
 8003c64:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c68:	d402      	bmi.n	8003c70 <_printf_i+0xe8>
 8003c6a:	0649      	lsls	r1, r1, #25
 8003c6c:	bf48      	it	mi
 8003c6e:	b2ad      	uxthmi	r5, r5
 8003c70:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c72:	6033      	str	r3, [r6, #0]
 8003c74:	bf14      	ite	ne
 8003c76:	230a      	movne	r3, #10
 8003c78:	2308      	moveq	r3, #8
 8003c7a:	4850      	ldr	r0, [pc, #320]	@ (8003dbc <_printf_i+0x234>)
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c82:	6866      	ldr	r6, [r4, #4]
 8003c84:	2e00      	cmp	r6, #0
 8003c86:	60a6      	str	r6, [r4, #8]
 8003c88:	db05      	blt.n	8003c96 <_printf_i+0x10e>
 8003c8a:	6821      	ldr	r1, [r4, #0]
 8003c8c:	432e      	orrs	r6, r5
 8003c8e:	f021 0104 	bic.w	r1, r1, #4
 8003c92:	6021      	str	r1, [r4, #0]
 8003c94:	d04b      	beq.n	8003d2e <_printf_i+0x1a6>
 8003c96:	4616      	mov	r6, r2
 8003c98:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c9c:	fb03 5711 	mls	r7, r3, r1, r5
 8003ca0:	5dc7      	ldrb	r7, [r0, r7]
 8003ca2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ca6:	462f      	mov	r7, r5
 8003ca8:	42bb      	cmp	r3, r7
 8003caa:	460d      	mov	r5, r1
 8003cac:	d9f4      	bls.n	8003c98 <_printf_i+0x110>
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d10b      	bne.n	8003cca <_printf_i+0x142>
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	07df      	lsls	r7, r3, #31
 8003cb6:	d508      	bpl.n	8003cca <_printf_i+0x142>
 8003cb8:	6923      	ldr	r3, [r4, #16]
 8003cba:	6861      	ldr	r1, [r4, #4]
 8003cbc:	4299      	cmp	r1, r3
 8003cbe:	bfde      	ittt	le
 8003cc0:	2330      	movle	r3, #48	@ 0x30
 8003cc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cc6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003cca:	1b92      	subs	r2, r2, r6
 8003ccc:	6122      	str	r2, [r4, #16]
 8003cce:	464b      	mov	r3, r9
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	f8cd a000 	str.w	sl, [sp]
 8003cd8:	aa03      	add	r2, sp, #12
 8003cda:	f7ff fee3 	bl	8003aa4 <_printf_common>
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d14a      	bne.n	8003d78 <_printf_i+0x1f0>
 8003ce2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ce6:	b004      	add	sp, #16
 8003ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	f043 0320 	orr.w	r3, r3, #32
 8003cf2:	6023      	str	r3, [r4, #0]
 8003cf4:	2778      	movs	r7, #120	@ 0x78
 8003cf6:	4832      	ldr	r0, [pc, #200]	@ (8003dc0 <_printf_i+0x238>)
 8003cf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	6831      	ldr	r1, [r6, #0]
 8003d00:	061f      	lsls	r7, r3, #24
 8003d02:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d06:	d402      	bmi.n	8003d0e <_printf_i+0x186>
 8003d08:	065f      	lsls	r7, r3, #25
 8003d0a:	bf48      	it	mi
 8003d0c:	b2ad      	uxthmi	r5, r5
 8003d0e:	6031      	str	r1, [r6, #0]
 8003d10:	07d9      	lsls	r1, r3, #31
 8003d12:	bf44      	itt	mi
 8003d14:	f043 0320 	orrmi.w	r3, r3, #32
 8003d18:	6023      	strmi	r3, [r4, #0]
 8003d1a:	b11d      	cbz	r5, 8003d24 <_printf_i+0x19c>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	e7ad      	b.n	8003c7c <_printf_i+0xf4>
 8003d20:	4826      	ldr	r0, [pc, #152]	@ (8003dbc <_printf_i+0x234>)
 8003d22:	e7e9      	b.n	8003cf8 <_printf_i+0x170>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	f023 0320 	bic.w	r3, r3, #32
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	e7f6      	b.n	8003d1c <_printf_i+0x194>
 8003d2e:	4616      	mov	r6, r2
 8003d30:	e7bd      	b.n	8003cae <_printf_i+0x126>
 8003d32:	6833      	ldr	r3, [r6, #0]
 8003d34:	6825      	ldr	r5, [r4, #0]
 8003d36:	1d18      	adds	r0, r3, #4
 8003d38:	6961      	ldr	r1, [r4, #20]
 8003d3a:	6030      	str	r0, [r6, #0]
 8003d3c:	062e      	lsls	r6, r5, #24
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	d501      	bpl.n	8003d46 <_printf_i+0x1be>
 8003d42:	6019      	str	r1, [r3, #0]
 8003d44:	e002      	b.n	8003d4c <_printf_i+0x1c4>
 8003d46:	0668      	lsls	r0, r5, #25
 8003d48:	d5fb      	bpl.n	8003d42 <_printf_i+0x1ba>
 8003d4a:	8019      	strh	r1, [r3, #0]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	4616      	mov	r6, r2
 8003d50:	6123      	str	r3, [r4, #16]
 8003d52:	e7bc      	b.n	8003cce <_printf_i+0x146>
 8003d54:	6833      	ldr	r3, [r6, #0]
 8003d56:	2100      	movs	r1, #0
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	6032      	str	r2, [r6, #0]
 8003d5c:	681e      	ldr	r6, [r3, #0]
 8003d5e:	6862      	ldr	r2, [r4, #4]
 8003d60:	4630      	mov	r0, r6
 8003d62:	f000 f859 	bl	8003e18 <memchr>
 8003d66:	b108      	cbz	r0, 8003d6c <_printf_i+0x1e4>
 8003d68:	1b80      	subs	r0, r0, r6
 8003d6a:	6060      	str	r0, [r4, #4]
 8003d6c:	6863      	ldr	r3, [r4, #4]
 8003d6e:	6123      	str	r3, [r4, #16]
 8003d70:	2300      	movs	r3, #0
 8003d72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d76:	e7aa      	b.n	8003cce <_printf_i+0x146>
 8003d78:	4632      	mov	r2, r6
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	47d0      	blx	sl
 8003d82:	3001      	adds	r0, #1
 8003d84:	d0ad      	beq.n	8003ce2 <_printf_i+0x15a>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	079b      	lsls	r3, r3, #30
 8003d8a:	d413      	bmi.n	8003db4 <_printf_i+0x22c>
 8003d8c:	68e0      	ldr	r0, [r4, #12]
 8003d8e:	9b03      	ldr	r3, [sp, #12]
 8003d90:	4298      	cmp	r0, r3
 8003d92:	bfb8      	it	lt
 8003d94:	4618      	movlt	r0, r3
 8003d96:	e7a6      	b.n	8003ce6 <_printf_i+0x15e>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	4632      	mov	r2, r6
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	4640      	mov	r0, r8
 8003da0:	47d0      	blx	sl
 8003da2:	3001      	adds	r0, #1
 8003da4:	d09d      	beq.n	8003ce2 <_printf_i+0x15a>
 8003da6:	3501      	adds	r5, #1
 8003da8:	68e3      	ldr	r3, [r4, #12]
 8003daa:	9903      	ldr	r1, [sp, #12]
 8003dac:	1a5b      	subs	r3, r3, r1
 8003dae:	42ab      	cmp	r3, r5
 8003db0:	dcf2      	bgt.n	8003d98 <_printf_i+0x210>
 8003db2:	e7eb      	b.n	8003d8c <_printf_i+0x204>
 8003db4:	2500      	movs	r5, #0
 8003db6:	f104 0619 	add.w	r6, r4, #25
 8003dba:	e7f5      	b.n	8003da8 <_printf_i+0x220>
 8003dbc:	08003fab 	.word	0x08003fab
 8003dc0:	08003fbc 	.word	0x08003fbc

08003dc4 <memmove>:
 8003dc4:	4288      	cmp	r0, r1
 8003dc6:	b510      	push	{r4, lr}
 8003dc8:	eb01 0402 	add.w	r4, r1, r2
 8003dcc:	d902      	bls.n	8003dd4 <memmove+0x10>
 8003dce:	4284      	cmp	r4, r0
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	d807      	bhi.n	8003de4 <memmove+0x20>
 8003dd4:	1e43      	subs	r3, r0, #1
 8003dd6:	42a1      	cmp	r1, r4
 8003dd8:	d008      	beq.n	8003dec <memmove+0x28>
 8003dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003de2:	e7f8      	b.n	8003dd6 <memmove+0x12>
 8003de4:	4601      	mov	r1, r0
 8003de6:	4402      	add	r2, r0
 8003de8:	428a      	cmp	r2, r1
 8003dea:	d100      	bne.n	8003dee <memmove+0x2a>
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003df6:	e7f7      	b.n	8003de8 <memmove+0x24>

08003df8 <_sbrk_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	4d05      	ldr	r5, [pc, #20]	@ (8003e14 <_sbrk_r+0x1c>)
 8003dfe:	4604      	mov	r4, r0
 8003e00:	4608      	mov	r0, r1
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	f7fd fed2 	bl	8001bac <_sbrk>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d102      	bne.n	8003e12 <_sbrk_r+0x1a>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	b103      	cbz	r3, 8003e12 <_sbrk_r+0x1a>
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	20000280 	.word	0x20000280

08003e18 <memchr>:
 8003e18:	4603      	mov	r3, r0
 8003e1a:	b510      	push	{r4, lr}
 8003e1c:	b2c9      	uxtb	r1, r1
 8003e1e:	4402      	add	r2, r0
 8003e20:	4293      	cmp	r3, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	d101      	bne.n	8003e2a <memchr+0x12>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e003      	b.n	8003e32 <memchr+0x1a>
 8003e2a:	7804      	ldrb	r4, [r0, #0]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	428c      	cmp	r4, r1
 8003e30:	d1f6      	bne.n	8003e20 <memchr+0x8>
 8003e32:	bd10      	pop	{r4, pc}

08003e34 <memcpy>:
 8003e34:	440a      	add	r2, r1
 8003e36:	4291      	cmp	r1, r2
 8003e38:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003e3c:	d100      	bne.n	8003e40 <memcpy+0xc>
 8003e3e:	4770      	bx	lr
 8003e40:	b510      	push	{r4, lr}
 8003e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e46:	4291      	cmp	r1, r2
 8003e48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e4c:	d1f9      	bne.n	8003e42 <memcpy+0xe>
 8003e4e:	bd10      	pop	{r4, pc}

08003e50 <_realloc_r>:
 8003e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e54:	4607      	mov	r7, r0
 8003e56:	4614      	mov	r4, r2
 8003e58:	460d      	mov	r5, r1
 8003e5a:	b921      	cbnz	r1, 8003e66 <_realloc_r+0x16>
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e62:	f7ff bc3b 	b.w	80036dc <_malloc_r>
 8003e66:	b92a      	cbnz	r2, 8003e74 <_realloc_r+0x24>
 8003e68:	f7ff fbce 	bl	8003608 <_free_r>
 8003e6c:	4625      	mov	r5, r4
 8003e6e:	4628      	mov	r0, r5
 8003e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e74:	f000 f81a 	bl	8003eac <_malloc_usable_size_r>
 8003e78:	4284      	cmp	r4, r0
 8003e7a:	4606      	mov	r6, r0
 8003e7c:	d802      	bhi.n	8003e84 <_realloc_r+0x34>
 8003e7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e82:	d8f4      	bhi.n	8003e6e <_realloc_r+0x1e>
 8003e84:	4621      	mov	r1, r4
 8003e86:	4638      	mov	r0, r7
 8003e88:	f7ff fc28 	bl	80036dc <_malloc_r>
 8003e8c:	4680      	mov	r8, r0
 8003e8e:	b908      	cbnz	r0, 8003e94 <_realloc_r+0x44>
 8003e90:	4645      	mov	r5, r8
 8003e92:	e7ec      	b.n	8003e6e <_realloc_r+0x1e>
 8003e94:	42b4      	cmp	r4, r6
 8003e96:	4622      	mov	r2, r4
 8003e98:	4629      	mov	r1, r5
 8003e9a:	bf28      	it	cs
 8003e9c:	4632      	movcs	r2, r6
 8003e9e:	f7ff ffc9 	bl	8003e34 <memcpy>
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	f7ff fbaf 	bl	8003608 <_free_r>
 8003eaa:	e7f1      	b.n	8003e90 <_realloc_r+0x40>

08003eac <_malloc_usable_size_r>:
 8003eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eb0:	1f18      	subs	r0, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bfbc      	itt	lt
 8003eb6:	580b      	ldrlt	r3, [r1, r0]
 8003eb8:	18c0      	addlt	r0, r0, r3
 8003eba:	4770      	bx	lr

08003ebc <_init>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	bf00      	nop
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr

08003ec8 <_fini>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr
