
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080027bc  080027bc  000037bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002804  08002804  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002804  08002804  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002804  08002804  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002804  08002804  00003804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002808  08002808  00003808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800280c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002818  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002818  000040ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000964a  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab5  00000000  00000000  0000d67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0000f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070e  00000000  00000000  0000fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176ad  00000000  00000000  0001019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009706  00000000  00000000  0002784b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842cc  00000000  00000000  00030f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b521d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d0  00000000  00000000  000b5260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000b7830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027a4 	.word	0x080027a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080027a4 	.word	0x080027a4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <TMC2209_create>:


// Public functions

TMC2209_HandleTypeDef TMC2209_create(UART_HandleTypeDef * huart, TMC2209_SerialAddress_t serial_address)
{
 8000654:	b4b0      	push	{r4, r5, r7}
 8000656:	b08d      	sub	sp, #52	@ 0x34
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	4613      	mov	r3, r2
 8000660:	71fb      	strb	r3, [r7, #7]
    TMC2209_HandleTypeDef htmc;
    htmc.huart = huart;
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	613b      	str	r3, [r7, #16]
    htmc.serial_address = serial_address;
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	753b      	strb	r3, [r7, #20]
    htmc.cool_step_enabled = false;
 800066a:	2300      	movs	r3, #0
 800066c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    htmc.toff = TOFF_DEFAULT; // Initialize toff
 8000670:	2303      	movs	r3, #3
 8000672:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Initialize register unions to zero
    htmc.global_config.bytes = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
    htmc.driver_current.bytes = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
    htmc.chopper_config.bytes = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
    htmc.pwm_config.bytes = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
    htmc.cool_config.bytes = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	@ 0x28

    return htmc;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	461d      	mov	r5, r3
 800068e:	f107 0410 	add.w	r4, r7, #16
 8000692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000696:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800069a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800069e:	68f8      	ldr	r0, [r7, #12]
 80006a0:	3734      	adds	r7, #52	@ 0x34
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bcb0      	pop	{r4, r5, r7}
 80006a6:	4770      	bx	lr

080006a8 <TMC2209_enable>:


void TMC2209_enable(TMC2209_HandleTypeDef * htmc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  htmc->chopper_config.toff = htmc->toff;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7f1b      	ldrb	r3, [r3, #28]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	7c13      	ldrb	r3, [r2, #16]
 80006be:	f361 0303 	bfi	r3, r1, #0, #4
 80006c2:	7413      	strb	r3, [r2, #16]
  writeStoredChopperConfig(htmc);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 fa31 	bl	8000b2c <writeStoredChopperConfig>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <TMC2209_disable>:

void TMC2209_disable(TMC2209_HandleTypeDef * htmc)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
  htmc->chopper_config.toff = TOFF_DISABLE;
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	7c13      	ldrb	r3, [r2, #16]
 80006de:	f023 030f 	bic.w	r3, r3, #15
 80006e2:	7413      	strb	r3, [r2, #16]
  writeStoredChopperConfig(htmc);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 fa21 	bl	8000b2c <writeStoredChopperConfig>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <TMC2209_setRunCurrent>:
  }
  writeStoredChopperConfig(htmc);
}

void TMC2209_setRunCurrent(TMC2209_HandleTypeDef * htmc, uint8_t percent)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b084      	sub	sp, #16
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	460b      	mov	r3, r1
 80006fc:	70fb      	strb	r3, [r7, #3]
  uint8_t run_current = percentToCurrentSetting(percent);
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f9bc 	bl	8000a7e <percentToCurrentSetting>
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]
  htmc->driver_current.irun = run_current;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	f003 031f 	and.w	r3, r3, #31
 8000710:	b2d9      	uxtb	r1, r3
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	7b53      	ldrb	r3, [r2, #13]
 8000716:	f361 0304 	bfi	r3, r1, #0, #5
 800071a:	7353      	strb	r3, [r2, #13]
  writeStoredDriverCurrent(htmc);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f9d9 	bl	8000ad4 <writeStoredDriverCurrent>
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <TMC2209_disableAutomaticCurrentScaling>:
  htmc->pwm_config.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
  writeStoredPwmConfig(htmc);
}

void TMC2209_disableAutomaticCurrentScaling(TMC2209_HandleTypeDef * htmc)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
  htmc->pwm_config.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	7d93      	ldrb	r3, [r2, #22]
 8000736:	f023 0304 	bic.w	r3, r3, #4
 800073a:	7593      	strb	r3, [r2, #22]
  writeStoredPwmConfig(htmc);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 fa04 	bl	8000b4a <writeStoredPwmConfig>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <TMC2209_disableAutomaticGradientAdaptation>:
  htmc->pwm_config.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
  writeStoredPwmConfig(htmc);
}

void TMC2209_disableAutomaticGradientAdaptation(TMC2209_HandleTypeDef * htmc)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
  htmc->pwm_config.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	7d93      	ldrb	r3, [r2, #22]
 8000756:	f023 0308 	bic.w	r3, r3, #8
 800075a:	7593      	strb	r3, [r2, #22]
  writeStoredPwmConfig(htmc);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f9f4 	bl	8000b4a <writeStoredPwmConfig>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <TMC2209_moveAtVelocity>:
  reply_delay_data.replydelay = reply_delay;
  writeRegister(htmc, ADDRESS_REPLYDELAY, reply_delay_data.bytes);
}

void TMC2209_moveAtVelocity(TMC2209_HandleTypeDef * htmc, int32_t microsteps_per_period)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	6039      	str	r1, [r7, #0]
  writeRegister(htmc, ADDRESS_VACTUAL, microsteps_per_period);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	2122      	movs	r1, #34	@ 0x22
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f000 f944 	bl	8000a08 <writeRegister>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <TMC2209_enableStealthChop>:
{
  writeRegister(htmc, ADDRESS_VACTUAL, VACTUAL_STEP_DIR_INTERFACE);
}

void TMC2209_enableStealthChop(TMC2209_HandleTypeDef * htmc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  htmc->global_config.enable_spread_cycle = 0;
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	7a13      	ldrb	r3, [r2, #8]
 8000794:	f023 0304 	bic.w	r3, r3, #4
 8000798:	7213      	strb	r3, [r2, #8]
  writeStoredGlobalConfig(htmc);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f98b 	bl	8000ab6 <writeStoredGlobalConfig>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <TMC2209_disableStealthChop>:

void TMC2209_disableStealthChop(TMC2209_HandleTypeDef * htmc)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  htmc->global_config.enable_spread_cycle = 1;
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7a13      	ldrb	r3, [r2, #8]
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	7213      	strb	r3, [r2, #8]
  writeStoredGlobalConfig(htmc);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f000 f97b 	bl	8000ab6 <writeStoredGlobalConfig>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <TMC2209_clearDriveError>:
  global_status_union.global_status.reset = 1;
  writeRegister(htmc, ADDRESS_GSTAT, global_status_union.bytes);
}

void TMC2209_clearDriveError(TMC2209_HandleTypeDef * htmc)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  TMC2209_GlobalStatusUnion_t global_status_union;
  global_status_union.bytes = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  global_status_union.global_status.drv_err = 1;
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	f043 0302 	orr.w	r3, r3, #2
 80007da:	733b      	strb	r3, [r7, #12]
  writeRegister(htmc, ADDRESS_GSTAT, global_status_union.bytes);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	461a      	mov	r2, r3
 80007e0:	2101      	movs	r1, #1
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 f910 	bl	8000a08 <writeRegister>
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <serialWrite>:
}

// private helper functions

static HAL_StatusTypeDef serialWrite(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	4613      	mov	r3, r2
 80007fc:	80fb      	strh	r3, [r7, #6]
  if (huart != NULL)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00a      	beq.n	800081a <serialWrite+0x2a>
    // or using a specific UART mode if available.
    // For a generic HAL approach, we'll assume the UART is configured for half-duplex
    // or that the DE pin is handled externally or by the HAL configuration.
    // If using a DE pin, you would assert it here before transmitting.

    HAL_StatusTypeDef status = HAL_UART_Transmit(huart, data, size, HAL_MAX_DELAY);
 8000804:	88fa      	ldrh	r2, [r7, #6]
 8000806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800080a:	68b9      	ldr	r1, [r7, #8]
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f001 fdc9 	bl	80023a4 <HAL_UART_Transmit>
 8000812:	4603      	mov	r3, r0
 8000814:	75fb      	strb	r3, [r7, #23]

    // If using a DE pin, you would deassert it here after transmitting.

    return status;
 8000816:	7dfb      	ldrb	r3, [r7, #23]
 8000818:	e000      	b.n	800081c <serialWrite+0x2c>
  }
  return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <minimizeMotorCurrent>:

  return global_config.pdn_disable;
}

static void minimizeMotorCurrent(TMC2209_HandleTypeDef * htmc)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  htmc->driver_current.irun = CURRENT_SETTING_MIN;
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	7b53      	ldrb	r3, [r2, #13]
 8000830:	f023 031f 	bic.w	r3, r3, #31
 8000834:	7353      	strb	r3, [r2, #13]
  htmc->driver_current.ihold = CURRENT_SETTING_MIN;
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	7b13      	ldrb	r3, [r2, #12]
 800083a:	f023 031f 	bic.w	r3, r3, #31
 800083e:	7313      	strb	r3, [r2, #12]
  writeStoredDriverCurrent(htmc);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f947 	bl	8000ad4 <writeStoredDriverCurrent>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <reverseData>:

static uint32_t reverseData(uint32_t data)
{
 800084e:	b480      	push	{r7}
 8000850:	b085      	sub	sp, #20
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
  uint32_t reversed_data = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  uint8_t right_shift;
  uint8_t left_shift;
  for (uint8_t i=0; i<DATA_SIZE; ++i)
 800085a:	2300      	movs	r3, #0
 800085c:	72fb      	strb	r3, [r7, #11]
 800085e:	e016      	b.n	800088e <reverseData+0x40>
  {
    right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8000860:	7afb      	ldrb	r3, [r7, #11]
 8000862:	f1c3 0303 	rsb	r3, r3, #3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	72bb      	strb	r3, [r7, #10]
    left_shift = i * BITS_PER_BYTE;
 800086c:	7afb      	ldrb	r3, [r7, #11]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	727b      	strb	r3, [r7, #9]
    reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8000872:	7abb      	ldrb	r3, [r7, #10]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	fa22 f303 	lsr.w	r3, r2, r3
 800087a:	b2da      	uxtb	r2, r3
 800087c:	7a7b      	ldrb	r3, [r7, #9]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	4313      	orrs	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
  for (uint8_t i=0; i<DATA_SIZE; ++i)
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	3301      	adds	r3, #1
 800088c:	72fb      	strb	r3, [r7, #11]
 800088e:	7afb      	ldrb	r3, [r7, #11]
 8000890:	2b03      	cmp	r3, #3
 8000892:	d9e5      	bls.n	8000860 <reverseData+0x12>
  }
  return reversed_data;
 8000894:	68fb      	ldr	r3, [r7, #12]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <calculateCrc>:

static uint8_t calculateCrc(uint64_t datagram_bytes, uint8_t datagram_size)
{
 80008a0:	b4f0      	push	{r4, r5, r6, r7}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80008aa:	4613      	mov	r3, r2
 80008ac:	71fb      	strb	r3, [r7, #7]
  uint8_t crc = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	75fb      	strb	r3, [r7, #23]
  uint8_t byte;
  for (uint8_t i=0; i<(datagram_size - 1); ++i)
 80008b2:	2300      	movs	r3, #0
 80008b4:	757b      	strb	r3, [r7, #21]
 80008b6:	e037      	b.n	8000928 <calculateCrc+0x88>
  {
    byte = (datagram_bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80008b8:	7d7b      	ldrb	r3, [r7, #21]
 80008ba:	00d9      	lsls	r1, r3, #3
 80008bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80008c0:	f1c1 0620 	rsb	r6, r1, #32
 80008c4:	f1a1 0020 	sub.w	r0, r1, #32
 80008c8:	fa22 f401 	lsr.w	r4, r2, r1
 80008cc:	fa03 f606 	lsl.w	r6, r3, r6
 80008d0:	4334      	orrs	r4, r6
 80008d2:	fa23 f000 	lsr.w	r0, r3, r0
 80008d6:	4304      	orrs	r4, r0
 80008d8:	fa23 f501 	lsr.w	r5, r3, r1
 80008dc:	4623      	mov	r3, r4
 80008de:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j=0; j<BITS_PER_BYTE; ++j)
 80008e0:	2300      	movs	r3, #0
 80008e2:	753b      	strb	r3, [r7, #20]
 80008e4:	e01a      	b.n	800091c <calculateCrc+0x7c>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
 80008e8:	09db      	lsrs	r3, r3, #7
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	461a      	mov	r2, r3
 80008ee:	7dbb      	ldrb	r3, [r7, #22]
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d008      	beq.n	800090a <calculateCrc+0x6a>
      {
        crc = (crc << 1) ^ 0x07;
 80008f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	f083 0307 	eor.w	r3, r3, #7
 8000904:	b25b      	sxtb	r3, r3
 8000906:	75fb      	strb	r3, [r7, #23]
 8000908:	e002      	b.n	8000910 <calculateCrc+0x70>
      }
      else
      {
        crc = crc << 1;
 800090a:	7dfb      	ldrb	r3, [r7, #23]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	75fb      	strb	r3, [r7, #23]
      }
      byte = byte >> 1;
 8000910:	7dbb      	ldrb	r3, [r7, #22]
 8000912:	085b      	lsrs	r3, r3, #1
 8000914:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j=0; j<BITS_PER_BYTE; ++j)
 8000916:	7d3b      	ldrb	r3, [r7, #20]
 8000918:	3301      	adds	r3, #1
 800091a:	753b      	strb	r3, [r7, #20]
 800091c:	7d3b      	ldrb	r3, [r7, #20]
 800091e:	2b07      	cmp	r3, #7
 8000920:	d9e1      	bls.n	80008e6 <calculateCrc+0x46>
  for (uint8_t i=0; i<(datagram_size - 1); ++i)
 8000922:	7d7b      	ldrb	r3, [r7, #21]
 8000924:	3301      	adds	r3, #1
 8000926:	757b      	strb	r3, [r7, #21]
 8000928:	7d7a      	ldrb	r2, [r7, #21]
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3b01      	subs	r3, #1
 800092e:	429a      	cmp	r2, r3
 8000930:	dbc2      	blt.n	80008b8 <calculateCrc+0x18>
    }
  }
  return crc;
 8000932:	7dfb      	ldrb	r3, [r7, #23]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bcf0      	pop	{r4, r5, r6, r7}
 800093c:	4770      	bx	lr

0800093e <sendDatagramUnidirectional>:

static void sendDatagramUnidirectional(UART_HandleTypeDef *huart, uint64_t datagram_bytes, uint8_t datagram_size)
{
 800093e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000942:	b089      	sub	sp, #36	@ 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	e9c7 2300 	strd	r2, r3, [r7]
 800094c:	466b      	mov	r3, sp
 800094e:	60bb      	str	r3, [r7, #8]
  uint8_t byte;
  uint8_t data_buffer[datagram_size];
 8000950:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8000954:	460b      	mov	r3, r1
 8000956:	3b01      	subs	r3, #1
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	b2cb      	uxtb	r3, r1
 800095c:	2200      	movs	r2, #0
 800095e:	469a      	mov	sl, r3
 8000960:	4693      	mov	fp, r2
 8000962:	f04f 0200 	mov.w	r2, #0
 8000966:	f04f 0300 	mov.w	r3, #0
 800096a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800096e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000972:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000976:	b2cb      	uxtb	r3, r1
 8000978:	2200      	movs	r2, #0
 800097a:	4698      	mov	r8, r3
 800097c:	4691      	mov	r9, r2
 800097e:	f04f 0200 	mov.w	r2, #0
 8000982:	f04f 0300 	mov.w	r3, #0
 8000986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800098a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800098e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000992:	460b      	mov	r3, r1
 8000994:	3307      	adds	r3, #7
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	ebad 0d03 	sub.w	sp, sp, r3
 800099e:	466b      	mov	r3, sp
 80009a0:	3300      	adds	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  for (uint8_t i=0; i<datagram_size; ++i)
 80009a4:	2300      	movs	r3, #0
 80009a6:	77fb      	strb	r3, [r7, #31]
 80009a8:	e01a      	b.n	80009e0 <sendDatagramUnidirectional+0xa2>
  {
    byte = (datagram_bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80009aa:	7ffb      	ldrb	r3, [r7, #31]
 80009ac:	00d9      	lsls	r1, r3, #3
 80009ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009b2:	f1c1 0620 	rsb	r6, r1, #32
 80009b6:	f1a1 0020 	sub.w	r0, r1, #32
 80009ba:	fa22 f401 	lsr.w	r4, r2, r1
 80009be:	fa03 f606 	lsl.w	r6, r3, r6
 80009c2:	4334      	orrs	r4, r6
 80009c4:	fa23 f000 	lsr.w	r0, r3, r0
 80009c8:	4304      	orrs	r4, r0
 80009ca:	fa23 f501 	lsr.w	r5, r3, r1
 80009ce:	4623      	mov	r3, r4
 80009d0:	74fb      	strb	r3, [r7, #19]
    data_buffer[i] = byte;
 80009d2:	7ffb      	ldrb	r3, [r7, #31]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	7cf9      	ldrb	r1, [r7, #19]
 80009d8:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i=0; i<datagram_size; ++i)
 80009da:	7ffb      	ldrb	r3, [r7, #31]
 80009dc:	3301      	adds	r3, #1
 80009de:	77fb      	strb	r3, [r7, #31]
 80009e0:	7ffa      	ldrb	r2, [r7, #31]
 80009e2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d3df      	bcc.n	80009aa <sendDatagramUnidirectional+0x6c>
  }
  serialWrite(huart, data_buffer, datagram_size);
 80009ea:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	461a      	mov	r2, r3
 80009f2:	6979      	ldr	r1, [r7, #20]
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff fefb 	bl	80007f0 <serialWrite>
 80009fa:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 80009fe:	bf00      	nop
 8000a00:	3724      	adds	r7, #36	@ 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000a08 <writeRegister>:
  // the reply directly.
}

static void writeRegister(TMC2209_HandleTypeDef *htmc, uint8_t register_address,
  uint32_t data)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	460b      	mov	r3, r1
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	72fb      	strb	r3, [r7, #11]
  TMC2209_WriteReadReplyDatagram_t write_datagram;
  write_datagram.bytes = 0;
 8000a16:	f04f 0200 	mov.w	r2, #0
 8000a1a:	f04f 0300 	mov.w	r3, #0
 8000a1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  write_datagram.sync = SYNC;
 8000a22:	7c3b      	ldrb	r3, [r7, #16]
 8000a24:	2205      	movs	r2, #5
 8000a26:	f362 0303 	bfi	r3, r2, #0, #4
 8000a2a:	743b      	strb	r3, [r7, #16]
  write_datagram.serial_address = htmc->serial_address;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	791b      	ldrb	r3, [r3, #4]
 8000a30:	747b      	strb	r3, [r7, #17]
  write_datagram.register_address = register_address;
 8000a32:	7afb      	ldrb	r3, [r7, #11]
 8000a34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	7cbb      	ldrb	r3, [r7, #18]
 8000a3c:	f362 0306 	bfi	r3, r2, #0, #7
 8000a40:	74bb      	strb	r3, [r7, #18]
  write_datagram.rw = RW_WRITE;
 8000a42:	7cbb      	ldrb	r3, [r7, #18]
 8000a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a48:	74bb      	strb	r3, [r7, #18]
  write_datagram.data = reverseData(data);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff feff 	bl	800084e <reverseData>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f8c7 3013 	str.w	r3, [r7, #19]
  write_datagram.crc = calculateCrc(write_datagram.bytes, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8000a56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	f7ff ff20 	bl	80008a0 <calculateCrc>
 8000a60:	4603      	mov	r3, r0
 8000a62:	75fb      	strb	r3, [r7, #23]

  sendDatagramUnidirectional(htmc->huart, write_datagram.bytes, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6819      	ldr	r1, [r3, #0]
 8000a68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	9000      	str	r0, [sp, #0]
 8000a70:	4608      	mov	r0, r1
 8000a72:	f7ff ff64 	bl	800093e <sendDatagramUnidirectional>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <percentToCurrentSetting>:

  return 0; // Return 0 if all retries fail
}

static uint8_t percentToCurrentSetting(uint8_t percent)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af02      	add	r7, sp, #8
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
  uint8_t constrained_percent = constrain_uint32(percent,
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2264      	movs	r2, #100	@ 0x64
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f86a 	bl	8000b68 <constrain_uint32>
 8000a94:	4603      	mov	r3, r0
 8000a96:	73fb      	strb	r3, [r7, #15]
    PERCENT_MIN,
    PERCENT_MAX);
  uint8_t current_setting = map_uint8(constrained_percent,
 8000a98:	7bf8      	ldrb	r0, [r7, #15]
 8000a9a:	231f      	movs	r3, #31
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2264      	movs	r2, #100	@ 0x64
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f000 f876 	bl	8000b94 <map_uint8>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	73bb      	strb	r3, [r7, #14]
    PERCENT_MIN,
    PERCENT_MAX,
    CURRENT_SETTING_MIN,
    CURRENT_SETTING_MAX);
  return current_setting;
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <writeStoredGlobalConfig>:
    PERCENT_MAX);
  return percent;
}

static void writeStoredGlobalConfig(TMC2209_HandleTypeDef *htmc)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_GCONF, htmc->global_config.bytes);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ff9e 	bl	8000a08 <writeRegister>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <writeStoredDriverCurrent>:
{
  return readRegister(htmc, ADDRESS_GCONF);
}

static void writeStoredDriverCurrent(TMC2209_HandleTypeDef *htmc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_IHOLD_IRUN, htmc->driver_current.bytes);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff8f 	bl	8000a08 <writeRegister>

  if (htmc->driver_current.irun >= SEIMIN_UPPER_CURRENT_LIMIT)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7b5b      	ldrb	r3, [r3, #13]
 8000aee:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b13      	cmp	r3, #19
 8000af6:	d905      	bls.n	8000b04 <writeStoredDriverCurrent+0x30>
  {
    htmc->cool_config.seimin = SEIMIN_UPPER_SETTING;
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	7e53      	ldrb	r3, [r2, #25]
 8000afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b00:	7653      	strb	r3, [r2, #25]
 8000b02:	e004      	b.n	8000b0e <writeStoredDriverCurrent+0x3a>
  }
  else
  {
    htmc->cool_config.seimin = SEIMIN_LOWER_SETTING;
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	7e53      	ldrb	r3, [r2, #25]
 8000b08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b0c:	7653      	strb	r3, [r2, #25]
  }
  if (htmc->cool_step_enabled)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7f5b      	ldrb	r3, [r3, #29]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <writeStoredDriverCurrent+0x50>
  {
    writeRegister(htmc, ADDRESS_COOLCONF, htmc->cool_config.bytes);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2142      	movs	r1, #66	@ 0x42
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff72 	bl	8000a08 <writeRegister>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <writeStoredChopperConfig>:

static void writeStoredChopperConfig(TMC2209_HandleTypeDef *htmc)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_CHOPCONF, htmc->chopper_config.bytes);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	216c      	movs	r1, #108	@ 0x6c
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff63 	bl	8000a08 <writeRegister>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <writeStoredPwmConfig>:
{
  return readRegister(htmc, ADDRESS_CHOPCONF);
}

static void writeStoredPwmConfig(TMC2209_HandleTypeDef *htmc)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_PWMCONF, htmc->pwm_config.bytes);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	461a      	mov	r2, r3
 8000b58:	2170      	movs	r1, #112	@ 0x70
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff54 	bl	8000a08 <writeRegister>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <constrain_uint32>:
{
  return readRegister(htmc, ADDRESS_PWMCONF);
}

static uint32_t constrain_uint32(uint32_t value, uint32_t low, uint32_t high)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  return ((value)<(low)?(low):((value)>(high)?(high):(value)));
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d305      	bcc.n	8000b88 <constrain_uint32+0x20>
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4293      	cmp	r3, r2
 8000b82:	bf28      	it	cs
 8000b84:	4613      	movcs	r3, r2
 8000b86:	e000      	b.n	8000b8a <constrain_uint32+0x22>
 8000b88:	68bb      	ldr	r3, [r7, #8]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <map_uint8>:

static uint8_t map_uint8(uint8_t x, uint8_t in_min, uint8_t in_max, uint8_t out_min, uint8_t out_max)
{
 8000b94:	b490      	push	{r4, r7}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4623      	mov	r3, r4
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71bb      	strb	r3, [r7, #6]
 8000baa:	460b      	mov	r3, r1
 8000bac:	717b      	strb	r3, [r7, #5]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	713b      	strb	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	7c39      	ldrb	r1, [r7, #16]
 8000bba:	793a      	ldrb	r2, [r7, #4]
 8000bbc:	1a8a      	subs	r2, r1, r2
 8000bbe:	fb03 f202 	mul.w	r2, r3, r2
 8000bc2:	7979      	ldrb	r1, [r7, #5]
 8000bc4:	79bb      	ldrb	r3, [r7, #6]
 8000bc6:	1acb      	subs	r3, r1, r3
 8000bc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	793b      	ldrb	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	b2db      	uxtb	r3, r3
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc90      	pop	{r4, r7}
 8000bdc:	4770      	bx	lr
	...

08000be0 <TMC2209_init>:


void TMC2209_init(TMC2209_HandleTypeDef * htmc)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    // HAL_UART_Init(htmc->huart); // Assuming UART is already initialized by CubeMX

    // Initialize the driver
    htmc->serial_address = htmc->serial_address; // Redundant, but keeps the structure
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	791a      	ldrb	r2, [r3, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	711a      	strb	r2, [r3, #4]

    // Set operation mode to serial
    htmc->global_config.bytes = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
    htmc->global_config.i_scale_analog = 0;
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	7a13      	ldrb	r3, [r2, #8]
 8000bfa:	f023 0301 	bic.w	r3, r3, #1
 8000bfe:	7213      	strb	r3, [r2, #8]
    htmc->global_config.pdn_disable = 1;
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	7a13      	ldrb	r3, [r2, #8]
 8000c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c08:	7213      	strb	r3, [r2, #8]
    htmc->global_config.mstep_reg_select = 1;
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	7a13      	ldrb	r3, [r2, #8]
 8000c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c12:	7213      	strb	r3, [r2, #8]
    htmc->global_config.multistep_filt = 1;
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	7a53      	ldrb	r3, [r2, #9]
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	7253      	strb	r3, [r2, #9]
    writeStoredGlobalConfig(htmc);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ff49 	bl	8000ab6 <writeStoredGlobalConfig>

    // Set registers to defaults
    htmc->driver_current.bytes = 0;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
    htmc->driver_current.ihold = IHOLD_DEFAULT;
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	7b13      	ldrb	r3, [r2, #12]
 8000c2e:	2110      	movs	r1, #16
 8000c30:	f361 0304 	bfi	r3, r1, #0, #5
 8000c34:	7313      	strb	r3, [r2, #12]
    htmc->driver_current.irun = IRUN_DEFAULT;
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	7b53      	ldrb	r3, [r2, #13]
 8000c3a:	f043 031f 	orr.w	r3, r3, #31
 8000c3e:	7353      	strb	r3, [r2, #13]
    htmc->driver_current.iholddelay = IHOLDDELAY_DEFAULT;
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	7b93      	ldrb	r3, [r2, #14]
 8000c44:	2101      	movs	r1, #1
 8000c46:	f361 0303 	bfi	r3, r1, #0, #4
 8000c4a:	7393      	strb	r3, [r2, #14]
    writeRegister(htmc, ADDRESS_IHOLD_IRUN, htmc->driver_current.bytes);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	461a      	mov	r2, r3
 8000c52:	2110      	movs	r1, #16
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fed7 	bl	8000a08 <writeRegister>

    htmc->chopper_config.bytes = CHOPPER_CONFIG_DEFAULT;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a32      	ldr	r2, [pc, #200]	@ (8000d28 <TMC2209_init+0x148>)
 8000c5e:	611a      	str	r2, [r3, #16]
    htmc->chopper_config.tbl = TBL_DEFAULT;
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	6913      	ldr	r3, [r2, #16]
 8000c64:	2102      	movs	r1, #2
 8000c66:	f361 33d0 	bfi	r3, r1, #15, #2
 8000c6a:	6113      	str	r3, [r2, #16]
    htmc->chopper_config.hend = HEND_DEFAULT;
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	8a13      	ldrh	r3, [r2, #16]
 8000c70:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
 8000c74:	8213      	strh	r3, [r2, #16]
    htmc->chopper_config.hstart = HSTART_DEFAULT;
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	7c13      	ldrb	r3, [r2, #16]
 8000c7a:	2105      	movs	r1, #5
 8000c7c:	f361 1306 	bfi	r3, r1, #4, #3
 8000c80:	7413      	strb	r3, [r2, #16]
    htmc->chopper_config.toff = TOFF_DEFAULT;
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	7c13      	ldrb	r3, [r2, #16]
 8000c86:	2103      	movs	r1, #3
 8000c88:	f361 0303 	bfi	r3, r1, #0, #4
 8000c8c:	7413      	strb	r3, [r2, #16]
    writeRegister(htmc, ADDRESS_CHOPCONF, htmc->chopper_config.bytes);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	461a      	mov	r2, r3
 8000c94:	216c      	movs	r1, #108	@ 0x6c
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff feb6 	bl	8000a08 <writeRegister>

    htmc->pwm_config.bytes = PWM_CONFIG_DEFAULT;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a23      	ldr	r2, [pc, #140]	@ (8000d2c <TMC2209_init+0x14c>)
 8000ca0:	615a      	str	r2, [r3, #20]
    writeRegister(htmc, ADDRESS_PWMCONF, htmc->pwm_config.bytes);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	2170      	movs	r1, #112	@ 0x70
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff feac 	bl	8000a08 <writeRegister>

    htmc->cool_config.bytes = COOLCONF_DEFAULT;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
    writeRegister(htmc, ADDRESS_COOLCONF, htmc->cool_config.bytes);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2142      	movs	r1, #66	@ 0x42
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fea2 	bl	8000a08 <writeRegister>

    writeRegister(htmc, ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8000cc4:	2214      	movs	r2, #20
 8000cc6:	2111      	movs	r1, #17
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff fe9d 	bl	8000a08 <writeRegister>
    writeRegister(htmc, ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2113      	movs	r1, #19
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fe98 	bl	8000a08 <writeRegister>
    writeRegister(htmc, ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2122      	movs	r1, #34	@ 0x22
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff fe93 	bl	8000a08 <writeRegister>
    writeRegister(htmc, ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2114      	movs	r1, #20
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fe8e 	bl	8000a08 <writeRegister>
    writeRegister(htmc, ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2140      	movs	r1, #64	@ 0x40
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fe89 	bl	8000a08 <writeRegister>
    writeRegister(htmc, ADDRESS_COOLCONF, COOLCONF_DEFAULT); // Written twice in original, keeping for now
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2142      	movs	r1, #66	@ 0x42
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fe84 	bl	8000a08 <writeRegister>

    TMC2209_clearDriveError(htmc);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fd61 	bl	80007c8 <TMC2209_clearDriveError>
    minimizeMotorCurrent(htmc);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fd8c 	bl	8000824 <minimizeMotorCurrent>
    TMC2209_disable(htmc);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fce0 	bl	80006d2 <TMC2209_disable>
    TMC2209_disableAutomaticCurrentScaling(htmc);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff fd09 	bl	800072a <TMC2209_disableAutomaticCurrentScaling>
    TMC2209_disableAutomaticGradientAdaptation(htmc);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff fd16 	bl	800074a <TMC2209_disableAutomaticGradientAdaptation>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	10000053 	.word	0x10000053
 8000d2c:	c10d0024 	.word	0xc10d0024

08000d30 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_GPIO_Init+0xa0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a21      	ldr	r2, [pc, #132]	@ (8000dd0 <MX_GPIO_Init+0xa0>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_GPIO_Init+0xa0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_GPIO_Init+0xa0>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd0 <MX_GPIO_Init+0xa0>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_GPIO_Init+0xa0>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0308 	and.w	r3, r3, #8
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000d7a:	4816      	ldr	r0, [pc, #88]	@ (8000dd4 <MX_GPIO_Init+0xa4>)
 8000d7c:	f000 fe9a 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000d86:	4814      	ldr	r0, [pc, #80]	@ (8000dd8 <MX_GPIO_Init+0xa8>)
 8000d88:	f000 fe94 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 8000d8c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	4619      	mov	r1, r3
 8000da4:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <MX_GPIO_Init+0xa4>)
 8000da6:	f000 fd01 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin;
 8000daa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2302      	movs	r3, #2
 8000dba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <MX_GPIO_Init+0xa8>)
 8000dc4:	f000 fcf2 	bl	80017ac <HAL_GPIO_Init>

}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	40010800 	.word	0x40010800

08000ddc <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000dea:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000dee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 8000df2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000df6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 8000df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dfa:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000dfc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000dfe:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f80e 	bl	8000e32 <Lcd_init>

	return lcd;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	461d      	mov	r5, r3
 8000e1a:	f107 0410 	add.w	r4, r7, #16
 8000e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e26:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000e2a:	68f8      	ldr	r0, [r7, #12]
 8000e2c:	3728      	adds	r7, #40	@ 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bdb0      	pop	{r4, r5, r7, pc}

08000e32 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7d9b      	ldrb	r3, [r3, #22]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10c      	bne.n	8000e5c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000e42:	2133      	movs	r1, #51	@ 0x33
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f837 	bl	8000eb8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000e4a:	2132      	movs	r1, #50	@ 0x32
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f833 	bl	8000eb8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000e52:	2128      	movs	r1, #40	@ 0x28
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f82f 	bl	8000eb8 <lcd_write_command>
 8000e5a:	e003      	b.n	8000e64 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000e5c:	2138      	movs	r1, #56	@ 0x38
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f82a 	bl	8000eb8 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000e64:	2101      	movs	r1, #1
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 f826 	bl	8000eb8 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000e6c:	210c      	movs	r1, #12
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 f822 	bl	8000eb8 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000e74:	2106      	movs	r1, #6
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f81e 	bl	8000eb8 <lcd_write_command>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
 8000e90:	4613      	mov	r3, r2
 8000e92:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <Lcd_cursor+0x30>)
 8000e98:	5cd2      	ldrb	r2, [r2, r3]
 8000e9a:	78bb      	ldrb	r3, [r7, #2]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	3b80      	subs	r3, #128	@ 0x80
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 f806 	bl	8000eb8 <lcd_write_command>
	#endif
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	080027d4 	.word	0x080027d4

08000eb8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6898      	ldr	r0, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	899b      	ldrh	r3, [r3, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f000 fdf0 	bl	8001ab4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7d9b      	ldrb	r3, [r3, #22]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d111      	bne.n	8000f00 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 f814 	bl	8000f14 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 f80b 	bl	8000f14 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000efe:	e005      	b.n	8000f0c <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	2208      	movs	r2, #8
 8000f04:	4619      	mov	r1, r3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f804 	bl	8000f14 <lcd_write>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
 8000f20:	4613      	mov	r3, r2
 8000f22:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e019      	b.n	8000f5e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	8819      	ldrh	r1, [r3, #0]
 8000f42:	78fa      	ldrb	r2, [r7, #3]
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	fa42 f303 	asr.w	r3, r2, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	f000 fdae 	bl	8001ab4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	78bb      	ldrb	r3, [r7, #2]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3e1      	bcc.n	8000f2a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6918      	ldr	r0, [r3, #16]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	8a9b      	ldrh	r3, [r3, #20]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4619      	mov	r1, r3
 8000f72:	f000 fd9f 	bl	8001ab4 <HAL_GPIO_WritePin>
	DELAY(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f000 fb10 	bl	800159c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6918      	ldr	r0, [r3, #16]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	8a9b      	ldrh	r3, [r3, #20]
 8000f84:	2200      	movs	r2, #0
 8000f86:	4619      	mov	r1, r3
 8000f88:	f000 fd94 	bl	8001ab4 <HAL_GPIO_WritePin>
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b5b0      	push	{r4, r5, r7, lr}
 8000f96:	b0a2      	sub	sp, #136	@ 0x88
 8000f98:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9a:	f000 fa9d 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9e:	f000 f95b 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa2:	f7ff fec5 	bl	8000d30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa6:	f000 f9fd 	bl	80013a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  Lcd_PortType ports[] = {
 8000faa:	4ba4      	ldr	r3, [pc, #656]	@ (800123c <main+0x2a8>)
 8000fac:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    GPIOB, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin};
 8000fb6:	4aa2      	ldr	r2, [pc, #648]	@ (8001240 <main+0x2ac>)
 8000fb8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc0:	e883 0003 	stmia.w	r3, {r0, r1}


  lcd = Lcd_create(ports, pins, GPIOA, LCD_RS_Pin, GPIOA, LCD_EN_Pin, LCD_4_BIT_MODE);
 8000fc4:	4c9f      	ldr	r4, [pc, #636]	@ (8001244 <main+0x2b0>)
 8000fc6:	f107 0020 	add.w	r0, r7, #32
 8000fca:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000fce:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	9303      	str	r3, [sp, #12]
 8000fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	4b9a      	ldr	r3, [pc, #616]	@ (8001248 <main+0x2b4>)
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	4b98      	ldr	r3, [pc, #608]	@ (8001248 <main+0x2b4>)
 8000fe8:	f7ff fef8 	bl	8000ddc <Lcd_create>
 8000fec:	4625      	mov	r5, r4
 8000fee:	f107 0420 	add.w	r4, r7, #32
 8000ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ffa:	e885 0003 	stmia.w	r5, {r0, r1}

  // Lcd_string(&lcd, "Hello World");
  
  Lcd_cursor(&lcd, 1,0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2101      	movs	r1, #1
 8001002:	4890      	ldr	r0, [pc, #576]	@ (8001244 <main+0x2b0>)
 8001004:	f7ff ff3e 	bl	8000e84 <Lcd_cursor>
  // const char* hello = "Hello World\0";


  // HAL_UART_Transmit(&huart2, hello, sizeof(hello), 32767);

  htmc = TMC2209_create(&huart2, SERIAL_ADDRESS_0); // Assuming SERIAL_ADDRESS_0 is the desired address
 8001008:	4c90      	ldr	r4, [pc, #576]	@ (800124c <main+0x2b8>)
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	4990      	ldr	r1, [pc, #576]	@ (8001250 <main+0x2bc>)
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fb1f 	bl	8000654 <TMC2209_create>
 8001016:	4625      	mov	r5, r4
 8001018:	463c      	mov	r4, r7
 800101a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800101e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001022:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  TMC2209_init(&htmc);
 8001026:	4889      	ldr	r0, [pc, #548]	@ (800124c <main+0x2b8>)
 8001028:	f7ff fdda 	bl	8000be0 <TMC2209_init>

  
  TMC2209_setRunCurrent(&htmc, 10);
 800102c:	210a      	movs	r1, #10
 800102e:	4887      	ldr	r0, [pc, #540]	@ (800124c <main+0x2b8>)
 8001030:	f7ff fb5f 	bl	80006f2 <TMC2209_setRunCurrent>
  // TMC2209_setStallGuardThreshold(&htmc, 20);
  TMC2209_enable(&htmc);
 8001034:	4885      	ldr	r0, [pc, #532]	@ (800124c <main+0x2b8>)
 8001036:	f7ff fb37 	bl	80006a8 <TMC2209_enable>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t accel = 100;
 800103a:	2364      	movs	r3, #100	@ 0x64
 800103c:	663b      	str	r3, [r7, #96]	@ 0x60
  uint32_t distance = 100;
 800103e:	2364      	movs	r3, #100	@ 0x64
 8001040:	65fb      	str	r3, [r7, #92]	@ 0x5c
  float speed = 5000;
 8001042:	4b84      	ldr	r3, [pc, #528]	@ (8001254 <main+0x2c0>)
 8001044:	65bb      	str	r3, [r7, #88]	@ 0x58
  bool stealthchop = false;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  bool run = true;
 800104c:	2301      	movs	r3, #1
 800104e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  int current = 100;
 8001052:	2364      	movs	r3, #100	@ 0x64
 8001054:	653b      	str	r3, [r7, #80]	@ 0x50
  bool configToSave = true;
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


  while (1)
  {
    if (run)
 800105c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0fb      	beq.n	800105c <main+0xc8>
    {
      if (configToSave)
 8001064:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001068:	2b00      	cmp	r3, #0
 800106a:	d019      	beq.n	80010a0 <main+0x10c>
      {
        if (stealthchop)
 800106c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <main+0xe8>
        {
          TMC2209_enableStealthChop(&htmc);
 8001074:	4875      	ldr	r0, [pc, #468]	@ (800124c <main+0x2b8>)
 8001076:	f7ff fb87 	bl	8000788 <TMC2209_enableStealthChop>
 800107a:	e002      	b.n	8001082 <main+0xee>
        }
        else
        {
          TMC2209_disableStealthChop(&htmc);
 800107c:	4873      	ldr	r0, [pc, #460]	@ (800124c <main+0x2b8>)
 800107e:	f7ff fb93 	bl	80007a8 <TMC2209_disableStealthChop>
        }
      HAL_Delay(200);
 8001082:	20c8      	movs	r0, #200	@ 0xc8
 8001084:	f000 fa8a 	bl	800159c <HAL_Delay>
        TMC2209_setRunCurrent(&htmc, current);
 8001088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800108a:	b2db      	uxtb	r3, r3
 800108c:	4619      	mov	r1, r3
 800108e:	486f      	ldr	r0, [pc, #444]	@ (800124c <main+0x2b8>)
 8001090:	f7ff fb2f 	bl	80006f2 <TMC2209_setRunCurrent>
      HAL_Delay(200);
 8001094:	20c8      	movs	r0, #200	@ 0xc8
 8001096:	f000 fa81 	bl	800159c <HAL_Delay>
      configToSave = false;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      }
      
      for (int i = 0; i <= accel; i++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80010a4:	e020      	b.n	80010e8 <main+0x154>
      {
        TMC2209_moveAtVelocity(&htmc, speed * i / accel);
 80010a6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80010a8:	f7ff f90a 	bl	80002c0 <__aeabi_i2f>
 80010ac:	4603      	mov	r3, r0
 80010ae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f959 	bl	8000368 <__aeabi_fmul>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461c      	mov	r4, r3
 80010ba:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80010bc:	f7ff f8fc 	bl	80002b8 <__aeabi_ui2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4619      	mov	r1, r3
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff fa03 	bl	80004d0 <__aeabi_fdiv>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa9b 	bl	8000608 <__aeabi_f2iz>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4619      	mov	r1, r3
 80010d6:	485d      	ldr	r0, [pc, #372]	@ (800124c <main+0x2b8>)
 80010d8:	f7ff fb47 	bl	800076a <TMC2209_moveAtVelocity>
        HAL_Delay(2);
 80010dc:	2002      	movs	r0, #2
 80010de:	f000 fa5d 	bl	800159c <HAL_Delay>
      for (int i = 0; i <= accel; i++)
 80010e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010e4:	3301      	adds	r3, #1
 80010e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80010e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d2da      	bcs.n	80010a6 <main+0x112>
      }
      TMC2209_moveAtVelocity(&htmc, speed);
 80010f0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80010f2:	f7ff fa89 	bl	8000608 <__aeabi_f2iz>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4619      	mov	r1, r3
 80010fa:	4854      	ldr	r0, [pc, #336]	@ (800124c <main+0x2b8>)
 80010fc:	f7ff fb35 	bl	800076a <TMC2209_moveAtVelocity>
      HAL_Delay(distance * 10);
 8001100:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fa46 	bl	800159c <HAL_Delay>
      for (int i = accel; i > 0; i--)
 8001110:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001112:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001114:	e020      	b.n	8001158 <main+0x1c4>
      {
        TMC2209_moveAtVelocity(&htmc, speed * i / accel);
 8001116:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001118:	f7ff f8d2 	bl	80002c0 <__aeabi_i2f>
 800111c:	4603      	mov	r3, r0
 800111e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f921 	bl	8000368 <__aeabi_fmul>
 8001126:	4603      	mov	r3, r0
 8001128:	461c      	mov	r4, r3
 800112a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800112c:	f7ff f8c4 	bl	80002b8 <__aeabi_ui2f>
 8001130:	4603      	mov	r3, r0
 8001132:	4619      	mov	r1, r3
 8001134:	4620      	mov	r0, r4
 8001136:	f7ff f9cb 	bl	80004d0 <__aeabi_fdiv>
 800113a:	4603      	mov	r3, r0
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fa63 	bl	8000608 <__aeabi_f2iz>
 8001142:	4603      	mov	r3, r0
 8001144:	4619      	mov	r1, r3
 8001146:	4841      	ldr	r0, [pc, #260]	@ (800124c <main+0x2b8>)
 8001148:	f7ff fb0f 	bl	800076a <TMC2209_moveAtVelocity>
        HAL_Delay(2);
 800114c:	2002      	movs	r0, #2
 800114e:	f000 fa25 	bl	800159c <HAL_Delay>
      for (int i = accel; i > 0; i--)
 8001152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001154:	3b01      	subs	r3, #1
 8001156:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800115a:	2b00      	cmp	r3, #0
 800115c:	dcdb      	bgt.n	8001116 <main+0x182>
      }
      HAL_Delay(100);
 800115e:	2064      	movs	r0, #100	@ 0x64
 8001160:	f000 fa1c 	bl	800159c <HAL_Delay>

      for (int i = 0; i <= accel; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001168:	e023      	b.n	80011b2 <main+0x21e>
      {
        TMC2209_moveAtVelocity(&htmc, - speed * i / accel);
 800116a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800116c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001170:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001172:	f7ff f8a5 	bl	80002c0 <__aeabi_i2f>
 8001176:	4603      	mov	r3, r0
 8001178:	4619      	mov	r1, r3
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff f8f4 	bl	8000368 <__aeabi_fmul>
 8001180:	4603      	mov	r3, r0
 8001182:	461c      	mov	r4, r3
 8001184:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001186:	f7ff f897 	bl	80002b8 <__aeabi_ui2f>
 800118a:	4603      	mov	r3, r0
 800118c:	4619      	mov	r1, r3
 800118e:	4620      	mov	r0, r4
 8001190:	f7ff f99e 	bl	80004d0 <__aeabi_fdiv>
 8001194:	4603      	mov	r3, r0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fa36 	bl	8000608 <__aeabi_f2iz>
 800119c:	4603      	mov	r3, r0
 800119e:	4619      	mov	r1, r3
 80011a0:	482a      	ldr	r0, [pc, #168]	@ (800124c <main+0x2b8>)
 80011a2:	f7ff fae2 	bl	800076a <TMC2209_moveAtVelocity>
        HAL_Delay(2);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f000 f9f8 	bl	800159c <HAL_Delay>
      for (int i = 0; i <= accel; i++)
 80011ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011ae:	3301      	adds	r3, #1
 80011b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80011b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d2d7      	bcs.n	800116a <main+0x1d6>
      }
      TMC2209_moveAtVelocity(&htmc, -speed);
 80011ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fa21 	bl	8000608 <__aeabi_f2iz>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4619      	mov	r1, r3
 80011ca:	4820      	ldr	r0, [pc, #128]	@ (800124c <main+0x2b8>)
 80011cc:	f7ff facd 	bl	800076a <TMC2209_moveAtVelocity>
      HAL_Delay(distance * 10);
 80011d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f9de 	bl	800159c <HAL_Delay>
      for (int i = accel; i > 0; i--)
 80011e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80011e4:	e023      	b.n	800122e <main+0x29a>
      {
        TMC2209_moveAtVelocity(&htmc, - speed * i / accel);
 80011e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011e8:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80011ec:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80011ee:	f7ff f867 	bl	80002c0 <__aeabi_i2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4619      	mov	r1, r3
 80011f6:	4620      	mov	r0, r4
 80011f8:	f7ff f8b6 	bl	8000368 <__aeabi_fmul>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461c      	mov	r4, r3
 8001200:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001202:	f7ff f859 	bl	80002b8 <__aeabi_ui2f>
 8001206:	4603      	mov	r3, r0
 8001208:	4619      	mov	r1, r3
 800120a:	4620      	mov	r0, r4
 800120c:	f7ff f960 	bl	80004d0 <__aeabi_fdiv>
 8001210:	4603      	mov	r3, r0
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f9f8 	bl	8000608 <__aeabi_f2iz>
 8001218:	4603      	mov	r3, r0
 800121a:	4619      	mov	r1, r3
 800121c:	480b      	ldr	r0, [pc, #44]	@ (800124c <main+0x2b8>)
 800121e:	f7ff faa4 	bl	800076a <TMC2209_moveAtVelocity>
        HAL_Delay(2);
 8001222:	2002      	movs	r0, #2
 8001224:	f000 f9ba 	bl	800159c <HAL_Delay>
      for (int i = accel; i > 0; i--)
 8001228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800122a:	3b01      	subs	r3, #1
 800122c:	667b      	str	r3, [r7, #100]	@ 0x64
 800122e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001230:	2b00      	cmp	r3, #0
 8001232:	dcd8      	bgt.n	80011e6 <main+0x252>
      }
      HAL_Delay(100);
 8001234:	2064      	movs	r0, #100	@ 0x64
 8001236:	f000 f9b1 	bl	800159c <HAL_Delay>
    if (run)
 800123a:	e70f      	b.n	800105c <main+0xc8>
 800123c:	080027bc 	.word	0x080027bc
 8001240:	080027cc 	.word	0x080027cc
 8001244:	20000048 	.word	0x20000048
 8001248:	40010800 	.word	0x40010800
 800124c:	20000028 	.word	0x20000028
 8001250:	20000060 	.word	0x20000060
 8001254:	459c4000 	.word	0x459c4000

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b090      	sub	sp, #64	@ 0x40
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	2228      	movs	r2, #40	@ 0x28
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fa70 	bl	800274c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127a:	2302      	movs	r3, #2
 800127c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127e:	2301      	movs	r3, #1
 8001280:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001282:	2310      	movs	r3, #16
 8001284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001286:	2300      	movs	r3, #0
 8001288:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fc28 	bl	8001ae4 <HAL_RCC_OscConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800129a:	f000 f818 	bl	80012ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fe96 	bl	8001fe8 <HAL_RCC_ClockConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012c2:	f000 f804 	bl	80012ce <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3740      	adds	r7, #64	@ 0x40
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d2:	b672      	cpsid	i
}
 80012d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d6:	bf00      	nop
 80012d8:	e7fd      	b.n	80012d6 <Error_Handler+0x8>
	...

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_MspInit+0x5c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <HAL_MspInit+0x5c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6193      	str	r3, [r2, #24]
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_MspInit+0x5c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <HAL_MspInit+0x5c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001338 <HAL_MspInit+0x5c>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <HAL_MspInit+0x5c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_MspInit+0x60>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <HAL_MspInit+0x60>)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <NMI_Handler+0x4>

08001348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <MemManage_Handler+0x4>

08001358 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <UsageFault_Handler+0x4>

08001368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 f8e8 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <MX_USART2_UART_Init+0x50>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013dc:	f000 ff92 	bl	8002304 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e6:	f7ff ff72 	bl	80012ce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000060 	.word	0x20000060
 80013f4:	40004400 	.word	0x40004400

080013f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <HAL_UART_MspInit+0x88>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d12f      	bne.n	8001478 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <HAL_UART_MspInit+0x8c>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	4a19      	ldr	r2, [pc, #100]	@ (8001484 <HAL_UART_MspInit+0x8c>)
 800141e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001422:	61d3      	str	r3, [r2, #28]
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <HAL_UART_MspInit+0x8c>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <HAL_UART_MspInit+0x8c>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a13      	ldr	r2, [pc, #76]	@ (8001484 <HAL_UART_MspInit+0x8c>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <HAL_UART_MspInit+0x8c>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001448:	2304      	movs	r3, #4
 800144a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	4619      	mov	r1, r3
 800145a:	480b      	ldr	r0, [pc, #44]	@ (8001488 <HAL_UART_MspInit+0x90>)
 800145c:	f000 f9a6 	bl	80017ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001460:	2308      	movs	r3, #8
 8001462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4619      	mov	r1, r3
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <HAL_UART_MspInit+0x90>)
 8001474:	f000 f99a 	bl	80017ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40004400 	.word	0x40004400
 8001484:	40021000 	.word	0x40021000
 8001488:	40010800 	.word	0x40010800

0800148c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800148c:	f7ff ff84 	bl	8001398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001492:	490c      	ldr	r1, [pc, #48]	@ (80014c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001494:	4a0c      	ldr	r2, [pc, #48]	@ (80014c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a09      	ldr	r2, [pc, #36]	@ (80014cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014a8:	4c09      	ldr	r4, [pc, #36]	@ (80014d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b6:	f001 f951 	bl	800275c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ba:	f7ff fd6b 	bl	8000f94 <main>
  bx lr
 80014be:	4770      	bx	lr
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014c8:	0800280c 	.word	0x0800280c
  ldr r2, =_sbss
 80014cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014d0:	200000ac 	.word	0x200000ac

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <HAL_Init+0x28>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a07      	ldr	r2, [pc, #28]	@ (8001500 <HAL_Init+0x28>)
 80014e2:	f043 0310 	orr.w	r3, r3, #16
 80014e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 f92b 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ee:	200f      	movs	r0, #15
 80014f0:	f000 f808 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f4:	f7ff fef2 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40022000 	.word	0x40022000

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <HAL_InitTick+0x54>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <HAL_InitTick+0x58>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f935 	bl	8001792 <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001540:	f000 f90b 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	@ (8001560 <HAL_InitTick+0x5c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000000 	.word	0x20000000
 800155c:	20000008 	.word	0x20000008
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <HAL_IncTick+0x1c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <HAL_IncTick+0x20>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a03      	ldr	r2, [pc, #12]	@ (8001584 <HAL_IncTick+0x20>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000008 	.word	0x20000008
 8001584:	200000a8 	.word	0x200000a8

08001588 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b02      	ldr	r3, [pc, #8]	@ (8001598 <HAL_GetTick+0x10>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	200000a8 	.word	0x200000a8

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff fff0 	bl	8001588 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffe0 	bl	8001588 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	@ (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	@ (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	@ 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001724:	f7ff ff90 	bl	8001648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff49 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff5e 	bl	800162c <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff90 	bl	800169c <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5f 	bl	8001648 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffb0 	bl	8001700 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b08b      	sub	sp, #44	@ 0x2c
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017be:	e169      	b.n	8001a94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c0:	2201      	movs	r2, #1
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 8158 	bne.w	8001a8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a9a      	ldr	r2, [pc, #616]	@ (8001a4c <HAL_GPIO_Init+0x2a0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d05e      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017e8:	4a98      	ldr	r2, [pc, #608]	@ (8001a4c <HAL_GPIO_Init+0x2a0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d875      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017ee:	4a98      	ldr	r2, [pc, #608]	@ (8001a50 <HAL_GPIO_Init+0x2a4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d058      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017f4:	4a96      	ldr	r2, [pc, #600]	@ (8001a50 <HAL_GPIO_Init+0x2a4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d86f      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017fa:	4a96      	ldr	r2, [pc, #600]	@ (8001a54 <HAL_GPIO_Init+0x2a8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d052      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001800:	4a94      	ldr	r2, [pc, #592]	@ (8001a54 <HAL_GPIO_Init+0x2a8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d869      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001806:	4a94      	ldr	r2, [pc, #592]	@ (8001a58 <HAL_GPIO_Init+0x2ac>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d04c      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 800180c:	4a92      	ldr	r2, [pc, #584]	@ (8001a58 <HAL_GPIO_Init+0x2ac>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d863      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001812:	4a92      	ldr	r2, [pc, #584]	@ (8001a5c <HAL_GPIO_Init+0x2b0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d046      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001818:	4a90      	ldr	r2, [pc, #576]	@ (8001a5c <HAL_GPIO_Init+0x2b0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d85d      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d82a      	bhi.n	8001878 <HAL_GPIO_Init+0xcc>
 8001822:	2b12      	cmp	r3, #18
 8001824:	d859      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001826:	a201      	add	r2, pc, #4	@ (adr r2, 800182c <HAL_GPIO_Init+0x80>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	080018a7 	.word	0x080018a7
 8001830:	08001881 	.word	0x08001881
 8001834:	08001893 	.word	0x08001893
 8001838:	080018d5 	.word	0x080018d5
 800183c:	080018db 	.word	0x080018db
 8001840:	080018db 	.word	0x080018db
 8001844:	080018db 	.word	0x080018db
 8001848:	080018db 	.word	0x080018db
 800184c:	080018db 	.word	0x080018db
 8001850:	080018db 	.word	0x080018db
 8001854:	080018db 	.word	0x080018db
 8001858:	080018db 	.word	0x080018db
 800185c:	080018db 	.word	0x080018db
 8001860:	080018db 	.word	0x080018db
 8001864:	080018db 	.word	0x080018db
 8001868:	080018db 	.word	0x080018db
 800186c:	080018db 	.word	0x080018db
 8001870:	08001889 	.word	0x08001889
 8001874:	0800189d 	.word	0x0800189d
 8001878:	4a79      	ldr	r2, [pc, #484]	@ (8001a60 <HAL_GPIO_Init+0x2b4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187e:	e02c      	b.n	80018da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e029      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	3304      	adds	r3, #4
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e024      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	3308      	adds	r3, #8
 8001898:	623b      	str	r3, [r7, #32]
          break;
 800189a:	e01f      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	330c      	adds	r3, #12
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e01a      	b.n	80018dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ae:	2304      	movs	r3, #4
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e013      	b.n	80018dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	611a      	str	r2, [r3, #16]
          break;
 80018c6:	e009      	b.n	80018dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	615a      	str	r2, [r3, #20]
          break;
 80018d2:	e003      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x130>
          break;
 80018da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2bff      	cmp	r3, #255	@ 0xff
 80018e0:	d801      	bhi.n	80018e6 <HAL_GPIO_Init+0x13a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	e001      	b.n	80018ea <HAL_GPIO_Init+0x13e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2bff      	cmp	r3, #255	@ 0xff
 80018f0:	d802      	bhi.n	80018f8 <HAL_GPIO_Init+0x14c>
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	e002      	b.n	80018fe <HAL_GPIO_Init+0x152>
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	3b08      	subs	r3, #8
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	210f      	movs	r1, #15
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	6a39      	ldr	r1, [r7, #32]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	431a      	orrs	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80b1 	beq.w	8001a8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800192c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a4c      	ldr	r2, [pc, #304]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b4a      	ldr	r3, [pc, #296]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001944:	4a48      	ldr	r2, [pc, #288]	@ (8001a68 <HAL_GPIO_Init+0x2bc>)
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a40      	ldr	r2, [pc, #256]	@ (8001a6c <HAL_GPIO_Init+0x2c0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d013      	beq.n	8001998 <HAL_GPIO_Init+0x1ec>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a3f      	ldr	r2, [pc, #252]	@ (8001a70 <HAL_GPIO_Init+0x2c4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00d      	beq.n	8001994 <HAL_GPIO_Init+0x1e8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a74 <HAL_GPIO_Init+0x2c8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x1e4>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3d      	ldr	r2, [pc, #244]	@ (8001a78 <HAL_GPIO_Init+0x2cc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d101      	bne.n	800198c <HAL_GPIO_Init+0x1e0>
 8001988:	2303      	movs	r3, #3
 800198a:	e006      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 800198c:	2304      	movs	r3, #4
 800198e:	e004      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001990:	2302      	movs	r3, #2
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001998:	2300      	movs	r3, #0
 800199a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019aa:	492f      	ldr	r1, [pc, #188]	@ (8001a68 <HAL_GPIO_Init+0x2bc>)
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	492c      	ldr	r1, [pc, #176]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019d2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	4928      	ldr	r1, [pc, #160]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ec:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	4922      	ldr	r1, [pc, #136]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	491e      	ldr	r1, [pc, #120]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4918      	ldr	r1, [pc, #96]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a22:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4914      	ldr	r1, [pc, #80]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d021      	beq.n	8001a80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	490e      	ldr	r1, [pc, #56]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e021      	b.n	8001a8e <HAL_GPIO_Init+0x2e2>
 8001a4a:	bf00      	nop
 8001a4c:	10320000 	.word	0x10320000
 8001a50:	10310000 	.word	0x10310000
 8001a54:	10220000 	.word	0x10220000
 8001a58:	10210000 	.word	0x10210000
 8001a5c:	10120000 	.word	0x10120000
 8001a60:	10110000 	.word	0x10110000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	40011000 	.word	0x40011000
 8001a78:	40011400 	.word	0x40011400
 8001a7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	4909      	ldr	r1, [pc, #36]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f47f ae8e 	bne.w	80017c0 <HAL_GPIO_Init+0x14>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	372c      	adds	r7, #44	@ 0x2c
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad0:	e003      	b.n	8001ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e272      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8087 	beq.w	8001c12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b04:	4b92      	ldr	r3, [pc, #584]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d00c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b10:	4b8f      	ldr	r3, [pc, #572]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d112      	bne.n	8001b42 <HAL_RCC_OscConfig+0x5e>
 8001b1c:	4b8c      	ldr	r3, [pc, #560]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b28:	d10b      	bne.n	8001b42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2a:	4b89      	ldr	r3, [pc, #548]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d06c      	beq.n	8001c10 <HAL_RCC_OscConfig+0x12c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d168      	bne.n	8001c10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e24c      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x76>
 8001b4c:	4b80      	ldr	r3, [pc, #512]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a7f      	ldr	r2, [pc, #508]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e02e      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd4>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x98>
 8001b62:	4b7b      	ldr	r3, [pc, #492]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7a      	ldr	r2, [pc, #488]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b78      	ldr	r3, [pc, #480]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a77      	ldr	r2, [pc, #476]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e01d      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xbc>
 8001b86:	4b72      	ldr	r3, [pc, #456]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a71      	ldr	r2, [pc, #452]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b6f      	ldr	r3, [pc, #444]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a6e      	ldr	r2, [pc, #440]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd4>
 8001ba0:	4b6b      	ldr	r3, [pc, #428]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b68      	ldr	r3, [pc, #416]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a67      	ldr	r2, [pc, #412]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fce2 	bl	8001588 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fcde 	bl	8001588 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	@ 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e200      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b5d      	ldr	r3, [pc, #372]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0xe4>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fcce 	bl	8001588 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fcca 	bl	8001588 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1ec      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	4b53      	ldr	r3, [pc, #332]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x10c>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d063      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c2a:	4b49      	ldr	r3, [pc, #292]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d11c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x18c>
 8001c36:	4b46      	ldr	r3, [pc, #280]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d116      	bne.n	8001c70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	4b43      	ldr	r3, [pc, #268]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_RCC_OscConfig+0x176>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e1c0      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4939      	ldr	r1, [pc, #228]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	e03a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d020      	beq.n	8001cba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c78:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fc83 	bl	8001588 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c86:	f7ff fc7f 	bl	8001588 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e1a1      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	4b2d      	ldr	r3, [pc, #180]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4927      	ldr	r1, [pc, #156]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]
 8001cb8:	e015      	b.n	8001ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cba:	4b26      	ldr	r3, [pc, #152]	@ (8001d54 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fc62 	bl	8001588 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fc5e 	bl	8001588 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e180      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d03a      	beq.n	8001d68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d019      	beq.n	8001d2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d00:	f7ff fc42 	bl	8001588 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7ff fc3e 	bl	8001588 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e160      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f000 face 	bl	80022c8 <RCC_Delay>
 8001d2c:	e01c      	b.n	8001d68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_RCC_OscConfig+0x274>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7ff fc28 	bl	8001588 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3a:	e00f      	b.n	8001d5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fc24 	bl	8001588 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d908      	bls.n	8001d5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e146      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	42420000 	.word	0x42420000
 8001d58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5c:	4b92      	ldr	r3, [pc, #584]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e9      	bne.n	8001d3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a6 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b88      	ldr	r3, [pc, #544]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a87      	ldr	r2, [pc, #540]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]
 8001d92:	4b85      	ldr	r3, [pc, #532]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da2:	4b82      	ldr	r3, [pc, #520]	@ (8001fac <HAL_RCC_OscConfig+0x4c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d118      	bne.n	8001de0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dae:	4b7f      	ldr	r3, [pc, #508]	@ (8001fac <HAL_RCC_OscConfig+0x4c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fac <HAL_RCC_OscConfig+0x4c8>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fbe5 	bl	8001588 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc2:	f7ff fbe1 	bl	8001588 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b64      	cmp	r3, #100	@ 0x64
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e103      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	4b75      	ldr	r3, [pc, #468]	@ (8001fac <HAL_RCC_OscConfig+0x4c8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x312>
 8001de8:	4b6f      	ldr	r3, [pc, #444]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a6e      	ldr	r2, [pc, #440]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6213      	str	r3, [r2, #32]
 8001df4:	e02d      	b.n	8001e52 <HAL_RCC_OscConfig+0x36e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x334>
 8001dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a69      	ldr	r2, [pc, #420]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	6213      	str	r3, [r2, #32]
 8001e0a:	4b67      	ldr	r3, [pc, #412]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a66      	ldr	r2, [pc, #408]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f023 0304 	bic.w	r3, r3, #4
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	e01c      	b.n	8001e52 <HAL_RCC_OscConfig+0x36e>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d10c      	bne.n	8001e3a <HAL_RCC_OscConfig+0x356>
 8001e20:	4b61      	ldr	r3, [pc, #388]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a60      	ldr	r2, [pc, #384]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a5d      	ldr	r2, [pc, #372]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6213      	str	r3, [r2, #32]
 8001e38:	e00b      	b.n	8001e52 <HAL_RCC_OscConfig+0x36e>
 8001e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a5a      	ldr	r2, [pc, #360]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6213      	str	r3, [r2, #32]
 8001e46:	4b58      	ldr	r3, [pc, #352]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a57      	ldr	r2, [pc, #348]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d015      	beq.n	8001e86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fb95 	bl	8001588 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7ff fb91 	bl	8001588 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e0b1      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e78:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ee      	beq.n	8001e62 <HAL_RCC_OscConfig+0x37e>
 8001e84:	e014      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7ff fb7f 	bl	8001588 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7ff fb7b 	bl	8001588 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e09b      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea4:	4b40      	ldr	r3, [pc, #256]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ee      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d105      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a3b      	ldr	r2, [pc, #236]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8087 	beq.w	8001fda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ecc:	4b36      	ldr	r3, [pc, #216]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d061      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d146      	bne.n	8001f6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee0:	4b33      	ldr	r3, [pc, #204]	@ (8001fb0 <HAL_RCC_OscConfig+0x4cc>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fb4f 	bl	8001588 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff fb4b 	bl	8001588 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e06d      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f00:	4b29      	ldr	r3, [pc, #164]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f0      	bne.n	8001eee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f14:	d108      	bne.n	8001f28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f16:	4b24      	ldr	r3, [pc, #144]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	4921      	ldr	r1, [pc, #132]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f28:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a19      	ldr	r1, [r3, #32]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	491b      	ldr	r1, [pc, #108]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f40:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <HAL_RCC_OscConfig+0x4cc>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7ff fb1f 	bl	8001588 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff fb1b 	bl	8001588 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e03d      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x46a>
 8001f6c:	e035      	b.n	8001fda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <HAL_RCC_OscConfig+0x4cc>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff fb08 	bl	8001588 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7ff fb04 	bl	8001588 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e026      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x498>
 8001f9a:	e01e      	b.n	8001fda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e019      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_RCC_OscConfig+0x500>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0d0      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d910      	bls.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b67      	ldr	r3, [pc, #412]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	4965      	ldr	r1, [pc, #404]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4a58      	ldr	r2, [pc, #352]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800204e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a52      	ldr	r2, [pc, #328]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002066:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d040      	beq.n	8002108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d115      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	4b41      	ldr	r3, [pc, #260]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e073      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06b      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c6:	4b39      	ldr	r3, [pc, #228]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f023 0203 	bic.w	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4936      	ldr	r1, [pc, #216]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d8:	f7ff fa56 	bl	8001588 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e0:	f7ff fa52 	bl	8001588 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e053      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	4b2d      	ldr	r3, [pc, #180]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 020c 	and.w	r2, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	429a      	cmp	r2, r3
 8002106:	d1eb      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002108:	4b27      	ldr	r3, [pc, #156]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d210      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b24      	ldr	r3, [pc, #144]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 0207 	bic.w	r2, r3, #7
 800211e:	4922      	ldr	r1, [pc, #136]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002162:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4602      	mov	r2, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	490a      	ldr	r1, [pc, #40]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002188:	5ccb      	ldrb	r3, [r1, r3]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f9b4 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40021000 	.word	0x40021000
 80021b0:	080027d8 	.word	0x080027d8
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x94>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d002      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x30>
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0x36>
 80021ea:	e027      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021ec:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ee:	613b      	str	r3, [r7, #16]
      break;
 80021f0:	e027      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	0c9b      	lsrs	r3, r3, #18
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	4a17      	ldr	r2, [pc, #92]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021fc:	5cd3      	ldrb	r3, [r2, r3]
 80021fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d010      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x94>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	0c5b      	lsrs	r3, r3, #17
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	4a11      	ldr	r2, [pc, #68]	@ (800225c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002216:	5cd3      	ldrb	r3, [r2, r3]
 8002218:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x98>)
 800221e:	fb03 f202 	mul.w	r2, r3, r2
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e004      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a0c      	ldr	r2, [pc, #48]	@ (8002260 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	613b      	str	r3, [r7, #16]
      break;
 800223a:	e002      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x98>)
 800223e:	613b      	str	r3, [r7, #16]
      break;
 8002240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002242:	693b      	ldr	r3, [r7, #16]
}
 8002244:	4618      	mov	r0, r3
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	007a1200 	.word	0x007a1200
 8002258:	080027f0 	.word	0x080027f0
 800225c:	08002800 	.word	0x08002800
 8002260:	003d0900 	.word	0x003d0900

08002264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002268:	4b02      	ldr	r3, [pc, #8]	@ (8002274 <HAL_RCC_GetHCLKFreq+0x10>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000000 	.word	0x20000000

08002278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800227c:	f7ff fff2 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	4903      	ldr	r1, [pc, #12]	@ (800229c <HAL_RCC_GetPCLK1Freq+0x24>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	080027e8 	.word	0x080027e8

080022a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022a4:	f7ff ffde 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	0adb      	lsrs	r3, r3, #11
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	4903      	ldr	r1, [pc, #12]	@ (80022c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	080027e8 	.word	0x080027e8

080022c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d0:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <RCC_Delay+0x34>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <RCC_Delay+0x38>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0a5b      	lsrs	r3, r3, #9
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022e4:	bf00      	nop
  }
  while (Delay --);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e5a      	subs	r2, r3, #1
 80022ea:	60fa      	str	r2, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f9      	bne.n	80022e4 <RCC_Delay+0x1c>
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	20000000 	.word	0x20000000
 8002300:	10624dd3 	.word	0x10624dd3

08002304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e042      	b.n	800239c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff f864 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2224      	movs	r2, #36	@ 0x24
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f971 	bl	8002630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800235c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800236c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800237c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d175      	bne.n	80024b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_UART_Transmit+0x2c>
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e06e      	b.n	80024b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2221      	movs	r2, #33	@ 0x21
 80023de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023e2:	f7ff f8d1 	bl	8001588 <HAL_GetTick>
 80023e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023fc:	d108      	bne.n	8002410 <HAL_UART_Transmit+0x6c>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	e003      	b.n	8002418 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002418:	e02e      	b.n	8002478 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	2180      	movs	r1, #128	@ 0x80
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f848 	bl	80024ba <UART_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e03a      	b.n	80024b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10b      	bne.n	800245a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002450:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3302      	adds	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	e007      	b.n	800246a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	3301      	adds	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1cb      	bne.n	800241a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2140      	movs	r1, #64	@ 0x40
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f814 	bl	80024ba <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e006      	b.n	80024b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ca:	e03b      	b.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024d2:	d037      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d4:	f7ff f858 	bl	8001588 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	6a3a      	ldr	r2, [r7, #32]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d302      	bcc.n	80024ea <UART_WaitOnFlagUntilTimeout+0x30>
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e03a      	b.n	8002564 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d023      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b80      	cmp	r3, #128	@ 0x80
 8002500:	d020      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b40      	cmp	r3, #64	@ 0x40
 8002506:	d01d      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b08      	cmp	r3, #8
 8002514:	d116      	bne.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f81d 	bl	800256c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2208      	movs	r2, #8
 8002536:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e00f      	b.n	8002564 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	4013      	ands	r3, r2
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	429a      	cmp	r2, r3
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	429a      	cmp	r2, r3
 8002560:	d0b4      	beq.n	80024cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800256c:	b480      	push	{r7}
 800256e:	b095      	sub	sp, #84	@ 0x54
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	330c      	adds	r3, #12
 800257a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257e:	e853 3f00 	ldrex	r3, [r3]
 8002582:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002586:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800258a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	330c      	adds	r3, #12
 8002592:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002594:	643a      	str	r2, [r7, #64]	@ 0x40
 8002596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002598:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800259a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800259c:	e841 2300 	strex	r3, r2, [r1]
 80025a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e5      	bne.n	8002574 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3314      	adds	r3, #20
 80025ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	e853 3f00 	ldrex	r3, [r3]
 80025b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3314      	adds	r3, #20
 80025c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025d0:	e841 2300 	strex	r3, r2, [r1]
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e5      	bne.n	80025a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d119      	bne.n	8002618 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	e853 3f00 	ldrex	r3, [r3]
 80025f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f023 0310 	bic.w	r3, r3, #16
 80025fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	330c      	adds	r3, #12
 8002602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002604:	61ba      	str	r2, [r7, #24]
 8002606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002608:	6979      	ldr	r1, [r7, #20]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	e841 2300 	strex	r3, r2, [r1]
 8002610:	613b      	str	r3, [r7, #16]
   return(result);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1e5      	bne.n	80025e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002626:	bf00      	nop
 8002628:	3754      	adds	r7, #84	@ 0x54
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800266a:	f023 030c 	bic.w	r3, r3, #12
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	430b      	orrs	r3, r1
 8002676:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2c      	ldr	r2, [pc, #176]	@ (8002744 <UART_SetConfig+0x114>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d103      	bne.n	80026a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002698:	f7ff fe02 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	e002      	b.n	80026a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026a0:	f7ff fdea 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 80026a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	009a      	lsls	r2, r3, #2
 80026b0:	441a      	add	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	4a22      	ldr	r2, [pc, #136]	@ (8002748 <UART_SetConfig+0x118>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	0119      	lsls	r1, r3, #4
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	009a      	lsls	r2, r3, #2
 80026d0:	441a      	add	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002748 <UART_SetConfig+0x118>)
 80026de:	fba3 0302 	umull	r0, r3, r3, r2
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2064      	movs	r0, #100	@ 0x64
 80026e6:	fb00 f303 	mul.w	r3, r0, r3
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	3332      	adds	r3, #50	@ 0x32
 80026f0:	4a15      	ldr	r2, [pc, #84]	@ (8002748 <UART_SetConfig+0x118>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026fc:	4419      	add	r1, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	009a      	lsls	r2, r3, #2
 8002708:	441a      	add	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fbb2 f2f3 	udiv	r2, r2, r3
 8002714:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <UART_SetConfig+0x118>)
 8002716:	fba3 0302 	umull	r0, r3, r3, r2
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2064      	movs	r0, #100	@ 0x64
 800271e:	fb00 f303 	mul.w	r3, r0, r3
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	3332      	adds	r3, #50	@ 0x32
 8002728:	4a07      	ldr	r2, [pc, #28]	@ (8002748 <UART_SetConfig+0x118>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	f003 020f 	and.w	r2, r3, #15
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	440a      	add	r2, r1
 800273a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40013800 	.word	0x40013800
 8002748:	51eb851f 	.word	0x51eb851f

0800274c <memset>:
 800274c:	4603      	mov	r3, r0
 800274e:	4402      	add	r2, r0
 8002750:	4293      	cmp	r3, r2
 8002752:	d100      	bne.n	8002756 <memset+0xa>
 8002754:	4770      	bx	lr
 8002756:	f803 1b01 	strb.w	r1, [r3], #1
 800275a:	e7f9      	b.n	8002750 <memset+0x4>

0800275c <__libc_init_array>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	2600      	movs	r6, #0
 8002760:	4d0c      	ldr	r5, [pc, #48]	@ (8002794 <__libc_init_array+0x38>)
 8002762:	4c0d      	ldr	r4, [pc, #52]	@ (8002798 <__libc_init_array+0x3c>)
 8002764:	1b64      	subs	r4, r4, r5
 8002766:	10a4      	asrs	r4, r4, #2
 8002768:	42a6      	cmp	r6, r4
 800276a:	d109      	bne.n	8002780 <__libc_init_array+0x24>
 800276c:	f000 f81a 	bl	80027a4 <_init>
 8002770:	2600      	movs	r6, #0
 8002772:	4d0a      	ldr	r5, [pc, #40]	@ (800279c <__libc_init_array+0x40>)
 8002774:	4c0a      	ldr	r4, [pc, #40]	@ (80027a0 <__libc_init_array+0x44>)
 8002776:	1b64      	subs	r4, r4, r5
 8002778:	10a4      	asrs	r4, r4, #2
 800277a:	42a6      	cmp	r6, r4
 800277c:	d105      	bne.n	800278a <__libc_init_array+0x2e>
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	f855 3b04 	ldr.w	r3, [r5], #4
 8002784:	4798      	blx	r3
 8002786:	3601      	adds	r6, #1
 8002788:	e7ee      	b.n	8002768 <__libc_init_array+0xc>
 800278a:	f855 3b04 	ldr.w	r3, [r5], #4
 800278e:	4798      	blx	r3
 8002790:	3601      	adds	r6, #1
 8002792:	e7f2      	b.n	800277a <__libc_init_array+0x1e>
 8002794:	08002804 	.word	0x08002804
 8002798:	08002804 	.word	0x08002804
 800279c:	08002804 	.word	0x08002804
 80027a0:	08002808 	.word	0x08002808

080027a4 <_init>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr

080027b0 <_fini>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr
