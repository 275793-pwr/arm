
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000383c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003948  08003948  00004948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c8  080039c8  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080039c8  080039c8  000049c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039d0  080039d0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d0  080039d0  000049d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039d4  080039d4  000049d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080039d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000005c  08003a34  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003a34  00005290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e38a  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b4  00000000  00000000  0001340f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  000156c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdb  00000000  00000000  000165b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018924  00000000  00000000  0001718b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1fb  00000000  00000000  0002faaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb89  00000000  00000000  0003ecaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004400  00000000  00000000  000cb878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000cfc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003930 	.word	0x08003930

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003930 	.word	0x08003930

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <TMC2209_create>:


// Public functions

TMC2209_HandleTypeDef TMC2209_create(UART_HandleTypeDef * huart, TMC2209_SerialAddress_t serial_address)
{
 8000664:	b4b0      	push	{r4, r5, r7}
 8000666:	b08d      	sub	sp, #52	@ 0x34
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	4613      	mov	r3, r2
 8000670:	71fb      	strb	r3, [r7, #7]
    TMC2209_HandleTypeDef htmc;
    htmc.huart = huart;
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	613b      	str	r3, [r7, #16]
    htmc.serial_address = serial_address;
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	753b      	strb	r3, [r7, #20]
    htmc.cool_step_enabled = false;
 800067a:	2300      	movs	r3, #0
 800067c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    htmc.toff = TOFF_DEFAULT; // Initialize toff
 8000680:	2303      	movs	r3, #3
 8000682:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Initialize register unions to zero
    htmc.global_config.bytes = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
    htmc.driver_current.bytes = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    htmc.chopper_config.bytes = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
    htmc.pwm_config.bytes = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
    htmc.cool_config.bytes = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	@ 0x28

    return htmc;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	461d      	mov	r5, r3
 800069e:	f107 0410 	add.w	r4, r7, #16
 80006a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	3734      	adds	r7, #52	@ 0x34
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bcb0      	pop	{r4, r5, r7}
 80006b6:	4770      	bx	lr

080006b8 <TMC2209_enable>:


void TMC2209_enable(TMC2209_HandleTypeDef * htmc)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  htmc->chopper_config.toff = htmc->toff;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7f1b      	ldrb	r3, [r3, #28]
 80006c4:	f003 030f 	and.w	r3, r3, #15
 80006c8:	b2d9      	uxtb	r1, r3
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	7c13      	ldrb	r3, [r2, #16]
 80006ce:	f361 0303 	bfi	r3, r1, #0, #4
 80006d2:	7413      	strb	r3, [r2, #16]
  writeStoredChopperConfig(htmc);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 fa31 	bl	8000b3c <writeStoredChopperConfig>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <TMC2209_disable>:

void TMC2209_disable(TMC2209_HandleTypeDef * htmc)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  htmc->chopper_config.toff = TOFF_DISABLE;
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	7c13      	ldrb	r3, [r2, #16]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	7413      	strb	r3, [r2, #16]
  writeStoredChopperConfig(htmc);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 fa21 	bl	8000b3c <writeStoredChopperConfig>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <TMC2209_setRunCurrent>:
  }
  writeStoredChopperConfig(htmc);
}

void TMC2209_setRunCurrent(TMC2209_HandleTypeDef * htmc, uint8_t percent)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	460b      	mov	r3, r1
 800070c:	70fb      	strb	r3, [r7, #3]
  uint8_t run_current = percentToCurrentSetting(percent);
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f9bc 	bl	8000a8e <percentToCurrentSetting>
 8000716:	4603      	mov	r3, r0
 8000718:	73fb      	strb	r3, [r7, #15]
  htmc->driver_current.irun = run_current;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	f003 031f 	and.w	r3, r3, #31
 8000720:	b2d9      	uxtb	r1, r3
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	7b53      	ldrb	r3, [r2, #13]
 8000726:	f361 0304 	bfi	r3, r1, #0, #5
 800072a:	7353      	strb	r3, [r2, #13]
  writeStoredDriverCurrent(htmc);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 f9d9 	bl	8000ae4 <writeStoredDriverCurrent>
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <TMC2209_disableAutomaticCurrentScaling>:
  htmc->pwm_config.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
  writeStoredPwmConfig(htmc);
}

void TMC2209_disableAutomaticCurrentScaling(TMC2209_HandleTypeDef * htmc)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
  htmc->pwm_config.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	7d93      	ldrb	r3, [r2, #22]
 8000746:	f023 0304 	bic.w	r3, r3, #4
 800074a:	7593      	strb	r3, [r2, #22]
  writeStoredPwmConfig(htmc);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 fa04 	bl	8000b5a <writeStoredPwmConfig>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <TMC2209_disableAutomaticGradientAdaptation>:
  htmc->pwm_config.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
  writeStoredPwmConfig(htmc);
}

void TMC2209_disableAutomaticGradientAdaptation(TMC2209_HandleTypeDef * htmc)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  htmc->pwm_config.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	7d93      	ldrb	r3, [r2, #22]
 8000766:	f023 0308 	bic.w	r3, r3, #8
 800076a:	7593      	strb	r3, [r2, #22]
  writeStoredPwmConfig(htmc);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f9f4 	bl	8000b5a <writeStoredPwmConfig>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <TMC2209_moveAtVelocity>:
  reply_delay_data.replydelay = reply_delay;
  writeRegister(htmc, ADDRESS_REPLYDELAY, reply_delay_data.bytes);
}

void TMC2209_moveAtVelocity(TMC2209_HandleTypeDef * htmc, int32_t microsteps_per_period)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	6039      	str	r1, [r7, #0]
  writeRegister(htmc, ADDRESS_VACTUAL, microsteps_per_period);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	2122      	movs	r1, #34	@ 0x22
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 f944 	bl	8000a18 <writeRegister>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <TMC2209_enableStealthChop>:
{
  writeRegister(htmc, ADDRESS_VACTUAL, VACTUAL_STEP_DIR_INTERFACE);
}

void TMC2209_enableStealthChop(TMC2209_HandleTypeDef * htmc)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  htmc->global_config.enable_spread_cycle = 0;
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	7a13      	ldrb	r3, [r2, #8]
 80007a4:	f023 0304 	bic.w	r3, r3, #4
 80007a8:	7213      	strb	r3, [r2, #8]
  writeStoredGlobalConfig(htmc);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f000 f98b 	bl	8000ac6 <writeStoredGlobalConfig>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <TMC2209_disableStealthChop>:

void TMC2209_disableStealthChop(TMC2209_HandleTypeDef * htmc)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  htmc->global_config.enable_spread_cycle = 1;
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	7a13      	ldrb	r3, [r2, #8]
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	7213      	strb	r3, [r2, #8]
  writeStoredGlobalConfig(htmc);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f97b 	bl	8000ac6 <writeStoredGlobalConfig>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <TMC2209_clearDriveError>:
  global_status_union.global_status.reset = 1;
  writeRegister(htmc, ADDRESS_GSTAT, global_status_union.bytes);
}

void TMC2209_clearDriveError(TMC2209_HandleTypeDef * htmc)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  TMC2209_GlobalStatusUnion_t global_status_union;
  global_status_union.bytes = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  global_status_union.global_status.drv_err = 1;
 80007e4:	7b3b      	ldrb	r3, [r7, #12]
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	733b      	strb	r3, [r7, #12]
  writeRegister(htmc, ADDRESS_GSTAT, global_status_union.bytes);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	461a      	mov	r2, r3
 80007f0:	2101      	movs	r1, #1
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 f910 	bl	8000a18 <writeRegister>
}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <serialWrite>:
}

// private helper functions

static HAL_StatusTypeDef serialWrite(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	4613      	mov	r3, r2
 800080c:	80fb      	strh	r3, [r7, #6]
  if (huart != NULL)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00a      	beq.n	800082a <serialWrite+0x2a>
    // or using a specific UART mode if available.
    // For a generic HAL approach, we'll assume the UART is configured for half-duplex
    // or that the DE pin is handled externally or by the HAL configuration.
    // If using a DE pin, you would assert it here before transmitting.

    HAL_StatusTypeDef status = HAL_UART_Transmit(huart, data, size, HAL_MAX_DELAY);
 8000814:	88fa      	ldrh	r2, [r7, #6]
 8000816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800081a:	68b9      	ldr	r1, [r7, #8]
 800081c:	68f8      	ldr	r0, [r7, #12]
 800081e:	f002 fa03 	bl	8002c28 <HAL_UART_Transmit>
 8000822:	4603      	mov	r3, r0
 8000824:	75fb      	strb	r3, [r7, #23]

    // If using a DE pin, you would deassert it here after transmitting.

    return status;
 8000826:	7dfb      	ldrb	r3, [r7, #23]
 8000828:	e000      	b.n	800082c <serialWrite+0x2c>
  }
  return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <minimizeMotorCurrent>:

  return global_config.pdn_disable;
}

static void minimizeMotorCurrent(TMC2209_HandleTypeDef * htmc)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  htmc->driver_current.irun = CURRENT_SETTING_MIN;
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	7b53      	ldrb	r3, [r2, #13]
 8000840:	f023 031f 	bic.w	r3, r3, #31
 8000844:	7353      	strb	r3, [r2, #13]
  htmc->driver_current.ihold = CURRENT_SETTING_MIN;
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	7b13      	ldrb	r3, [r2, #12]
 800084a:	f023 031f 	bic.w	r3, r3, #31
 800084e:	7313      	strb	r3, [r2, #12]
  writeStoredDriverCurrent(htmc);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f000 f947 	bl	8000ae4 <writeStoredDriverCurrent>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <reverseData>:

static uint32_t reverseData(uint32_t data)
{
 800085e:	b480      	push	{r7}
 8000860:	b085      	sub	sp, #20
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  uint32_t reversed_data = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  uint8_t right_shift;
  uint8_t left_shift;
  for (uint8_t i=0; i<DATA_SIZE; ++i)
 800086a:	2300      	movs	r3, #0
 800086c:	72fb      	strb	r3, [r7, #11]
 800086e:	e016      	b.n	800089e <reverseData+0x40>
  {
    right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	f1c3 0303 	rsb	r3, r3, #3
 8000876:	b2db      	uxtb	r3, r3
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	72bb      	strb	r3, [r7, #10]
    left_shift = i * BITS_PER_BYTE;
 800087c:	7afb      	ldrb	r3, [r7, #11]
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	727b      	strb	r3, [r7, #9]
    reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8000882:	7abb      	ldrb	r3, [r7, #10]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	fa22 f303 	lsr.w	r3, r2, r3
 800088a:	b2da      	uxtb	r2, r3
 800088c:	7a7b      	ldrb	r3, [r7, #9]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	4313      	orrs	r3, r2
 8000896:	60fb      	str	r3, [r7, #12]
  for (uint8_t i=0; i<DATA_SIZE; ++i)
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	3301      	adds	r3, #1
 800089c:	72fb      	strb	r3, [r7, #11]
 800089e:	7afb      	ldrb	r3, [r7, #11]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d9e5      	bls.n	8000870 <reverseData+0x12>
  }
  return reversed_data;
 80008a4:	68fb      	ldr	r3, [r7, #12]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <calculateCrc>:

static uint8_t calculateCrc(uint64_t datagram_bytes, uint8_t datagram_size)
{
 80008b0:	b4f0      	push	{r4, r5, r6, r7}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80008ba:	4613      	mov	r3, r2
 80008bc:	71fb      	strb	r3, [r7, #7]
  uint8_t crc = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	75fb      	strb	r3, [r7, #23]
  uint8_t byte;
  for (uint8_t i=0; i<(datagram_size - 1); ++i)
 80008c2:	2300      	movs	r3, #0
 80008c4:	757b      	strb	r3, [r7, #21]
 80008c6:	e037      	b.n	8000938 <calculateCrc+0x88>
  {
    byte = (datagram_bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80008c8:	7d7b      	ldrb	r3, [r7, #21]
 80008ca:	00d9      	lsls	r1, r3, #3
 80008cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80008d0:	f1c1 0620 	rsb	r6, r1, #32
 80008d4:	f1a1 0020 	sub.w	r0, r1, #32
 80008d8:	fa22 f401 	lsr.w	r4, r2, r1
 80008dc:	fa03 f606 	lsl.w	r6, r3, r6
 80008e0:	4334      	orrs	r4, r6
 80008e2:	fa23 f000 	lsr.w	r0, r3, r0
 80008e6:	4304      	orrs	r4, r0
 80008e8:	fa23 f501 	lsr.w	r5, r3, r1
 80008ec:	4623      	mov	r3, r4
 80008ee:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j=0; j<BITS_PER_BYTE; ++j)
 80008f0:	2300      	movs	r3, #0
 80008f2:	753b      	strb	r3, [r7, #20]
 80008f4:	e01a      	b.n	800092c <calculateCrc+0x7c>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 80008f6:	7dfb      	ldrb	r3, [r7, #23]
 80008f8:	09db      	lsrs	r3, r3, #7
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	7dbb      	ldrb	r3, [r7, #22]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	429a      	cmp	r2, r3
 8000906:	d008      	beq.n	800091a <calculateCrc+0x6a>
      {
        crc = (crc << 1) ^ 0x07;
 8000908:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	b25b      	sxtb	r3, r3
 8000910:	f083 0307 	eor.w	r3, r3, #7
 8000914:	b25b      	sxtb	r3, r3
 8000916:	75fb      	strb	r3, [r7, #23]
 8000918:	e002      	b.n	8000920 <calculateCrc+0x70>
      }
      else
      {
        crc = crc << 1;
 800091a:	7dfb      	ldrb	r3, [r7, #23]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	75fb      	strb	r3, [r7, #23]
      }
      byte = byte >> 1;
 8000920:	7dbb      	ldrb	r3, [r7, #22]
 8000922:	085b      	lsrs	r3, r3, #1
 8000924:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j=0; j<BITS_PER_BYTE; ++j)
 8000926:	7d3b      	ldrb	r3, [r7, #20]
 8000928:	3301      	adds	r3, #1
 800092a:	753b      	strb	r3, [r7, #20]
 800092c:	7d3b      	ldrb	r3, [r7, #20]
 800092e:	2b07      	cmp	r3, #7
 8000930:	d9e1      	bls.n	80008f6 <calculateCrc+0x46>
  for (uint8_t i=0; i<(datagram_size - 1); ++i)
 8000932:	7d7b      	ldrb	r3, [r7, #21]
 8000934:	3301      	adds	r3, #1
 8000936:	757b      	strb	r3, [r7, #21]
 8000938:	7d7a      	ldrb	r2, [r7, #21]
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	3b01      	subs	r3, #1
 800093e:	429a      	cmp	r2, r3
 8000940:	dbc2      	blt.n	80008c8 <calculateCrc+0x18>
    }
  }
  return crc;
 8000942:	7dfb      	ldrb	r3, [r7, #23]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bcf0      	pop	{r4, r5, r6, r7}
 800094c:	4770      	bx	lr

0800094e <sendDatagramUnidirectional>:

static void sendDatagramUnidirectional(UART_HandleTypeDef *huart, uint64_t datagram_bytes, uint8_t datagram_size)
{
 800094e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000952:	b089      	sub	sp, #36	@ 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	e9c7 2300 	strd	r2, r3, [r7]
 800095c:	466b      	mov	r3, sp
 800095e:	60bb      	str	r3, [r7, #8]
  uint8_t byte;
  uint8_t data_buffer[datagram_size];
 8000960:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8000964:	460b      	mov	r3, r1
 8000966:	3b01      	subs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	b2cb      	uxtb	r3, r1
 800096c:	2200      	movs	r2, #0
 800096e:	469a      	mov	sl, r3
 8000970:	4693      	mov	fp, r2
 8000972:	f04f 0200 	mov.w	r2, #0
 8000976:	f04f 0300 	mov.w	r3, #0
 800097a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800097e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000986:	b2cb      	uxtb	r3, r1
 8000988:	2200      	movs	r2, #0
 800098a:	4698      	mov	r8, r3
 800098c:	4691      	mov	r9, r2
 800098e:	f04f 0200 	mov.w	r2, #0
 8000992:	f04f 0300 	mov.w	r3, #0
 8000996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800099a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800099e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009a2:	460b      	mov	r3, r1
 80009a4:	3307      	adds	r3, #7
 80009a6:	08db      	lsrs	r3, r3, #3
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	ebad 0d03 	sub.w	sp, sp, r3
 80009ae:	466b      	mov	r3, sp
 80009b0:	3300      	adds	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  for (uint8_t i=0; i<datagram_size; ++i)
 80009b4:	2300      	movs	r3, #0
 80009b6:	77fb      	strb	r3, [r7, #31]
 80009b8:	e01a      	b.n	80009f0 <sendDatagramUnidirectional+0xa2>
  {
    byte = (datagram_bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80009ba:	7ffb      	ldrb	r3, [r7, #31]
 80009bc:	00d9      	lsls	r1, r3, #3
 80009be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009c2:	f1c1 0620 	rsb	r6, r1, #32
 80009c6:	f1a1 0020 	sub.w	r0, r1, #32
 80009ca:	fa22 f401 	lsr.w	r4, r2, r1
 80009ce:	fa03 f606 	lsl.w	r6, r3, r6
 80009d2:	4334      	orrs	r4, r6
 80009d4:	fa23 f000 	lsr.w	r0, r3, r0
 80009d8:	4304      	orrs	r4, r0
 80009da:	fa23 f501 	lsr.w	r5, r3, r1
 80009de:	4623      	mov	r3, r4
 80009e0:	74fb      	strb	r3, [r7, #19]
    data_buffer[i] = byte;
 80009e2:	7ffb      	ldrb	r3, [r7, #31]
 80009e4:	697a      	ldr	r2, [r7, #20]
 80009e6:	7cf9      	ldrb	r1, [r7, #19]
 80009e8:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i=0; i<datagram_size; ++i)
 80009ea:	7ffb      	ldrb	r3, [r7, #31]
 80009ec:	3301      	adds	r3, #1
 80009ee:	77fb      	strb	r3, [r7, #31]
 80009f0:	7ffa      	ldrb	r2, [r7, #31]
 80009f2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d3df      	bcc.n	80009ba <sendDatagramUnidirectional+0x6c>
  }
  serialWrite(huart, data_buffer, datagram_size);
 80009fa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	6979      	ldr	r1, [r7, #20]
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f7ff fefb 	bl	8000800 <serialWrite>
 8000a0a:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8000a0e:	bf00      	nop
 8000a10:	3724      	adds	r7, #36	@ 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000a18 <writeRegister>:
  // the reply directly.
}

static void writeRegister(TMC2209_HandleTypeDef *htmc, uint8_t register_address,
  uint32_t data)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	460b      	mov	r3, r1
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	72fb      	strb	r3, [r7, #11]
  TMC2209_WriteReadReplyDatagram_t write_datagram;
  write_datagram.bytes = 0;
 8000a26:	f04f 0200 	mov.w	r2, #0
 8000a2a:	f04f 0300 	mov.w	r3, #0
 8000a2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  write_datagram.sync = SYNC;
 8000a32:	7c3b      	ldrb	r3, [r7, #16]
 8000a34:	2205      	movs	r2, #5
 8000a36:	f362 0303 	bfi	r3, r2, #0, #4
 8000a3a:	743b      	strb	r3, [r7, #16]
  write_datagram.serial_address = htmc->serial_address;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	747b      	strb	r3, [r7, #17]
  write_datagram.register_address = register_address;
 8000a42:	7afb      	ldrb	r3, [r7, #11]
 8000a44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	7cbb      	ldrb	r3, [r7, #18]
 8000a4c:	f362 0306 	bfi	r3, r2, #0, #7
 8000a50:	74bb      	strb	r3, [r7, #18]
  write_datagram.rw = RW_WRITE;
 8000a52:	7cbb      	ldrb	r3, [r7, #18]
 8000a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a58:	74bb      	strb	r3, [r7, #18]
  write_datagram.data = reverseData(data);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff feff 	bl	800085e <reverseData>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f8c7 3013 	str.w	r3, [r7, #19]
  write_datagram.crc = calculateCrc(write_datagram.bytes, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8000a66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	f7ff ff20 	bl	80008b0 <calculateCrc>
 8000a70:	4603      	mov	r3, r0
 8000a72:	75fb      	strb	r3, [r7, #23]

  sendDatagramUnidirectional(htmc->huart, write_datagram.bytes, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	6819      	ldr	r1, [r3, #0]
 8000a78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a7c:	2008      	movs	r0, #8
 8000a7e:	9000      	str	r0, [sp, #0]
 8000a80:	4608      	mov	r0, r1
 8000a82:	f7ff ff64 	bl	800094e <sendDatagramUnidirectional>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <percentToCurrentSetting>:

  return 0; // Return 0 if all retries fail
}

static uint8_t percentToCurrentSetting(uint8_t percent)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
  uint8_t constrained_percent = constrain_uint32(percent,
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2264      	movs	r2, #100	@ 0x64
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f86a 	bl	8000b78 <constrain_uint32>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	73fb      	strb	r3, [r7, #15]
    PERCENT_MIN,
    PERCENT_MAX);
  uint8_t current_setting = map_uint8(constrained_percent,
 8000aa8:	7bf8      	ldrb	r0, [r7, #15]
 8000aaa:	231f      	movs	r3, #31
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	2264      	movs	r2, #100	@ 0x64
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f000 f876 	bl	8000ba4 <map_uint8>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73bb      	strb	r3, [r7, #14]
    PERCENT_MIN,
    PERCENT_MAX,
    CURRENT_SETTING_MIN,
    CURRENT_SETTING_MAX);
  return current_setting;
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <writeStoredGlobalConfig>:
    PERCENT_MAX);
  return percent;
}

static void writeStoredGlobalConfig(TMC2209_HandleTypeDef *htmc)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_GCONF, htmc->global_config.bytes);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff9e 	bl	8000a18 <writeRegister>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <writeStoredDriverCurrent>:
{
  return readRegister(htmc, ADDRESS_GCONF);
}

static void writeStoredDriverCurrent(TMC2209_HandleTypeDef *htmc)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_IHOLD_IRUN, htmc->driver_current.bytes);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	461a      	mov	r2, r3
 8000af2:	2110      	movs	r1, #16
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff8f 	bl	8000a18 <writeRegister>

  if (htmc->driver_current.irun >= SEIMIN_UPPER_CURRENT_LIMIT)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7b5b      	ldrb	r3, [r3, #13]
 8000afe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b13      	cmp	r3, #19
 8000b06:	d905      	bls.n	8000b14 <writeStoredDriverCurrent+0x30>
  {
    htmc->cool_config.seimin = SEIMIN_UPPER_SETTING;
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	7e53      	ldrb	r3, [r2, #25]
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b10:	7653      	strb	r3, [r2, #25]
 8000b12:	e004      	b.n	8000b1e <writeStoredDriverCurrent+0x3a>
  }
  else
  {
    htmc->cool_config.seimin = SEIMIN_LOWER_SETTING;
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	7e53      	ldrb	r3, [r2, #25]
 8000b18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b1c:	7653      	strb	r3, [r2, #25]
  }
  if (htmc->cool_step_enabled)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7f5b      	ldrb	r3, [r3, #29]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d006      	beq.n	8000b34 <writeStoredDriverCurrent+0x50>
  {
    writeRegister(htmc, ADDRESS_COOLCONF, htmc->cool_config.bytes);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2142      	movs	r1, #66	@ 0x42
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ff72 	bl	8000a18 <writeRegister>
  }
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <writeStoredChopperConfig>:

static void writeStoredChopperConfig(TMC2209_HandleTypeDef *htmc)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_CHOPCONF, htmc->chopper_config.bytes);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	216c      	movs	r1, #108	@ 0x6c
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff63 	bl	8000a18 <writeRegister>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <writeStoredPwmConfig>:
{
  return readRegister(htmc, ADDRESS_CHOPCONF);
}

static void writeStoredPwmConfig(TMC2209_HandleTypeDef *htmc)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  writeRegister(htmc, ADDRESS_PWMCONF, htmc->pwm_config.bytes);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	461a      	mov	r2, r3
 8000b68:	2170      	movs	r1, #112	@ 0x70
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff54 	bl	8000a18 <writeRegister>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <constrain_uint32>:
{
  return readRegister(htmc, ADDRESS_PWMCONF);
}

static uint32_t constrain_uint32(uint32_t value, uint32_t low, uint32_t high)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  return ((value)<(low)?(low):((value)>(high)?(high):(value)));
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d305      	bcc.n	8000b98 <constrain_uint32+0x20>
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4293      	cmp	r3, r2
 8000b92:	bf28      	it	cs
 8000b94:	4613      	movcs	r3, r2
 8000b96:	e000      	b.n	8000b9a <constrain_uint32+0x22>
 8000b98:	68bb      	ldr	r3, [r7, #8]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <map_uint8>:

static uint8_t map_uint8(uint8_t x, uint8_t in_min, uint8_t in_max, uint8_t out_min, uint8_t out_max)
{
 8000ba4:	b490      	push	{r4, r7}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4604      	mov	r4, r0
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4623      	mov	r3, r4
 8000bb4:	71fb      	strb	r3, [r7, #7]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71bb      	strb	r3, [r7, #6]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	717b      	strb	r3, [r7, #5]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	713b      	strb	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	79bb      	ldrb	r3, [r7, #6]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	7c39      	ldrb	r1, [r7, #16]
 8000bca:	793a      	ldrb	r2, [r7, #4]
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	fb03 f202 	mul.w	r2, r3, r2
 8000bd2:	7979      	ldrb	r1, [r7, #5]
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	1acb      	subs	r3, r1, r3
 8000bd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	793b      	ldrb	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	b2db      	uxtb	r3, r3
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc90      	pop	{r4, r7}
 8000bec:	4770      	bx	lr
	...

08000bf0 <TMC2209_init>:


void TMC2209_init(TMC2209_HandleTypeDef * htmc)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    // HAL_UART_Init(htmc->huart); // Assuming UART is already initialized by CubeMX

    // Initialize the driver
    htmc->serial_address = htmc->serial_address; // Redundant, but keeps the structure
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	791a      	ldrb	r2, [r3, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	711a      	strb	r2, [r3, #4]

    // Set operation mode to serial
    htmc->global_config.bytes = 0;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
    htmc->global_config.i_scale_analog = 0;
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	7a13      	ldrb	r3, [r2, #8]
 8000c0a:	f023 0301 	bic.w	r3, r3, #1
 8000c0e:	7213      	strb	r3, [r2, #8]
    htmc->global_config.pdn_disable = 1;
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	7a13      	ldrb	r3, [r2, #8]
 8000c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c18:	7213      	strb	r3, [r2, #8]
    htmc->global_config.mstep_reg_select = 1;
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	7a13      	ldrb	r3, [r2, #8]
 8000c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c22:	7213      	strb	r3, [r2, #8]
    htmc->global_config.multistep_filt = 1;
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	7a53      	ldrb	r3, [r2, #9]
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	7253      	strb	r3, [r2, #9]
    writeStoredGlobalConfig(htmc);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ff49 	bl	8000ac6 <writeStoredGlobalConfig>

    // Set registers to defaults
    htmc->driver_current.bytes = 0;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
    htmc->driver_current.ihold = IHOLD_DEFAULT;
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	7b13      	ldrb	r3, [r2, #12]
 8000c3e:	2110      	movs	r1, #16
 8000c40:	f361 0304 	bfi	r3, r1, #0, #5
 8000c44:	7313      	strb	r3, [r2, #12]
    htmc->driver_current.irun = IRUN_DEFAULT;
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	7b53      	ldrb	r3, [r2, #13]
 8000c4a:	f043 031f 	orr.w	r3, r3, #31
 8000c4e:	7353      	strb	r3, [r2, #13]
    htmc->driver_current.iholddelay = IHOLDDELAY_DEFAULT;
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	7b93      	ldrb	r3, [r2, #14]
 8000c54:	2101      	movs	r1, #1
 8000c56:	f361 0303 	bfi	r3, r1, #0, #4
 8000c5a:	7393      	strb	r3, [r2, #14]
    writeRegister(htmc, ADDRESS_IHOLD_IRUN, htmc->driver_current.bytes);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	461a      	mov	r2, r3
 8000c62:	2110      	movs	r1, #16
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff fed7 	bl	8000a18 <writeRegister>

    htmc->chopper_config.bytes = CHOPPER_CONFIG_DEFAULT;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a32      	ldr	r2, [pc, #200]	@ (8000d38 <TMC2209_init+0x148>)
 8000c6e:	611a      	str	r2, [r3, #16]
    htmc->chopper_config.tbl = TBL_DEFAULT;
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6913      	ldr	r3, [r2, #16]
 8000c74:	2102      	movs	r1, #2
 8000c76:	f361 33d0 	bfi	r3, r1, #15, #2
 8000c7a:	6113      	str	r3, [r2, #16]
    htmc->chopper_config.hend = HEND_DEFAULT;
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	8a13      	ldrh	r3, [r2, #16]
 8000c80:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
 8000c84:	8213      	strh	r3, [r2, #16]
    htmc->chopper_config.hstart = HSTART_DEFAULT;
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	7c13      	ldrb	r3, [r2, #16]
 8000c8a:	2105      	movs	r1, #5
 8000c8c:	f361 1306 	bfi	r3, r1, #4, #3
 8000c90:	7413      	strb	r3, [r2, #16]
    htmc->chopper_config.toff = TOFF_DEFAULT;
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	7c13      	ldrb	r3, [r2, #16]
 8000c96:	2103      	movs	r1, #3
 8000c98:	f361 0303 	bfi	r3, r1, #0, #4
 8000c9c:	7413      	strb	r3, [r2, #16]
    writeRegister(htmc, ADDRESS_CHOPCONF, htmc->chopper_config.bytes);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	216c      	movs	r1, #108	@ 0x6c
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff feb6 	bl	8000a18 <writeRegister>

    htmc->pwm_config.bytes = PWM_CONFIG_DEFAULT;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a23      	ldr	r2, [pc, #140]	@ (8000d3c <TMC2209_init+0x14c>)
 8000cb0:	615a      	str	r2, [r3, #20]
    writeRegister(htmc, ADDRESS_PWMCONF, htmc->pwm_config.bytes);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2170      	movs	r1, #112	@ 0x70
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff feac 	bl	8000a18 <writeRegister>

    htmc->cool_config.bytes = COOLCONF_DEFAULT;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
    writeRegister(htmc, ADDRESS_COOLCONF, htmc->cool_config.bytes);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	2142      	movs	r1, #66	@ 0x42
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fea2 	bl	8000a18 <writeRegister>

    writeRegister(htmc, ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8000cd4:	2214      	movs	r2, #20
 8000cd6:	2111      	movs	r1, #17
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fe9d 	bl	8000a18 <writeRegister>
    writeRegister(htmc, ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2113      	movs	r1, #19
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fe98 	bl	8000a18 <writeRegister>
    writeRegister(htmc, ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2122      	movs	r1, #34	@ 0x22
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fe93 	bl	8000a18 <writeRegister>
    writeRegister(htmc, ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2114      	movs	r1, #20
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff fe8e 	bl	8000a18 <writeRegister>
    writeRegister(htmc, ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2140      	movs	r1, #64	@ 0x40
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fe89 	bl	8000a18 <writeRegister>
    writeRegister(htmc, ADDRESS_COOLCONF, COOLCONF_DEFAULT); // Written twice in original, keeping for now
 8000d06:	2200      	movs	r2, #0
 8000d08:	2142      	movs	r1, #66	@ 0x42
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fe84 	bl	8000a18 <writeRegister>

    TMC2209_clearDriveError(htmc);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff fd61 	bl	80007d8 <TMC2209_clearDriveError>
    minimizeMotorCurrent(htmc);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fd8c 	bl	8000834 <minimizeMotorCurrent>
    TMC2209_disable(htmc);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fce0 	bl	80006e2 <TMC2209_disable>
    TMC2209_disableAutomaticCurrentScaling(htmc);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fd09 	bl	800073a <TMC2209_disableAutomaticCurrentScaling>
    TMC2209_disableAutomaticGradientAdaptation(htmc);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fd16 	bl	800075a <TMC2209_disableAutomaticGradientAdaptation>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	10000053 	.word	0x10000053
 8000d3c:	c10d0024 	.word	0xc10d0024

08000d40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d54:	4b35      	ldr	r3, [pc, #212]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a34      	ldr	r2, [pc, #208]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b32      	ldr	r3, [pc, #200]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0310 	and.w	r3, r3, #16
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a2e      	ldr	r2, [pc, #184]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000d72:	f043 0320 	orr.w	r3, r3, #32
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b2c      	ldr	r3, [pc, #176]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0320 	and.w	r3, r3, #32
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a28      	ldr	r2, [pc, #160]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b26      	ldr	r3, [pc, #152]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	4b23      	ldr	r3, [pc, #140]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a22      	ldr	r2, [pc, #136]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000da2:	f043 0308 	orr.w	r3, r3, #8
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b20      	ldr	r3, [pc, #128]	@ (8000e2c <MX_GPIO_Init+0xec>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000dba:	481d      	ldr	r0, [pc, #116]	@ (8000e30 <MX_GPIO_Init+0xf0>)
 8000dbc:	f001 f89b 	bl	8001ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000dc6:	481b      	ldr	r0, [pc, #108]	@ (8000e34 <MX_GPIO_Init+0xf4>)
 8000dc8:	f001 f895 	bl	8001ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8000dcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	4815      	ldr	r0, [pc, #84]	@ (8000e38 <MX_GPIO_Init+0xf8>)
 8000de2:	f000 feed 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 8000de6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_GPIO_Init+0xf0>)
 8000e00:	f000 fede 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin;
 8000e04:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <MX_GPIO_Init+0xf4>)
 8000e1e:	f000 fecf 	bl	8001bc0 <HAL_GPIO_Init>

}
 8000e22:	bf00      	nop
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010c00 	.word	0x40010c00
 8000e34:	40010800 	.word	0x40010800
 8000e38:	40011000 	.word	0x40011000

08000e3c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000e3c:	b5b0      	push	{r4, r5, r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000e4a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000e4e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 8000e52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000e56:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 8000e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e5a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000e5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000e5e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 f80e 	bl	8000e92 <Lcd_init>

	return lcd;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	461d      	mov	r5, r3
 8000e7a:	f107 0410 	add.w	r4, r7, #16
 8000e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e86:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	3728      	adds	r7, #40	@ 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bdb0      	pop	{r4, r5, r7, pc}

08000e92 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7d9b      	ldrb	r3, [r3, #22]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000ea2:	2133      	movs	r1, #51	@ 0x33
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f86f 	bl	8000f88 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000eaa:	2132      	movs	r1, #50	@ 0x32
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f86b 	bl	8000f88 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000eb2:	2128      	movs	r1, #40	@ 0x28
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f867 	bl	8000f88 <lcd_write_command>
 8000eba:	e003      	b.n	8000ec4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000ebc:	2138      	movs	r1, #56	@ 0x38
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f862 	bl	8000f88 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 f85e 	bl	8000f88 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000ecc:	210c      	movs	r1, #12
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f85a 	bl	8000f88 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000ed4:	2106      	movs	r1, #6
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f856 	bl	8000f88 <lcd_write_command>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	4906      	ldr	r1, [pc, #24]	@ (8000f10 <Lcd_int+0x2c>)
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 f86a 	bl	8002fd0 <siprintf>

	Lcd_string(lcd, buffer);
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f806 	bl	8000f14 <Lcd_string>
}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	08003948 	.word	0x08003948

08000f14 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e00a      	b.n	8000f3a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	4413      	add	r3, r2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f858 	bl	8000fe4 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	3301      	adds	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	7bfc      	ldrb	r4, [r7, #15]
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f7ff f905 	bl	800014c <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	429c      	cmp	r4, r3
 8000f46:	d3ed      	bcc.n	8000f24 <Lcd_string+0x10>
	}
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
	...

08000f54 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
 8000f60:	4613      	mov	r3, r2
 8000f62:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <Lcd_cursor+0x30>)
 8000f68:	5cd2      	ldrb	r2, [r2, r3]
 8000f6a:	78bb      	ldrb	r3, [r7, #2]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	3b80      	subs	r3, #128	@ 0x80
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f806 	bl	8000f88 <lcd_write_command>
	#endif
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	08003964 	.word	0x08003964

08000f88 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6898      	ldr	r0, [r3, #8]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	899b      	ldrh	r3, [r3, #12]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f000 ffa9 	bl	8001ef6 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7d9b      	ldrb	r3, [r3, #22]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d111      	bne.n	8000fd0 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f842 	bl	8001040 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f839 	bl	8001040 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000fce:	e005      	b.n	8000fdc <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2208      	movs	r2, #8
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f832 	bl	8001040 <lcd_write>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6898      	ldr	r0, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	899b      	ldrh	r3, [r3, #12]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f000 ff7b 	bl	8001ef6 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7d9b      	ldrb	r3, [r3, #22]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d111      	bne.n	800102c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2204      	movs	r2, #4
 8001010:	4619      	mov	r1, r3
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f814 	bl	8001040 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2204      	movs	r2, #4
 8001022:	4619      	mov	r1, r3
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f80b 	bl	8001040 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800102a:	e005      	b.n	8001038 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	2208      	movs	r2, #8
 8001030:	4619      	mov	r1, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f804 	bl	8001040 <lcd_write>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
 800104c:	4613      	mov	r3, r2
 800104e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e019      	b.n	800108a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	8819      	ldrh	r1, [r3, #0]
 800106e:	78fa      	ldrb	r2, [r7, #3]
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	fa42 f303 	asr.w	r3, r2, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	f000 ff39 	bl	8001ef6 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	3301      	adds	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	78bb      	ldrb	r3, [r7, #2]
 800108e:	429a      	cmp	r2, r3
 8001090:	d3e1      	bcc.n	8001056 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6918      	ldr	r0, [r3, #16]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	8a9b      	ldrh	r3, [r3, #20]
 800109a:	2201      	movs	r2, #1
 800109c:	4619      	mov	r1, r3
 800109e:	f000 ff2a 	bl	8001ef6 <HAL_GPIO_WritePin>
	DELAY(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f000 fc84 	bl	80019b0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6918      	ldr	r0, [r3, #16]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	8a9b      	ldrh	r3, [r3, #20]
 80010b0:	2200      	movs	r2, #0
 80010b2:	4619      	mov	r1, r3
 80010b4:	f000 ff1f 	bl	8001ef6 <HAL_GPIO_WritePin>
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <handle_motor_movement>:
/* USER CODE BEGIN 0 */



void handle_motor_movement(TMC2209_HandleTypeDef* htmc, uint32_t accel, uint32_t distance, float speed)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b08b      	sub	sp, #44	@ 0x2c
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  while (true)
  {

    for (int i = 0; i <= accel; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010d2:	e029      	b.n	8001128 <handle_motor_movement+0x68>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 80010d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010d8:	489d      	ldr	r0, [pc, #628]	@ (8001350 <handle_motor_movement+0x290>)
 80010da:	f000 fef5 	bl	8001ec8 <HAL_GPIO_ReadPin>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 811f 	beq.w	8001324 <handle_motor_movement+0x264>
      TMC2209_moveAtVelocity(htmc, speed * i / accel);
 80010e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010e8:	f7ff f8f2 	bl	80002d0 <__aeabi_i2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6839      	ldr	r1, [r7, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f941 	bl	8000378 <__aeabi_fmul>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461c      	mov	r4, r3
 80010fa:	68b8      	ldr	r0, [r7, #8]
 80010fc:	f7ff f8e4 	bl	80002c8 <__aeabi_ui2f>
 8001100:	4603      	mov	r3, r0
 8001102:	4619      	mov	r1, r3
 8001104:	4620      	mov	r0, r4
 8001106:	f7ff f9eb 	bl	80004e0 <__aeabi_fdiv>
 800110a:	4603      	mov	r3, r0
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa83 	bl	8000618 <__aeabi_f2iz>
 8001112:	4603      	mov	r3, r0
 8001114:	4619      	mov	r1, r3
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff fb2f 	bl	800077a <TMC2209_moveAtVelocity>
      HAL_Delay(2);
 800111c:	2002      	movs	r0, #2
 800111e:	f000 fc47 	bl	80019b0 <HAL_Delay>
    for (int i = 0; i <= accel; i++)
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	3301      	adds	r3, #1
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	429a      	cmp	r2, r3
 800112e:	d2d1      	bcs.n	80010d4 <handle_motor_movement+0x14>
    }
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001130:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001134:	4886      	ldr	r0, [pc, #536]	@ (8001350 <handle_motor_movement+0x290>)
 8001136:	f000 fec7 	bl	8001ec8 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80f3 	beq.w	8001328 <handle_motor_movement+0x268>
    TMC2209_moveAtVelocity(htmc, speed);
 8001142:	6838      	ldr	r0, [r7, #0]
 8001144:	f7ff fa68 	bl	8000618 <__aeabi_f2iz>
 8001148:	4603      	mov	r3, r0
 800114a:	4619      	mov	r1, r3
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff fb14 	bl	800077a <TMC2209_moveAtVelocity>
    for (int j = 0; j < distance; j++)
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	e00e      	b.n	8001176 <handle_motor_movement+0xb6>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001158:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800115c:	487c      	ldr	r0, [pc, #496]	@ (8001350 <handle_motor_movement+0x290>)
 800115e:	f000 feb3 	bl	8001ec8 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80e1 	beq.w	800132c <handle_motor_movement+0x26c>
      HAL_Delay(10);
 800116a:	200a      	movs	r0, #10
 800116c:	f000 fc20 	bl	80019b0 <HAL_Delay>
    for (int j = 0; j < distance; j++)
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	3301      	adds	r3, #1
 8001174:	623b      	str	r3, [r7, #32]
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	429a      	cmp	r2, r3
 800117c:	d8ec      	bhi.n	8001158 <handle_motor_movement+0x98>
    }
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 800117e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001182:	4873      	ldr	r0, [pc, #460]	@ (8001350 <handle_motor_movement+0x290>)
 8001184:	f000 fea0 	bl	8001ec8 <HAL_GPIO_ReadPin>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 80d0 	beq.w	8001330 <handle_motor_movement+0x270>
    for (int i = accel; i > 0; i--)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	e029      	b.n	80011ea <handle_motor_movement+0x12a>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001196:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800119a:	486d      	ldr	r0, [pc, #436]	@ (8001350 <handle_motor_movement+0x290>)
 800119c:	f000 fe94 	bl	8001ec8 <HAL_GPIO_ReadPin>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80c6 	beq.w	8001334 <handle_motor_movement+0x274>
      TMC2209_moveAtVelocity(htmc, speed * i / accel);
 80011a8:	69f8      	ldr	r0, [r7, #28]
 80011aa:	f7ff f891 	bl	80002d0 <__aeabi_i2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	6839      	ldr	r1, [r7, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f8e0 	bl	8000378 <__aeabi_fmul>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461c      	mov	r4, r3
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	f7ff f883 	bl	80002c8 <__aeabi_ui2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4620      	mov	r0, r4
 80011c8:	f7ff f98a 	bl	80004e0 <__aeabi_fdiv>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fa22 	bl	8000618 <__aeabi_f2iz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4619      	mov	r1, r3
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff face 	bl	800077a <TMC2209_moveAtVelocity>
      HAL_Delay(2);
 80011de:	2002      	movs	r0, #2
 80011e0:	f000 fbe6 	bl	80019b0 <HAL_Delay>
    for (int i = accel; i > 0; i--)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dcd2      	bgt.n	8001196 <handle_motor_movement+0xd6>
    }
    HAL_Delay(100);
 80011f0:	2064      	movs	r0, #100	@ 0x64
 80011f2:	f000 fbdd 	bl	80019b0 <HAL_Delay>

    for (int i = 0; i <= accel; i++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	e02c      	b.n	8001256 <handle_motor_movement+0x196>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 80011fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001200:	4853      	ldr	r0, [pc, #332]	@ (8001350 <handle_motor_movement+0x290>)
 8001202:	f000 fe61 	bl	8001ec8 <HAL_GPIO_ReadPin>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 8095 	beq.w	8001338 <handle_motor_movement+0x278>
      TMC2209_moveAtVelocity(htmc, - speed * i / accel);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001214:	69b8      	ldr	r0, [r7, #24]
 8001216:	f7ff f85b 	bl	80002d0 <__aeabi_i2f>
 800121a:	4603      	mov	r3, r0
 800121c:	4619      	mov	r1, r3
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff f8aa 	bl	8000378 <__aeabi_fmul>
 8001224:	4603      	mov	r3, r0
 8001226:	461c      	mov	r4, r3
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f7ff f84d 	bl	80002c8 <__aeabi_ui2f>
 800122e:	4603      	mov	r3, r0
 8001230:	4619      	mov	r1, r3
 8001232:	4620      	mov	r0, r4
 8001234:	f7ff f954 	bl	80004e0 <__aeabi_fdiv>
 8001238:	4603      	mov	r3, r0
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f9ec 	bl	8000618 <__aeabi_f2iz>
 8001240:	4603      	mov	r3, r0
 8001242:	4619      	mov	r1, r3
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f7ff fa98 	bl	800077a <TMC2209_moveAtVelocity>
      HAL_Delay(2);
 800124a:	2002      	movs	r0, #2
 800124c:	f000 fbb0 	bl	80019b0 <HAL_Delay>
    for (int i = 0; i <= accel; i++)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	3301      	adds	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	429a      	cmp	r2, r3
 800125c:	d2ce      	bcs.n	80011fc <handle_motor_movement+0x13c>
    }
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 800125e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001262:	483b      	ldr	r0, [pc, #236]	@ (8001350 <handle_motor_movement+0x290>)
 8001264:	f000 fe30 	bl	8001ec8 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d066      	beq.n	800133c <handle_motor_movement+0x27c>
    TMC2209_moveAtVelocity(htmc, -speed);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f9cf 	bl	8000618 <__aeabi_f2iz>
 800127a:	4603      	mov	r3, r0
 800127c:	4619      	mov	r1, r3
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff fa7b 	bl	800077a <TMC2209_moveAtVelocity>
    for (int j = 0; j < distance; j++)
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	e00d      	b.n	80012a6 <handle_motor_movement+0x1e6>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 800128a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800128e:	4830      	ldr	r0, [pc, #192]	@ (8001350 <handle_motor_movement+0x290>)
 8001290:	f000 fe1a 	bl	8001ec8 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d052      	beq.n	8001340 <handle_motor_movement+0x280>
      HAL_Delay(10);
 800129a:	200a      	movs	r0, #10
 800129c:	f000 fb88 	bl	80019b0 <HAL_Delay>
    for (int j = 0; j < distance; j++)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d8ed      	bhi.n	800128a <handle_motor_movement+0x1ca>
    }
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 80012ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b2:	4827      	ldr	r0, [pc, #156]	@ (8001350 <handle_motor_movement+0x290>)
 80012b4:	f000 fe08 	bl	8001ec8 <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d042      	beq.n	8001344 <handle_motor_movement+0x284>
    for (int i = accel; i > 0; i--)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	e02b      	b.n	800131c <handle_motor_movement+0x25c>
    {
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 80012c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012c8:	4821      	ldr	r0, [pc, #132]	@ (8001350 <handle_motor_movement+0x290>)
 80012ca:	f000 fdfd 	bl	8001ec8 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d039      	beq.n	8001348 <handle_motor_movement+0x288>
      TMC2209_moveAtVelocity(htmc, - speed * i / accel);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80012da:	6938      	ldr	r0, [r7, #16]
 80012dc:	f7fe fff8 	bl	80002d0 <__aeabi_i2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4619      	mov	r1, r3
 80012e4:	4620      	mov	r0, r4
 80012e6:	f7ff f847 	bl	8000378 <__aeabi_fmul>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461c      	mov	r4, r3
 80012ee:	68b8      	ldr	r0, [r7, #8]
 80012f0:	f7fe ffea 	bl	80002c8 <__aeabi_ui2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4619      	mov	r1, r3
 80012f8:	4620      	mov	r0, r4
 80012fa:	f7ff f8f1 	bl	80004e0 <__aeabi_fdiv>
 80012fe:	4603      	mov	r3, r0
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f989 	bl	8000618 <__aeabi_f2iz>
 8001306:	4603      	mov	r3, r0
 8001308:	4619      	mov	r1, r3
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff fa35 	bl	800077a <TMC2209_moveAtVelocity>
      HAL_Delay(2);
 8001310:	2002      	movs	r0, #2
 8001312:	f000 fb4d 	bl	80019b0 <HAL_Delay>
    for (int i = accel; i > 0; i--)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	3b01      	subs	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b00      	cmp	r3, #0
 8001320:	dcd0      	bgt.n	80012c4 <handle_motor_movement+0x204>
    for (int i = 0; i <= accel; i++)
 8001322:	e6d4      	b.n	80010ce <handle_motor_movement+0xe>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001324:	bf00      	nop
 8001326:	e010      	b.n	800134a <handle_motor_movement+0x28a>
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001328:	bf00      	nop
 800132a:	e00e      	b.n	800134a <handle_motor_movement+0x28a>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 800132c:	bf00      	nop
 800132e:	e00c      	b.n	800134a <handle_motor_movement+0x28a>
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001330:	bf00      	nop
 8001332:	e00a      	b.n	800134a <handle_motor_movement+0x28a>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001334:	bf00      	nop
 8001336:	e008      	b.n	800134a <handle_motor_movement+0x28a>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001338:	bf00      	nop
 800133a:	e006      	b.n	800134a <handle_motor_movement+0x28a>
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 800133c:	bf00      	nop
 800133e:	e004      	b.n	800134a <handle_motor_movement+0x28a>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001340:	bf00      	nop
 8001342:	e002      	b.n	800134a <handle_motor_movement+0x28a>
    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001344:	bf00      	nop
 8001346:	e000      	b.n	800134a <handle_motor_movement+0x28a>
      if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) return;
 8001348:	bf00      	nop
    }
  }

}
 800134a:	372c      	adds	r7, #44	@ 0x2c
 800134c:	46bd      	mov	sp, r7
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	40011000 	.word	0x40011000

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b0a0      	sub	sp, #128	@ 0x80
 8001358:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f000 fac7 	bl	80018ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135e:	f000 f8bf 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001362:	f7ff fced 	bl	8000d40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001366:	f000 fa27 	bl	80017b8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800136a:	f000 f995 	bl	8001698 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  Lcd_PortType ports[] = {
 800136e:	4b53      	ldr	r3, [pc, #332]	@ (80014bc <main+0x168>)
 8001370:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001374:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001376:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    GPIOB, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin};
 800137a:	4a51      	ldr	r2, [pc, #324]	@ (80014c0 <main+0x16c>)
 800137c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001380:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001384:	e883 0003 	stmia.w	r3, {r0, r1}


  lcd = Lcd_create(ports, pins, GPIOA, LCD_RS_Pin, GPIOA, LCD_EN_Pin, LCD_4_BIT_MODE);
 8001388:	4c4e      	ldr	r4, [pc, #312]	@ (80014c4 <main+0x170>)
 800138a:	f107 0020 	add.w	r0, r7, #32
 800138e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001392:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001396:	2300      	movs	r3, #0
 8001398:	9303      	str	r3, [sp, #12]
 800139a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	4b49      	ldr	r3, [pc, #292]	@ (80014c8 <main+0x174>)
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	4b47      	ldr	r3, [pc, #284]	@ (80014c8 <main+0x174>)
 80013ac:	f7ff fd46 	bl	8000e3c <Lcd_create>
 80013b0:	4625      	mov	r5, r4
 80013b2:	f107 0420 	add.w	r4, r7, #32
 80013b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013be:	e885 0003 	stmia.w	r5, {r0, r1}

  // Lcd_string(&lcd, "Hello World");
  
  Lcd_cursor(&lcd, 1,0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	483f      	ldr	r0, [pc, #252]	@ (80014c4 <main+0x170>)
 80013c8:	f7ff fdc4 	bl	8000f54 <Lcd_cursor>
  // const char* hello = "Hello World\0";


  // HAL_UART_Transmit(&huart2, hello, sizeof(hello), 32767);

  htmc = TMC2209_create(&huart2, SERIAL_ADDRESS_0); // Assuming SERIAL_ADDRESS_0 is the desired address
 80013cc:	4c3f      	ldr	r4, [pc, #252]	@ (80014cc <main+0x178>)
 80013ce:	463b      	mov	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	493f      	ldr	r1, [pc, #252]	@ (80014d0 <main+0x17c>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f945 	bl	8000664 <TMC2209_create>
 80013da:	4625      	mov	r5, r4
 80013dc:	463c      	mov	r4, r7
 80013de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  TMC2209_init(&htmc);
 80013ea:	4838      	ldr	r0, [pc, #224]	@ (80014cc <main+0x178>)
 80013ec:	f7ff fc00 	bl	8000bf0 <TMC2209_init>

  
  // TMC2209_setStallGuardThreshold(&htmc, 20);
  
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80013f0:	213c      	movs	r1, #60	@ 0x3c
 80013f2:	4838      	ldr	r0, [pc, #224]	@ (80014d4 <main+0x180>)
 80013f4:	f001 fa4a 	bl	800288c <HAL_TIM_Encoder_Start>

  TMC2209_disable(&htmc);
 80013f8:	4834      	ldr	r0, [pc, #208]	@ (80014cc <main+0x178>)
 80013fa:	f7ff f972 	bl	80006e2 <TMC2209_disable>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t accel = 100;
 80013fe:	2364      	movs	r3, #100	@ 0x64
 8001400:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint32_t distance = 100;
 8001402:	2364      	movs	r3, #100	@ 0x64
 8001404:	667b      	str	r3, [r7, #100]	@ 0x64
  float speed = 5000;
 8001406:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <main+0x184>)
 8001408:	663b      	str	r3, [r7, #96]	@ 0x60
  bool stealthchop = false;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  bool run = true;
 8001410:	2301      	movs	r3, #1
 8001412:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  int current = 100;
 8001416:	2364      	movs	r3, #100	@ 0x64
 8001418:	65bb      	str	r3, [r7, #88]	@ 0x58
  bool configToSave = true;
 800141a:	2301      	movs	r3, #1
 800141c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57


  while (1)
  {
    if (run)
 8001420:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001424:	2b00      	cmp	r3, #0
 8001426:	d02d      	beq.n	8001484 <main+0x130>
    {
      TMC2209_enable(&htmc);
 8001428:	4828      	ldr	r0, [pc, #160]	@ (80014cc <main+0x178>)
 800142a:	f7ff f945 	bl	80006b8 <TMC2209_enable>
      if (stealthchop)
 800142e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <main+0xea>
      {
        TMC2209_enableStealthChop(&htmc);
 8001436:	4825      	ldr	r0, [pc, #148]	@ (80014cc <main+0x178>)
 8001438:	f7ff f9ae 	bl	8000798 <TMC2209_enableStealthChop>
 800143c:	e002      	b.n	8001444 <main+0xf0>
      }
      else
      {
        TMC2209_disableStealthChop(&htmc);
 800143e:	4823      	ldr	r0, [pc, #140]	@ (80014cc <main+0x178>)
 8001440:	f7ff f9ba 	bl	80007b8 <TMC2209_disableStealthChop>
      }
      HAL_Delay(200);
 8001444:	20c8      	movs	r0, #200	@ 0xc8
 8001446:	f000 fab3 	bl	80019b0 <HAL_Delay>
      TMC2209_setRunCurrent(&htmc, current);
 800144a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	481e      	ldr	r0, [pc, #120]	@ (80014cc <main+0x178>)
 8001452:	f7ff f956 	bl	8000702 <TMC2209_setRunCurrent>
      HAL_Delay(200);
 8001456:	20c8      	movs	r0, #200	@ 0xc8
 8001458:	f000 faaa 	bl	80019b0 <HAL_Delay>

      handle_motor_movement(&htmc, accel, distance, speed);
 800145c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800145e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001460:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001462:	481a      	ldr	r0, [pc, #104]	@ (80014cc <main+0x178>)
 8001464:	f7ff fe2c 	bl	80010c0 <handle_motor_movement>

      TMC2209_moveAtVelocity(&htmc, 0);
 8001468:	2100      	movs	r1, #0
 800146a:	4818      	ldr	r0, [pc, #96]	@ (80014cc <main+0x178>)
 800146c:	f7ff f985 	bl	800077a <TMC2209_moveAtVelocity>
      TMC2209_setRunCurrent(&htmc, 10);
 8001470:	210a      	movs	r1, #10
 8001472:	4816      	ldr	r0, [pc, #88]	@ (80014cc <main+0x178>)
 8001474:	f7ff f945 	bl	8000702 <TMC2209_setRunCurrent>
      TMC2209_disable(&htmc);
 8001478:	4814      	ldr	r0, [pc, #80]	@ (80014cc <main+0x178>)
 800147a:	f7ff f932 	bl	80006e2 <TMC2209_disable>
      run = false;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      // HAL_Delay(100);
      // Lcd_cursor(&lcd, 0,0);
      // Lcd_int(&lcd, 0);
    }

    if (! HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)) run = false;
 8001484:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001488:	4814      	ldr	r0, [pc, #80]	@ (80014dc <main+0x188>)
 800148a:	f000 fd1d 	bl	8001ec8 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <main+0x146>
 8001494:	2300      	movs	r3, #0
 8001496:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    Lcd_cursor(&lcd, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	4809      	ldr	r0, [pc, #36]	@ (80014c4 <main+0x170>)
 80014a0:	f7ff fd58 	bl	8000f54 <Lcd_cursor>
    Lcd_int(&lcd, (TIM2->CNT)>>2);
 80014a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	4619      	mov	r1, r3
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <main+0x170>)
 80014b0:	f7ff fd18 	bl	8000ee4 <Lcd_int>
    HAL_Delay(100);
 80014b4:	2064      	movs	r0, #100	@ 0x64
 80014b6:	f000 fa7b 	bl	80019b0 <HAL_Delay>
    if (run)
 80014ba:	e7b1      	b.n	8001420 <main+0xcc>
 80014bc:	0800394c 	.word	0x0800394c
 80014c0:	0800395c 	.word	0x0800395c
 80014c4:	20000098 	.word	0x20000098
 80014c8:	40010800 	.word	0x40010800
 80014cc:	20000078 	.word	0x20000078
 80014d0:	200000fc 	.word	0x200000fc
 80014d4:	200000b4 	.word	0x200000b4
 80014d8:	459c4000 	.word	0x459c4000
 80014dc:	40011000 	.word	0x40011000

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b090      	sub	sp, #64	@ 0x40
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	2228      	movs	r2, #40	@ 0x28
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fd90 	bl	8003014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001506:	2301      	movs	r3, #1
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150a:	2310      	movs	r3, #16
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800150e:	2300      	movs	r3, #0
 8001510:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fd06 	bl	8001f28 <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001522:	f000 f818 	bl	8001556 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f000 ff74 	bl	800242c <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800154a:	f000 f804 	bl	8001556 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3740      	adds	r7, #64	@ 0x40
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155a:	b672      	cpsid	i
}
 800155c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155e:	bf00      	nop
 8001560:	e7fd      	b.n	800155e <Error_Handler+0x8>
	...

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <HAL_MspInit+0x5c>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	4a14      	ldr	r2, [pc, #80]	@ (80015c0 <HAL_MspInit+0x5c>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6193      	str	r3, [r2, #24]
 8001576:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <HAL_MspInit+0x5c>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <HAL_MspInit+0x5c>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a0e      	ldr	r2, [pc, #56]	@ (80015c0 <HAL_MspInit+0x5c>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <HAL_MspInit+0x5c>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_MspInit+0x60>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	4a04      	ldr	r2, [pc, #16]	@ (80015c4 <HAL_MspInit+0x60>)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010000 	.word	0x40010000

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <NMI_Handler+0x4>

080015d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <MemManage_Handler+0x4>

080015e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <UsageFault_Handler+0x4>

080015f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001618:	f000 f9ae 	bl	8001978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001628:	4a14      	ldr	r2, [pc, #80]	@ (800167c <_sbrk+0x5c>)
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <_sbrk+0x60>)
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <_sbrk+0x64>)
 800163e:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <_sbrk+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001650:	f001 fce8 	bl	8003024 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800165e:	e009      	b.n	8001674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <_sbrk+0x64>)
 8001670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20005000 	.word	0x20005000
 8001680:	00000400 	.word	0x00000400
 8001684:	200000b0 	.word	0x200000b0
 8001688:	20000290 	.word	0x20000290

0800168c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	@ 0x30
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	2224      	movs	r2, #36	@ 0x24
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 fcb4 	bl	8003014 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b4:	4b21      	ldr	r3, [pc, #132]	@ (800173c <MX_TIM2_Init+0xa4>)
 80016b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <MX_TIM2_Init+0xa4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <MX_TIM2_Init+0xa4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <MX_TIM2_Init+0xa4>)
 80016ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <MX_TIM2_Init+0xa4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <MX_TIM2_Init+0xa4>)
 80016d8:	2280      	movs	r2, #128	@ 0x80
 80016da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016dc:	2303      	movs	r3, #3
 80016de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80016e0:	2302      	movs	r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016e4:	2301      	movs	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV8;
 80016e8:	230c      	movs	r3, #12
 80016ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80016ec:	230a      	movs	r3, #10
 80016ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80016f0:	2302      	movs	r3, #2
 80016f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016f4:	2301      	movs	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV8;
 80016f8:	230c      	movs	r3, #12
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80016fc:	230a      	movs	r3, #10
 80016fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4619      	mov	r1, r3
 8001706:	480d      	ldr	r0, [pc, #52]	@ (800173c <MX_TIM2_Init+0xa4>)
 8001708:	f001 f81e 	bl	8002748 <HAL_TIM_Encoder_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001712:	f7ff ff20 	bl	8001556 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	@ (800173c <MX_TIM2_Init+0xa4>)
 8001724:	f001 f9d2 	bl	8002acc <HAL_TIMEx_MasterConfigSynchronization>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800172e:	f7ff ff12 	bl	8001556 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3730      	adds	r7, #48	@ 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200000b4 	.word	0x200000b4

08001740 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800175e:	d123      	bne.n	80017a8 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001760:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <HAL_TIM_Encoder_MspInit+0x70>)
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <HAL_TIM_Encoder_MspInit+0x70>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	61d3      	str	r3, [r2, #28]
 800176c:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HAL_TIM_Encoder_MspInit+0x70>)
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <HAL_TIM_Encoder_MspInit+0x70>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a0c      	ldr	r2, [pc, #48]	@ (80017b0 <HAL_TIM_Encoder_MspInit+0x70>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_TIM_Encoder_MspInit+0x70>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001790:	2303      	movs	r3, #3
 8001792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4619      	mov	r1, r3
 80017a2:	4804      	ldr	r0, [pc, #16]	@ (80017b4 <HAL_TIM_Encoder_MspInit+0x74>)
 80017a4:	f000 fa0c 	bl	8001bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010800 	.word	0x40010800

080017b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_USART2_UART_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <MX_USART2_UART_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <MX_USART2_UART_Init+0x4c>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_USART2_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_USART2_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <MX_USART2_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_USART2_UART_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <MX_USART2_UART_Init+0x4c>)
 80017f0:	f001 f9ca 	bl	8002b88 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017fa:	f7ff feac 	bl	8001556 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200000fc 	.word	0x200000fc
 8001808:	40004400 	.word	0x40004400

0800180c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1b      	ldr	r2, [pc, #108]	@ (8001894 <HAL_UART_MspInit+0x88>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d12f      	bne.n	800188c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_UART_MspInit+0x8c>)
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	4a19      	ldr	r2, [pc, #100]	@ (8001898 <HAL_UART_MspInit+0x8c>)
 8001832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001836:	61d3      	str	r3, [r2, #28]
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <HAL_UART_MspInit+0x8c>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <HAL_UART_MspInit+0x8c>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a13      	ldr	r2, [pc, #76]	@ (8001898 <HAL_UART_MspInit+0x8c>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_UART_MspInit+0x8c>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800185c:	2304      	movs	r3, #4
 800185e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	4619      	mov	r1, r3
 800186e:	480b      	ldr	r0, [pc, #44]	@ (800189c <HAL_UART_MspInit+0x90>)
 8001870:	f000 f9a6 	bl	8001bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001874:	2308      	movs	r3, #8
 8001876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <HAL_UART_MspInit+0x90>)
 8001888:	f000 f99a 	bl	8001bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40004400 	.word	0x40004400
 8001898:	40021000 	.word	0x40021000
 800189c:	40010800 	.word	0x40010800

080018a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a0:	f7ff fef4 	bl	800168c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a4:	480b      	ldr	r0, [pc, #44]	@ (80018d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018a6:	490c      	ldr	r1, [pc, #48]	@ (80018d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018a8:	4a0c      	ldr	r2, [pc, #48]	@ (80018dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a09      	ldr	r2, [pc, #36]	@ (80018e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018bc:	4c09      	ldr	r4, [pc, #36]	@ (80018e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ca:	f001 fbb1 	bl	8003030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ce:	f7ff fd41 	bl	8001354 <main>
  bx lr
 80018d2:	4770      	bx	lr
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80018dc:	080039d8 	.word	0x080039d8
  ldr r2, =_sbss
 80018e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80018e4:	20000290 	.word	0x20000290

080018e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC1_2_IRQHandler>
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <HAL_Init+0x28>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a07      	ldr	r2, [pc, #28]	@ (8001914 <HAL_Init+0x28>)
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 f92b 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001902:	200f      	movs	r0, #15
 8001904:	f000 f808 	bl	8001918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001908:	f7ff fe2c 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40022000 	.word	0x40022000

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_InitTick+0x54>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_InitTick+0x58>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f935 	bl	8001ba6 <HAL_SYSTICK_Config>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e00e      	b.n	8001964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b0f      	cmp	r3, #15
 800194a:	d80a      	bhi.n	8001962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194c:	2200      	movs	r2, #0
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001954:	f000 f90b 	bl	8001b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001958:	4a06      	ldr	r2, [pc, #24]	@ (8001974 <HAL_InitTick+0x5c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000000 	.word	0x20000000
 8001970:	20000008 	.word	0x20000008
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_IncTick+0x1c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_IncTick+0x20>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a03      	ldr	r2, [pc, #12]	@ (8001998 <HAL_IncTick+0x20>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000008 	.word	0x20000008
 8001998:	20000144 	.word	0x20000144

0800199c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b02      	ldr	r3, [pc, #8]	@ (80019ac <HAL_GetTick+0x10>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	20000144 	.word	0x20000144

080019b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff fff0 	bl	800199c <HAL_GetTick>
 80019bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019c8:	d005      	beq.n	80019d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ca:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <HAL_Delay+0x44>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d6:	bf00      	nop
 80019d8:	f7ff ffe0 	bl	800199c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d8f7      	bhi.n	80019d8 <HAL_Delay+0x28>
  {
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000008 	.word	0x20000008

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	@ (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	60d3      	str	r3, [r2, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	@ (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	@ (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	@ 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	@ 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b38:	f7ff ff90 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff49 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff5e 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff90 	bl	8001ab0 <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5f 	bl	8001a5c <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ffb0 	bl	8001b14 <SysTick_Config>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b08b      	sub	sp, #44	@ 0x2c
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd2:	e169      	b.n	8001ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f040 8158 	bne.w	8001ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a9a      	ldr	r2, [pc, #616]	@ (8001e60 <HAL_GPIO_Init+0x2a0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d05e      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001bfc:	4a98      	ldr	r2, [pc, #608]	@ (8001e60 <HAL_GPIO_Init+0x2a0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d875      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c02:	4a98      	ldr	r2, [pc, #608]	@ (8001e64 <HAL_GPIO_Init+0x2a4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d058      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c08:	4a96      	ldr	r2, [pc, #600]	@ (8001e64 <HAL_GPIO_Init+0x2a4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d86f      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c0e:	4a96      	ldr	r2, [pc, #600]	@ (8001e68 <HAL_GPIO_Init+0x2a8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d052      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c14:	4a94      	ldr	r2, [pc, #592]	@ (8001e68 <HAL_GPIO_Init+0x2a8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d869      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c1a:	4a94      	ldr	r2, [pc, #592]	@ (8001e6c <HAL_GPIO_Init+0x2ac>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d04c      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c20:	4a92      	ldr	r2, [pc, #584]	@ (8001e6c <HAL_GPIO_Init+0x2ac>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d863      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c26:	4a92      	ldr	r2, [pc, #584]	@ (8001e70 <HAL_GPIO_Init+0x2b0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d046      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c2c:	4a90      	ldr	r2, [pc, #576]	@ (8001e70 <HAL_GPIO_Init+0x2b0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d85d      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c32:	2b12      	cmp	r3, #18
 8001c34:	d82a      	bhi.n	8001c8c <HAL_GPIO_Init+0xcc>
 8001c36:	2b12      	cmp	r3, #18
 8001c38:	d859      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c40 <HAL_GPIO_Init+0x80>)
 8001c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c40:	08001cbb 	.word	0x08001cbb
 8001c44:	08001c95 	.word	0x08001c95
 8001c48:	08001ca7 	.word	0x08001ca7
 8001c4c:	08001ce9 	.word	0x08001ce9
 8001c50:	08001cef 	.word	0x08001cef
 8001c54:	08001cef 	.word	0x08001cef
 8001c58:	08001cef 	.word	0x08001cef
 8001c5c:	08001cef 	.word	0x08001cef
 8001c60:	08001cef 	.word	0x08001cef
 8001c64:	08001cef 	.word	0x08001cef
 8001c68:	08001cef 	.word	0x08001cef
 8001c6c:	08001cef 	.word	0x08001cef
 8001c70:	08001cef 	.word	0x08001cef
 8001c74:	08001cef 	.word	0x08001cef
 8001c78:	08001cef 	.word	0x08001cef
 8001c7c:	08001cef 	.word	0x08001cef
 8001c80:	08001cef 	.word	0x08001cef
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001cb1 	.word	0x08001cb1
 8001c8c:	4a79      	ldr	r2, [pc, #484]	@ (8001e74 <HAL_GPIO_Init+0x2b4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c92:	e02c      	b.n	8001cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e029      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e024      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	3308      	adds	r3, #8
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e01f      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	623b      	str	r3, [r7, #32]
          break;
 8001cb8:	e01a      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	623b      	str	r3, [r7, #32]
          break;
 8001cc6:	e013      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	611a      	str	r2, [r3, #16]
          break;
 8001cda:	e009      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cdc:	2308      	movs	r3, #8
 8001cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	615a      	str	r2, [r3, #20]
          break;
 8001ce6:	e003      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
          break;
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          break;
 8001cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2bff      	cmp	r3, #255	@ 0xff
 8001cf4:	d801      	bhi.n	8001cfa <HAL_GPIO_Init+0x13a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	e001      	b.n	8001cfe <HAL_GPIO_Init+0x13e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2bff      	cmp	r3, #255	@ 0xff
 8001d04:	d802      	bhi.n	8001d0c <HAL_GPIO_Init+0x14c>
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x152>
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	3b08      	subs	r3, #8
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	210f      	movs	r1, #15
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 80b1 	beq.w	8001ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d40:	4b4d      	ldr	r3, [pc, #308]	@ (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	@ (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d58:	4a48      	ldr	r2, [pc, #288]	@ (8001e7c <HAL_GPIO_Init+0x2bc>)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a40      	ldr	r2, [pc, #256]	@ (8001e80 <HAL_GPIO_Init+0x2c0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_GPIO_Init+0x1ec>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3f      	ldr	r2, [pc, #252]	@ (8001e84 <HAL_GPIO_Init+0x2c4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00d      	beq.n	8001da8 <HAL_GPIO_Init+0x1e8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e88 <HAL_GPIO_Init+0x2c8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0x1e4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3d      	ldr	r2, [pc, #244]	@ (8001e8c <HAL_GPIO_Init+0x2cc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_GPIO_Init+0x1e0>
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e006      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e004      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e002      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001dac:	2300      	movs	r3, #0
 8001dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db0:	f002 0203 	and.w	r2, r2, #3
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	4093      	lsls	r3, r2
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dbe:	492f      	ldr	r1, [pc, #188]	@ (8001e7c <HAL_GPIO_Init+0x2bc>)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	492c      	ldr	r1, [pc, #176]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001de6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4928      	ldr	r1, [pc, #160]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e00:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	4922      	ldr	r1, [pc, #136]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	491e      	ldr	r1, [pc, #120]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4918      	ldr	r1, [pc, #96]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4914      	ldr	r1, [pc, #80]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d021      	beq.n	8001e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e50:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	490e      	ldr	r1, [pc, #56]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
 8001e5c:	e021      	b.n	8001ea2 <HAL_GPIO_Init+0x2e2>
 8001e5e:	bf00      	nop
 8001e60:	10320000 	.word	0x10320000
 8001e64:	10310000 	.word	0x10310000
 8001e68:	10220000 	.word	0x10220000
 8001e6c:	10210000 	.word	0x10210000
 8001e70:	10120000 	.word	0x10120000
 8001e74:	10110000 	.word	0x10110000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40010800 	.word	0x40010800
 8001e84:	40010c00 	.word	0x40010c00
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	40011400 	.word	0x40011400
 8001e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_GPIO_Init+0x304>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	4909      	ldr	r1, [pc, #36]	@ (8001ec4 <HAL_GPIO_Init+0x304>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f47f ae8e 	bne.w	8001bd4 <HAL_GPIO_Init+0x14>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	372c      	adds	r7, #44	@ 0x2c
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	887b      	ldrh	r3, [r7, #2]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e001      	b.n	8001eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	807b      	strh	r3, [r7, #2]
 8001f02:	4613      	mov	r3, r2
 8001f04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f06:	787b      	ldrb	r3, [r7, #1]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0c:	887a      	ldrh	r2, [r7, #2]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f12:	e003      	b.n	8001f1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	041a      	lsls	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e272      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8087 	beq.w	8002056 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f48:	4b92      	ldr	r3, [pc, #584]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d00c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f54:	4b8f      	ldr	r3, [pc, #572]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d112      	bne.n	8001f86 <HAL_RCC_OscConfig+0x5e>
 8001f60:	4b8c      	ldr	r3, [pc, #560]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f6c:	d10b      	bne.n	8001f86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6e:	4b89      	ldr	r3, [pc, #548]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d06c      	beq.n	8002054 <HAL_RCC_OscConfig+0x12c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d168      	bne.n	8002054 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e24c      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x76>
 8001f90:	4b80      	ldr	r3, [pc, #512]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a7f      	ldr	r2, [pc, #508]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e02e      	b.n	8001ffc <HAL_RCC_OscConfig+0xd4>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x98>
 8001fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a7a      	ldr	r2, [pc, #488]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b78      	ldr	r3, [pc, #480]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a77      	ldr	r2, [pc, #476]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e01d      	b.n	8001ffc <HAL_RCC_OscConfig+0xd4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xbc>
 8001fca:	4b72      	ldr	r3, [pc, #456]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a71      	ldr	r2, [pc, #452]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b6f      	ldr	r3, [pc, #444]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6e      	ldr	r2, [pc, #440]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0xd4>
 8001fe4:	4b6b      	ldr	r3, [pc, #428]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a6a      	ldr	r2, [pc, #424]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b68      	ldr	r3, [pc, #416]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a67      	ldr	r2, [pc, #412]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff fcca 	bl	800199c <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff fcc6 	bl	800199c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	@ 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e200      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b5d      	ldr	r3, [pc, #372]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0xe4>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fcb6 	bl	800199c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff fcb2 	bl	800199c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	@ 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1ec      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	4b53      	ldr	r3, [pc, #332]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x10c>
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d063      	beq.n	800212a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002062:	4b4c      	ldr	r3, [pc, #304]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800206e:	4b49      	ldr	r3, [pc, #292]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b08      	cmp	r3, #8
 8002078:	d11c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x18c>
 800207a:	4b46      	ldr	r3, [pc, #280]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	4b43      	ldr	r3, [pc, #268]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_RCC_OscConfig+0x176>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e1c0      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	4b3d      	ldr	r3, [pc, #244]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4939      	ldr	r1, [pc, #228]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	e03a      	b.n	800212a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020bc:	4b36      	ldr	r3, [pc, #216]	@ (8002198 <HAL_RCC_OscConfig+0x270>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7ff fc6b 	bl	800199c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ca:	f7ff fc67 	bl	800199c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e1a1      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4927      	ldr	r1, [pc, #156]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fe:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <HAL_RCC_OscConfig+0x270>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fc4a 	bl	800199c <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210c:	f7ff fc46 	bl	800199c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e180      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d03a      	beq.n	80021ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d019      	beq.n	8002172 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213e:	4b17      	ldr	r3, [pc, #92]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8002140:	2201      	movs	r2, #1
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002144:	f7ff fc2a 	bl	800199c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214c:	f7ff fc26 	bl	800199c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e160      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800216a:	2001      	movs	r0, #1
 800216c:	f000 face 	bl	800270c <RCC_Delay>
 8002170:	e01c      	b.n	80021ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002172:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7ff fc10 	bl	800199c <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217e:	e00f      	b.n	80021a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002180:	f7ff fc0c 	bl	800199c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d908      	bls.n	80021a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e146      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	42420000 	.word	0x42420000
 800219c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	4b92      	ldr	r3, [pc, #584]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e9      	bne.n	8002180 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80a6 	beq.w	8002306 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b8b      	ldr	r3, [pc, #556]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10d      	bne.n	80021e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b88      	ldr	r3, [pc, #544]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a87      	ldr	r2, [pc, #540]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d4:	61d3      	str	r3, [r2, #28]
 80021d6:	4b85      	ldr	r3, [pc, #532]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	4b82      	ldr	r3, [pc, #520]	@ (80023f0 <HAL_RCC_OscConfig+0x4c8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d118      	bne.n	8002224 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f2:	4b7f      	ldr	r3, [pc, #508]	@ (80023f0 <HAL_RCC_OscConfig+0x4c8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a7e      	ldr	r2, [pc, #504]	@ (80023f0 <HAL_RCC_OscConfig+0x4c8>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fe:	f7ff fbcd 	bl	800199c <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002206:	f7ff fbc9 	bl	800199c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b64      	cmp	r3, #100	@ 0x64
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e103      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	4b75      	ldr	r3, [pc, #468]	@ (80023f0 <HAL_RCC_OscConfig+0x4c8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x312>
 800222c:	4b6f      	ldr	r3, [pc, #444]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4a6e      	ldr	r2, [pc, #440]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6213      	str	r3, [r2, #32]
 8002238:	e02d      	b.n	8002296 <HAL_RCC_OscConfig+0x36e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x334>
 8002242:	4b6a      	ldr	r3, [pc, #424]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a69      	ldr	r2, [pc, #420]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6213      	str	r3, [r2, #32]
 800224e:	4b67      	ldr	r3, [pc, #412]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a66      	ldr	r2, [pc, #408]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	6213      	str	r3, [r2, #32]
 800225a:	e01c      	b.n	8002296 <HAL_RCC_OscConfig+0x36e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0x356>
 8002264:	4b61      	ldr	r3, [pc, #388]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4a60      	ldr	r2, [pc, #384]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6213      	str	r3, [r2, #32]
 8002270:	4b5e      	ldr	r3, [pc, #376]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a5d      	ldr	r2, [pc, #372]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e00b      	b.n	8002296 <HAL_RCC_OscConfig+0x36e>
 800227e:	4b5b      	ldr	r3, [pc, #364]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a5a      	ldr	r2, [pc, #360]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	4b58      	ldr	r3, [pc, #352]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a57      	ldr	r2, [pc, #348]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d015      	beq.n	80022ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229e:	f7ff fb7d 	bl	800199c <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7ff fb79 	bl	800199c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e0b1      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	4b4b      	ldr	r3, [pc, #300]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0ee      	beq.n	80022a6 <HAL_RCC_OscConfig+0x37e>
 80022c8:	e014      	b.n	80022f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ca:	f7ff fb67 	bl	800199c <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7ff fb63 	bl	800199c <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e09b      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	4b40      	ldr	r3, [pc, #256]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ee      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d105      	bne.n	8002306 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fa:	4b3c      	ldr	r3, [pc, #240]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a3b      	ldr	r2, [pc, #236]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002300:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002304:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8087 	beq.w	800241e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002310:	4b36      	ldr	r3, [pc, #216]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d061      	beq.n	80023e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d146      	bne.n	80023b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002324:	4b33      	ldr	r3, [pc, #204]	@ (80023f4 <HAL_RCC_OscConfig+0x4cc>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7ff fb37 	bl	800199c <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7ff fb33 	bl	800199c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e06d      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002344:	4b29      	ldr	r3, [pc, #164]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002358:	d108      	bne.n	800236c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800235a:	4b24      	ldr	r3, [pc, #144]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	4921      	ldr	r1, [pc, #132]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236c:	4b1f      	ldr	r3, [pc, #124]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a19      	ldr	r1, [r3, #32]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	430b      	orrs	r3, r1
 800237e:	491b      	ldr	r1, [pc, #108]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002384:	4b1b      	ldr	r3, [pc, #108]	@ (80023f4 <HAL_RCC_OscConfig+0x4cc>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7ff fb07 	bl	800199c <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7ff fb03 	bl	800199c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e03d      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a4:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x46a>
 80023b0:	e035      	b.n	800241e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <HAL_RCC_OscConfig+0x4cc>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7ff faf0 	bl	800199c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7ff faec 	bl	800199c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e026      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d2:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x498>
 80023de:	e01e      	b.n	800241e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d107      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e019      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
 80023f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_RCC_OscConfig+0x500>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	429a      	cmp	r2, r3
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000

0800242c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0d0      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b6a      	ldr	r3, [pc, #424]	@ (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d910      	bls.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b67      	ldr	r3, [pc, #412]	@ (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	4965      	ldr	r1, [pc, #404]	@ (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b63      	ldr	r3, [pc, #396]	@ (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0b8      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002488:	4b59      	ldr	r3, [pc, #356]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a58      	ldr	r2, [pc, #352]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002492:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a0:	4b53      	ldr	r3, [pc, #332]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a52      	ldr	r2, [pc, #328]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b50      	ldr	r3, [pc, #320]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	494d      	ldr	r1, [pc, #308]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d040      	beq.n	800254c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b47      	ldr	r3, [pc, #284]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d115      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e07f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b41      	ldr	r3, [pc, #260]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e073      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	4b3d      	ldr	r3, [pc, #244]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06b      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b39      	ldr	r3, [pc, #228]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4936      	ldr	r1, [pc, #216]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7ff fa3e 	bl	800199c <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7ff fa3a 	bl	800199c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e053      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b27      	ldr	r3, [pc, #156]	@ (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d210      	bcs.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0207 	bic.w	r2, r3, #7
 8002562:	4922      	ldr	r1, [pc, #136]	@ (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e032      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002588:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4916      	ldr	r1, [pc, #88]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025a6:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	490e      	ldr	r1, [pc, #56]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ba:	f000 f821 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025be:	4602      	mov	r2, r0
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	490a      	ldr	r1, [pc, #40]	@ (80025f4 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	5ccb      	ldrb	r3, [r1, r3]
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	4a09      	ldr	r2, [pc, #36]	@ (80025f8 <HAL_RCC_ClockConfig+0x1cc>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025d6:	4b09      	ldr	r3, [pc, #36]	@ (80025fc <HAL_RCC_ClockConfig+0x1d0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff f99c 	bl	8001918 <HAL_InitTick>

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08003968 	.word	0x08003968
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000004 	.word	0x20000004

08002600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	2300      	movs	r3, #0
 8002614:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800261a:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x94>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b04      	cmp	r3, #4
 8002628:	d002      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x30>
 800262a:	2b08      	cmp	r3, #8
 800262c:	d003      	beq.n	8002636 <HAL_RCC_GetSysClockFreq+0x36>
 800262e:	e027      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002630:	4b19      	ldr	r3, [pc, #100]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x98>)
 8002632:	613b      	str	r3, [r7, #16]
      break;
 8002634:	e027      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	0c9b      	lsrs	r3, r3, #18
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	4a17      	ldr	r2, [pc, #92]	@ (800269c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002640:	5cd3      	ldrb	r3, [r2, r3]
 8002642:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d010      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800264e:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x94>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	0c5b      	lsrs	r3, r3, #17
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	4a11      	ldr	r2, [pc, #68]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a0d      	ldr	r2, [pc, #52]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x98>)
 8002662:	fb03 f202 	mul.w	r2, r3, r2
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	fbb2 f3f3 	udiv	r3, r2, r3
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	e004      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a0c      	ldr	r2, [pc, #48]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	613b      	str	r3, [r7, #16]
      break;
 800267e:	e002      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x98>)
 8002682:	613b      	str	r3, [r7, #16]
      break;
 8002684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002686:	693b      	ldr	r3, [r7, #16]
}
 8002688:	4618      	mov	r0, r3
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	007a1200 	.word	0x007a1200
 800269c:	08003980 	.word	0x08003980
 80026a0:	08003990 	.word	0x08003990
 80026a4:	003d0900 	.word	0x003d0900

080026a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ac:	4b02      	ldr	r3, [pc, #8]	@ (80026b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	20000000 	.word	0x20000000

080026bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026c0:	f7ff fff2 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4903      	ldr	r1, [pc, #12]	@ (80026e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08003978 	.word	0x08003978

080026e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026e8:	f7ff ffde 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	0adb      	lsrs	r3, r3, #11
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	4903      	ldr	r1, [pc, #12]	@ (8002708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	08003978 	.word	0x08003978

0800270c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002714:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <RCC_Delay+0x34>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <RCC_Delay+0x38>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0a5b      	lsrs	r3, r3, #9
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002728:	bf00      	nop
  }
  while (Delay --);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	60fa      	str	r2, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f9      	bne.n	8002728 <RCC_Delay+0x1c>
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	20000000 	.word	0x20000000
 8002744:	10624dd3 	.word	0x10624dd3

08002748 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e093      	b.n	8002884 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d106      	bne.n	8002776 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7fe ffe5 	bl	8001740 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800278c:	f023 0307 	bic.w	r3, r3, #7
 8002790:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f000 f903 	bl	80029a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	4313      	orrs	r3, r2
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80027e8:	f023 030c 	bic.w	r3, r3, #12
 80027ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	4313      	orrs	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	011a      	lsls	r2, r3, #4
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	031b      	lsls	r3, r3, #12
 8002818:	4313      	orrs	r3, r2
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002826:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	4313      	orrs	r3, r2
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800289c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80028a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80028b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d110      	bne.n	80028de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d102      	bne.n	80028c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80028c2:	7b7b      	ldrb	r3, [r7, #13]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d001      	beq.n	80028cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e069      	b.n	80029a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028dc:	e031      	b.n	8002942 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d110      	bne.n	8002906 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80028e4:	7bbb      	ldrb	r3, [r7, #14]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d102      	bne.n	80028f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80028ea:	7b3b      	ldrb	r3, [r7, #12]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d001      	beq.n	80028f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e055      	b.n	80029a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002904:	e01d      	b.n	8002942 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d108      	bne.n	800291e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800290c:	7bbb      	ldrb	r3, [r7, #14]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d105      	bne.n	800291e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002912:	7b7b      	ldrb	r3, [r7, #13]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d102      	bne.n	800291e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002918:	7b3b      	ldrb	r3, [r7, #12]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d001      	beq.n	8002922 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e03e      	b.n	80029a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2202      	movs	r2, #2
 800292e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_TIM_Encoder_Start+0xc4>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b04      	cmp	r3, #4
 800294c:	d008      	beq.n	8002960 <HAL_TIM_Encoder_Start+0xd4>
 800294e:	e00f      	b.n	8002970 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2201      	movs	r2, #1
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f893 	bl	8002a84 <TIM_CCxChannelCmd>
      break;
 800295e:	e016      	b.n	800298e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	2104      	movs	r1, #4
 8002968:	4618      	mov	r0, r3
 800296a:	f000 f88b 	bl	8002a84 <TIM_CCxChannelCmd>
      break;
 800296e:	e00e      	b.n	800298e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2201      	movs	r2, #1
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f883 	bl	8002a84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2201      	movs	r2, #1
 8002984:	2104      	movs	r1, #4
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f87c 	bl	8002a84 <TIM_CCxChannelCmd>
      break;
 800298c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002a78 <TIM_Base_SetConfig+0xd0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00b      	beq.n	80029d8 <TIM_Base_SetConfig+0x30>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029c6:	d007      	beq.n	80029d8 <TIM_Base_SetConfig+0x30>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a2c      	ldr	r2, [pc, #176]	@ (8002a7c <TIM_Base_SetConfig+0xd4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_Base_SetConfig+0x30>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002a80 <TIM_Base_SetConfig+0xd8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d108      	bne.n	80029ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a22      	ldr	r2, [pc, #136]	@ (8002a78 <TIM_Base_SetConfig+0xd0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00b      	beq.n	8002a0a <TIM_Base_SetConfig+0x62>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f8:	d007      	beq.n	8002a0a <TIM_Base_SetConfig+0x62>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a1f      	ldr	r2, [pc, #124]	@ (8002a7c <TIM_Base_SetConfig+0xd4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d003      	beq.n	8002a0a <TIM_Base_SetConfig+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1e      	ldr	r2, [pc, #120]	@ (8002a80 <TIM_Base_SetConfig+0xd8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d108      	bne.n	8002a1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a0d      	ldr	r2, [pc, #52]	@ (8002a78 <TIM_Base_SetConfig+0xd0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d103      	bne.n	8002a50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f023 0201 	bic.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	611a      	str	r2, [r3, #16]
  }
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800

08002a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2201      	movs	r2, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	431a      	orrs	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	621a      	str	r2, [r3, #32]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e046      	b.n	8002b72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00e      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b30:	d009      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a12      	ldr	r2, [pc, #72]	@ (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d004      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a10      	ldr	r2, [pc, #64]	@ (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10c      	bne.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800

08002b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e042      	b.n	8002c20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fe2c 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	@ 0x24
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f971 	bl	8002eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	@ 0x28
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d175      	bne.n	8002d34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_UART_Transmit+0x2c>
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e06e      	b.n	8002d36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2221      	movs	r2, #33	@ 0x21
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c66:	f7fe fe99 	bl	800199c <HAL_GetTick>
 8002c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	88fa      	ldrh	r2, [r7, #6]
 8002c70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	88fa      	ldrh	r2, [r7, #6]
 8002c76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c80:	d108      	bne.n	8002c94 <HAL_UART_Transmit+0x6c>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d104      	bne.n	8002c94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e003      	b.n	8002c9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c9c:	e02e      	b.n	8002cfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2180      	movs	r1, #128	@ 0x80
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f848 	bl	8002d3e <UART_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e03a      	b.n	8002d36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10b      	bne.n	8002cde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	3302      	adds	r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	e007      	b.n	8002cee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	3301      	adds	r3, #1
 8002cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1cb      	bne.n	8002c9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2140      	movs	r1, #64	@ 0x40
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f814 	bl	8002d3e <UART_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e006      	b.n	8002d36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d4e:	e03b      	b.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d56:	d037      	beq.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d58:	f7fe fe20 	bl	800199c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	6a3a      	ldr	r2, [r7, #32]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d302      	bcc.n	8002d6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e03a      	b.n	8002de8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d023      	beq.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b80      	cmp	r3, #128	@ 0x80
 8002d84:	d020      	beq.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b40      	cmp	r3, #64	@ 0x40
 8002d8a:	d01d      	beq.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d116      	bne.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f81d 	bl	8002df0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2208      	movs	r2, #8
 8002dba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e00f      	b.n	8002de8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d0b4      	beq.n	8002d50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b095      	sub	sp, #84	@ 0x54
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e18:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3314      	adds	r3, #20
 8002e32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3314      	adds	r3, #20
 8002e4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e5      	bne.n	8002e2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d119      	bne.n	8002e9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f023 0310 	bic.w	r3, r3, #16
 8002e7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	330c      	adds	r3, #12
 8002e86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e88:	61ba      	str	r2, [r7, #24]
 8002e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	6979      	ldr	r1, [r7, #20]
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	e841 2300 	strex	r3, r2, [r1]
 8002e94:	613b      	str	r3, [r7, #16]
   return(result);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e5      	bne.n	8002e68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002eaa:	bf00      	nop
 8002eac:	3754      	adds	r7, #84	@ 0x54
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002eee:	f023 030c 	bic.w	r3, r3, #12
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc8 <UART_SetConfig+0x114>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d103      	bne.n	8002f24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f1c:	f7ff fbe2 	bl	80026e4 <HAL_RCC_GetPCLK2Freq>
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	e002      	b.n	8002f2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f24:	f7ff fbca 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8002f28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	009a      	lsls	r2, r3, #2
 8002f34:	441a      	add	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	4a22      	ldr	r2, [pc, #136]	@ (8002fcc <UART_SetConfig+0x118>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	0119      	lsls	r1, r3, #4
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009a      	lsls	r2, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f60:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <UART_SetConfig+0x118>)
 8002f62:	fba3 0302 	umull	r0, r3, r3, r2
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2064      	movs	r0, #100	@ 0x64
 8002f6a:	fb00 f303 	mul.w	r3, r0, r3
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	3332      	adds	r3, #50	@ 0x32
 8002f74:	4a15      	ldr	r2, [pc, #84]	@ (8002fcc <UART_SetConfig+0x118>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f80:	4419      	add	r1, r3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009a      	lsls	r2, r3, #2
 8002f8c:	441a      	add	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f98:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <UART_SetConfig+0x118>)
 8002f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2064      	movs	r0, #100	@ 0x64
 8002fa2:	fb00 f303 	mul.w	r3, r0, r3
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	3332      	adds	r3, #50	@ 0x32
 8002fac:	4a07      	ldr	r2, [pc, #28]	@ (8002fcc <UART_SetConfig+0x118>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	f003 020f 	and.w	r2, r3, #15
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	440a      	add	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	51eb851f 	.word	0x51eb851f

08002fd0 <siprintf>:
 8002fd0:	b40e      	push	{r1, r2, r3}
 8002fd2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	2400      	movs	r4, #0
 8002fda:	b09d      	sub	sp, #116	@ 0x74
 8002fdc:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002fde:	9002      	str	r0, [sp, #8]
 8002fe0:	9006      	str	r0, [sp, #24]
 8002fe2:	9107      	str	r1, [sp, #28]
 8002fe4:	9104      	str	r1, [sp, #16]
 8002fe6:	4809      	ldr	r0, [pc, #36]	@ (800300c <siprintf+0x3c>)
 8002fe8:	4909      	ldr	r1, [pc, #36]	@ (8003010 <siprintf+0x40>)
 8002fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fee:	9105      	str	r1, [sp, #20]
 8002ff0:	6800      	ldr	r0, [r0, #0]
 8002ff2:	a902      	add	r1, sp, #8
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002ff8:	f000 f992 	bl	8003320 <_svfiprintf_r>
 8002ffc:	9b02      	ldr	r3, [sp, #8]
 8002ffe:	701c      	strb	r4, [r3, #0]
 8003000:	b01d      	add	sp, #116	@ 0x74
 8003002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003006:	b003      	add	sp, #12
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	2000000c 	.word	0x2000000c
 8003010:	ffff0208 	.word	0xffff0208

08003014 <memset>:
 8003014:	4603      	mov	r3, r0
 8003016:	4402      	add	r2, r0
 8003018:	4293      	cmp	r3, r2
 800301a:	d100      	bne.n	800301e <memset+0xa>
 800301c:	4770      	bx	lr
 800301e:	f803 1b01 	strb.w	r1, [r3], #1
 8003022:	e7f9      	b.n	8003018 <memset+0x4>

08003024 <__errno>:
 8003024:	4b01      	ldr	r3, [pc, #4]	@ (800302c <__errno+0x8>)
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	2000000c 	.word	0x2000000c

08003030 <__libc_init_array>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	2600      	movs	r6, #0
 8003034:	4d0c      	ldr	r5, [pc, #48]	@ (8003068 <__libc_init_array+0x38>)
 8003036:	4c0d      	ldr	r4, [pc, #52]	@ (800306c <__libc_init_array+0x3c>)
 8003038:	1b64      	subs	r4, r4, r5
 800303a:	10a4      	asrs	r4, r4, #2
 800303c:	42a6      	cmp	r6, r4
 800303e:	d109      	bne.n	8003054 <__libc_init_array+0x24>
 8003040:	f000 fc76 	bl	8003930 <_init>
 8003044:	2600      	movs	r6, #0
 8003046:	4d0a      	ldr	r5, [pc, #40]	@ (8003070 <__libc_init_array+0x40>)
 8003048:	4c0a      	ldr	r4, [pc, #40]	@ (8003074 <__libc_init_array+0x44>)
 800304a:	1b64      	subs	r4, r4, r5
 800304c:	10a4      	asrs	r4, r4, #2
 800304e:	42a6      	cmp	r6, r4
 8003050:	d105      	bne.n	800305e <__libc_init_array+0x2e>
 8003052:	bd70      	pop	{r4, r5, r6, pc}
 8003054:	f855 3b04 	ldr.w	r3, [r5], #4
 8003058:	4798      	blx	r3
 800305a:	3601      	adds	r6, #1
 800305c:	e7ee      	b.n	800303c <__libc_init_array+0xc>
 800305e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003062:	4798      	blx	r3
 8003064:	3601      	adds	r6, #1
 8003066:	e7f2      	b.n	800304e <__libc_init_array+0x1e>
 8003068:	080039d0 	.word	0x080039d0
 800306c:	080039d0 	.word	0x080039d0
 8003070:	080039d0 	.word	0x080039d0
 8003074:	080039d4 	.word	0x080039d4

08003078 <__retarget_lock_acquire_recursive>:
 8003078:	4770      	bx	lr

0800307a <__retarget_lock_release_recursive>:
 800307a:	4770      	bx	lr

0800307c <_free_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	4605      	mov	r5, r0
 8003080:	2900      	cmp	r1, #0
 8003082:	d040      	beq.n	8003106 <_free_r+0x8a>
 8003084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003088:	1f0c      	subs	r4, r1, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	bfb8      	it	lt
 800308e:	18e4      	addlt	r4, r4, r3
 8003090:	f000 f8de 	bl	8003250 <__malloc_lock>
 8003094:	4a1c      	ldr	r2, [pc, #112]	@ (8003108 <_free_r+0x8c>)
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	b933      	cbnz	r3, 80030a8 <_free_r+0x2c>
 800309a:	6063      	str	r3, [r4, #4]
 800309c:	6014      	str	r4, [r2, #0]
 800309e:	4628      	mov	r0, r5
 80030a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030a4:	f000 b8da 	b.w	800325c <__malloc_unlock>
 80030a8:	42a3      	cmp	r3, r4
 80030aa:	d908      	bls.n	80030be <_free_r+0x42>
 80030ac:	6820      	ldr	r0, [r4, #0]
 80030ae:	1821      	adds	r1, r4, r0
 80030b0:	428b      	cmp	r3, r1
 80030b2:	bf01      	itttt	eq
 80030b4:	6819      	ldreq	r1, [r3, #0]
 80030b6:	685b      	ldreq	r3, [r3, #4]
 80030b8:	1809      	addeq	r1, r1, r0
 80030ba:	6021      	streq	r1, [r4, #0]
 80030bc:	e7ed      	b.n	800309a <_free_r+0x1e>
 80030be:	461a      	mov	r2, r3
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	b10b      	cbz	r3, 80030c8 <_free_r+0x4c>
 80030c4:	42a3      	cmp	r3, r4
 80030c6:	d9fa      	bls.n	80030be <_free_r+0x42>
 80030c8:	6811      	ldr	r1, [r2, #0]
 80030ca:	1850      	adds	r0, r2, r1
 80030cc:	42a0      	cmp	r0, r4
 80030ce:	d10b      	bne.n	80030e8 <_free_r+0x6c>
 80030d0:	6820      	ldr	r0, [r4, #0]
 80030d2:	4401      	add	r1, r0
 80030d4:	1850      	adds	r0, r2, r1
 80030d6:	4283      	cmp	r3, r0
 80030d8:	6011      	str	r1, [r2, #0]
 80030da:	d1e0      	bne.n	800309e <_free_r+0x22>
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4408      	add	r0, r1
 80030e2:	6010      	str	r0, [r2, #0]
 80030e4:	6053      	str	r3, [r2, #4]
 80030e6:	e7da      	b.n	800309e <_free_r+0x22>
 80030e8:	d902      	bls.n	80030f0 <_free_r+0x74>
 80030ea:	230c      	movs	r3, #12
 80030ec:	602b      	str	r3, [r5, #0]
 80030ee:	e7d6      	b.n	800309e <_free_r+0x22>
 80030f0:	6820      	ldr	r0, [r4, #0]
 80030f2:	1821      	adds	r1, r4, r0
 80030f4:	428b      	cmp	r3, r1
 80030f6:	bf01      	itttt	eq
 80030f8:	6819      	ldreq	r1, [r3, #0]
 80030fa:	685b      	ldreq	r3, [r3, #4]
 80030fc:	1809      	addeq	r1, r1, r0
 80030fe:	6021      	streq	r1, [r4, #0]
 8003100:	6063      	str	r3, [r4, #4]
 8003102:	6054      	str	r4, [r2, #4]
 8003104:	e7cb      	b.n	800309e <_free_r+0x22>
 8003106:	bd38      	pop	{r3, r4, r5, pc}
 8003108:	2000028c 	.word	0x2000028c

0800310c <sbrk_aligned>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	4e0f      	ldr	r6, [pc, #60]	@ (800314c <sbrk_aligned+0x40>)
 8003110:	460c      	mov	r4, r1
 8003112:	6831      	ldr	r1, [r6, #0]
 8003114:	4605      	mov	r5, r0
 8003116:	b911      	cbnz	r1, 800311e <sbrk_aligned+0x12>
 8003118:	f000 fba8 	bl	800386c <_sbrk_r>
 800311c:	6030      	str	r0, [r6, #0]
 800311e:	4621      	mov	r1, r4
 8003120:	4628      	mov	r0, r5
 8003122:	f000 fba3 	bl	800386c <_sbrk_r>
 8003126:	1c43      	adds	r3, r0, #1
 8003128:	d103      	bne.n	8003132 <sbrk_aligned+0x26>
 800312a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800312e:	4620      	mov	r0, r4
 8003130:	bd70      	pop	{r4, r5, r6, pc}
 8003132:	1cc4      	adds	r4, r0, #3
 8003134:	f024 0403 	bic.w	r4, r4, #3
 8003138:	42a0      	cmp	r0, r4
 800313a:	d0f8      	beq.n	800312e <sbrk_aligned+0x22>
 800313c:	1a21      	subs	r1, r4, r0
 800313e:	4628      	mov	r0, r5
 8003140:	f000 fb94 	bl	800386c <_sbrk_r>
 8003144:	3001      	adds	r0, #1
 8003146:	d1f2      	bne.n	800312e <sbrk_aligned+0x22>
 8003148:	e7ef      	b.n	800312a <sbrk_aligned+0x1e>
 800314a:	bf00      	nop
 800314c:	20000288 	.word	0x20000288

08003150 <_malloc_r>:
 8003150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003154:	1ccd      	adds	r5, r1, #3
 8003156:	f025 0503 	bic.w	r5, r5, #3
 800315a:	3508      	adds	r5, #8
 800315c:	2d0c      	cmp	r5, #12
 800315e:	bf38      	it	cc
 8003160:	250c      	movcc	r5, #12
 8003162:	2d00      	cmp	r5, #0
 8003164:	4606      	mov	r6, r0
 8003166:	db01      	blt.n	800316c <_malloc_r+0x1c>
 8003168:	42a9      	cmp	r1, r5
 800316a:	d904      	bls.n	8003176 <_malloc_r+0x26>
 800316c:	230c      	movs	r3, #12
 800316e:	6033      	str	r3, [r6, #0]
 8003170:	2000      	movs	r0, #0
 8003172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800324c <_malloc_r+0xfc>
 800317a:	f000 f869 	bl	8003250 <__malloc_lock>
 800317e:	f8d8 3000 	ldr.w	r3, [r8]
 8003182:	461c      	mov	r4, r3
 8003184:	bb44      	cbnz	r4, 80031d8 <_malloc_r+0x88>
 8003186:	4629      	mov	r1, r5
 8003188:	4630      	mov	r0, r6
 800318a:	f7ff ffbf 	bl	800310c <sbrk_aligned>
 800318e:	1c43      	adds	r3, r0, #1
 8003190:	4604      	mov	r4, r0
 8003192:	d158      	bne.n	8003246 <_malloc_r+0xf6>
 8003194:	f8d8 4000 	ldr.w	r4, [r8]
 8003198:	4627      	mov	r7, r4
 800319a:	2f00      	cmp	r7, #0
 800319c:	d143      	bne.n	8003226 <_malloc_r+0xd6>
 800319e:	2c00      	cmp	r4, #0
 80031a0:	d04b      	beq.n	800323a <_malloc_r+0xea>
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	4639      	mov	r1, r7
 80031a6:	4630      	mov	r0, r6
 80031a8:	eb04 0903 	add.w	r9, r4, r3
 80031ac:	f000 fb5e 	bl	800386c <_sbrk_r>
 80031b0:	4581      	cmp	r9, r0
 80031b2:	d142      	bne.n	800323a <_malloc_r+0xea>
 80031b4:	6821      	ldr	r1, [r4, #0]
 80031b6:	4630      	mov	r0, r6
 80031b8:	1a6d      	subs	r5, r5, r1
 80031ba:	4629      	mov	r1, r5
 80031bc:	f7ff ffa6 	bl	800310c <sbrk_aligned>
 80031c0:	3001      	adds	r0, #1
 80031c2:	d03a      	beq.n	800323a <_malloc_r+0xea>
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	442b      	add	r3, r5
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	f8d8 3000 	ldr.w	r3, [r8]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	bb62      	cbnz	r2, 800322c <_malloc_r+0xdc>
 80031d2:	f8c8 7000 	str.w	r7, [r8]
 80031d6:	e00f      	b.n	80031f8 <_malloc_r+0xa8>
 80031d8:	6822      	ldr	r2, [r4, #0]
 80031da:	1b52      	subs	r2, r2, r5
 80031dc:	d420      	bmi.n	8003220 <_malloc_r+0xd0>
 80031de:	2a0b      	cmp	r2, #11
 80031e0:	d917      	bls.n	8003212 <_malloc_r+0xc2>
 80031e2:	1961      	adds	r1, r4, r5
 80031e4:	42a3      	cmp	r3, r4
 80031e6:	6025      	str	r5, [r4, #0]
 80031e8:	bf18      	it	ne
 80031ea:	6059      	strne	r1, [r3, #4]
 80031ec:	6863      	ldr	r3, [r4, #4]
 80031ee:	bf08      	it	eq
 80031f0:	f8c8 1000 	streq.w	r1, [r8]
 80031f4:	5162      	str	r2, [r4, r5]
 80031f6:	604b      	str	r3, [r1, #4]
 80031f8:	4630      	mov	r0, r6
 80031fa:	f000 f82f 	bl	800325c <__malloc_unlock>
 80031fe:	f104 000b 	add.w	r0, r4, #11
 8003202:	1d23      	adds	r3, r4, #4
 8003204:	f020 0007 	bic.w	r0, r0, #7
 8003208:	1ac2      	subs	r2, r0, r3
 800320a:	bf1c      	itt	ne
 800320c:	1a1b      	subne	r3, r3, r0
 800320e:	50a3      	strne	r3, [r4, r2]
 8003210:	e7af      	b.n	8003172 <_malloc_r+0x22>
 8003212:	6862      	ldr	r2, [r4, #4]
 8003214:	42a3      	cmp	r3, r4
 8003216:	bf0c      	ite	eq
 8003218:	f8c8 2000 	streq.w	r2, [r8]
 800321c:	605a      	strne	r2, [r3, #4]
 800321e:	e7eb      	b.n	80031f8 <_malloc_r+0xa8>
 8003220:	4623      	mov	r3, r4
 8003222:	6864      	ldr	r4, [r4, #4]
 8003224:	e7ae      	b.n	8003184 <_malloc_r+0x34>
 8003226:	463c      	mov	r4, r7
 8003228:	687f      	ldr	r7, [r7, #4]
 800322a:	e7b6      	b.n	800319a <_malloc_r+0x4a>
 800322c:	461a      	mov	r2, r3
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	42a3      	cmp	r3, r4
 8003232:	d1fb      	bne.n	800322c <_malloc_r+0xdc>
 8003234:	2300      	movs	r3, #0
 8003236:	6053      	str	r3, [r2, #4]
 8003238:	e7de      	b.n	80031f8 <_malloc_r+0xa8>
 800323a:	230c      	movs	r3, #12
 800323c:	4630      	mov	r0, r6
 800323e:	6033      	str	r3, [r6, #0]
 8003240:	f000 f80c 	bl	800325c <__malloc_unlock>
 8003244:	e794      	b.n	8003170 <_malloc_r+0x20>
 8003246:	6005      	str	r5, [r0, #0]
 8003248:	e7d6      	b.n	80031f8 <_malloc_r+0xa8>
 800324a:	bf00      	nop
 800324c:	2000028c 	.word	0x2000028c

08003250 <__malloc_lock>:
 8003250:	4801      	ldr	r0, [pc, #4]	@ (8003258 <__malloc_lock+0x8>)
 8003252:	f7ff bf11 	b.w	8003078 <__retarget_lock_acquire_recursive>
 8003256:	bf00      	nop
 8003258:	20000284 	.word	0x20000284

0800325c <__malloc_unlock>:
 800325c:	4801      	ldr	r0, [pc, #4]	@ (8003264 <__malloc_unlock+0x8>)
 800325e:	f7ff bf0c 	b.w	800307a <__retarget_lock_release_recursive>
 8003262:	bf00      	nop
 8003264:	20000284 	.word	0x20000284

08003268 <__ssputs_r>:
 8003268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800326c:	461f      	mov	r7, r3
 800326e:	688e      	ldr	r6, [r1, #8]
 8003270:	4682      	mov	sl, r0
 8003272:	42be      	cmp	r6, r7
 8003274:	460c      	mov	r4, r1
 8003276:	4690      	mov	r8, r2
 8003278:	680b      	ldr	r3, [r1, #0]
 800327a:	d82d      	bhi.n	80032d8 <__ssputs_r+0x70>
 800327c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003280:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003284:	d026      	beq.n	80032d4 <__ssputs_r+0x6c>
 8003286:	6965      	ldr	r5, [r4, #20]
 8003288:	6909      	ldr	r1, [r1, #16]
 800328a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800328e:	eba3 0901 	sub.w	r9, r3, r1
 8003292:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003296:	1c7b      	adds	r3, r7, #1
 8003298:	444b      	add	r3, r9
 800329a:	106d      	asrs	r5, r5, #1
 800329c:	429d      	cmp	r5, r3
 800329e:	bf38      	it	cc
 80032a0:	461d      	movcc	r5, r3
 80032a2:	0553      	lsls	r3, r2, #21
 80032a4:	d527      	bpl.n	80032f6 <__ssputs_r+0x8e>
 80032a6:	4629      	mov	r1, r5
 80032a8:	f7ff ff52 	bl	8003150 <_malloc_r>
 80032ac:	4606      	mov	r6, r0
 80032ae:	b360      	cbz	r0, 800330a <__ssputs_r+0xa2>
 80032b0:	464a      	mov	r2, r9
 80032b2:	6921      	ldr	r1, [r4, #16]
 80032b4:	f000 faf8 	bl	80038a8 <memcpy>
 80032b8:	89a3      	ldrh	r3, [r4, #12]
 80032ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80032be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c2:	81a3      	strh	r3, [r4, #12]
 80032c4:	6126      	str	r6, [r4, #16]
 80032c6:	444e      	add	r6, r9
 80032c8:	6026      	str	r6, [r4, #0]
 80032ca:	463e      	mov	r6, r7
 80032cc:	6165      	str	r5, [r4, #20]
 80032ce:	eba5 0509 	sub.w	r5, r5, r9
 80032d2:	60a5      	str	r5, [r4, #8]
 80032d4:	42be      	cmp	r6, r7
 80032d6:	d900      	bls.n	80032da <__ssputs_r+0x72>
 80032d8:	463e      	mov	r6, r7
 80032da:	4632      	mov	r2, r6
 80032dc:	4641      	mov	r1, r8
 80032de:	6820      	ldr	r0, [r4, #0]
 80032e0:	f000 faaa 	bl	8003838 <memmove>
 80032e4:	2000      	movs	r0, #0
 80032e6:	68a3      	ldr	r3, [r4, #8]
 80032e8:	1b9b      	subs	r3, r3, r6
 80032ea:	60a3      	str	r3, [r4, #8]
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	4433      	add	r3, r6
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f6:	462a      	mov	r2, r5
 80032f8:	f000 fae4 	bl	80038c4 <_realloc_r>
 80032fc:	4606      	mov	r6, r0
 80032fe:	2800      	cmp	r0, #0
 8003300:	d1e0      	bne.n	80032c4 <__ssputs_r+0x5c>
 8003302:	4650      	mov	r0, sl
 8003304:	6921      	ldr	r1, [r4, #16]
 8003306:	f7ff feb9 	bl	800307c <_free_r>
 800330a:	230c      	movs	r3, #12
 800330c:	f8ca 3000 	str.w	r3, [sl]
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800331a:	81a3      	strh	r3, [r4, #12]
 800331c:	e7e9      	b.n	80032f2 <__ssputs_r+0x8a>
	...

08003320 <_svfiprintf_r>:
 8003320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003324:	4698      	mov	r8, r3
 8003326:	898b      	ldrh	r3, [r1, #12]
 8003328:	4607      	mov	r7, r0
 800332a:	061b      	lsls	r3, r3, #24
 800332c:	460d      	mov	r5, r1
 800332e:	4614      	mov	r4, r2
 8003330:	b09d      	sub	sp, #116	@ 0x74
 8003332:	d510      	bpl.n	8003356 <_svfiprintf_r+0x36>
 8003334:	690b      	ldr	r3, [r1, #16]
 8003336:	b973      	cbnz	r3, 8003356 <_svfiprintf_r+0x36>
 8003338:	2140      	movs	r1, #64	@ 0x40
 800333a:	f7ff ff09 	bl	8003150 <_malloc_r>
 800333e:	6028      	str	r0, [r5, #0]
 8003340:	6128      	str	r0, [r5, #16]
 8003342:	b930      	cbnz	r0, 8003352 <_svfiprintf_r+0x32>
 8003344:	230c      	movs	r3, #12
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800334c:	b01d      	add	sp, #116	@ 0x74
 800334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003352:	2340      	movs	r3, #64	@ 0x40
 8003354:	616b      	str	r3, [r5, #20]
 8003356:	2300      	movs	r3, #0
 8003358:	9309      	str	r3, [sp, #36]	@ 0x24
 800335a:	2320      	movs	r3, #32
 800335c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003360:	2330      	movs	r3, #48	@ 0x30
 8003362:	f04f 0901 	mov.w	r9, #1
 8003366:	f8cd 800c 	str.w	r8, [sp, #12]
 800336a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003504 <_svfiprintf_r+0x1e4>
 800336e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003372:	4623      	mov	r3, r4
 8003374:	469a      	mov	sl, r3
 8003376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800337a:	b10a      	cbz	r2, 8003380 <_svfiprintf_r+0x60>
 800337c:	2a25      	cmp	r2, #37	@ 0x25
 800337e:	d1f9      	bne.n	8003374 <_svfiprintf_r+0x54>
 8003380:	ebba 0b04 	subs.w	fp, sl, r4
 8003384:	d00b      	beq.n	800339e <_svfiprintf_r+0x7e>
 8003386:	465b      	mov	r3, fp
 8003388:	4622      	mov	r2, r4
 800338a:	4629      	mov	r1, r5
 800338c:	4638      	mov	r0, r7
 800338e:	f7ff ff6b 	bl	8003268 <__ssputs_r>
 8003392:	3001      	adds	r0, #1
 8003394:	f000 80a7 	beq.w	80034e6 <_svfiprintf_r+0x1c6>
 8003398:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800339a:	445a      	add	r2, fp
 800339c:	9209      	str	r2, [sp, #36]	@ 0x24
 800339e:	f89a 3000 	ldrb.w	r3, [sl]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 809f 	beq.w	80034e6 <_svfiprintf_r+0x1c6>
 80033a8:	2300      	movs	r3, #0
 80033aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033b2:	f10a 0a01 	add.w	sl, sl, #1
 80033b6:	9304      	str	r3, [sp, #16]
 80033b8:	9307      	str	r3, [sp, #28]
 80033ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033be:	931a      	str	r3, [sp, #104]	@ 0x68
 80033c0:	4654      	mov	r4, sl
 80033c2:	2205      	movs	r2, #5
 80033c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c8:	484e      	ldr	r0, [pc, #312]	@ (8003504 <_svfiprintf_r+0x1e4>)
 80033ca:	f000 fa5f 	bl	800388c <memchr>
 80033ce:	9a04      	ldr	r2, [sp, #16]
 80033d0:	b9d8      	cbnz	r0, 800340a <_svfiprintf_r+0xea>
 80033d2:	06d0      	lsls	r0, r2, #27
 80033d4:	bf44      	itt	mi
 80033d6:	2320      	movmi	r3, #32
 80033d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033dc:	0711      	lsls	r1, r2, #28
 80033de:	bf44      	itt	mi
 80033e0:	232b      	movmi	r3, #43	@ 0x2b
 80033e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033e6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80033ec:	d015      	beq.n	800341a <_svfiprintf_r+0xfa>
 80033ee:	4654      	mov	r4, sl
 80033f0:	2000      	movs	r0, #0
 80033f2:	f04f 0c0a 	mov.w	ip, #10
 80033f6:	9a07      	ldr	r2, [sp, #28]
 80033f8:	4621      	mov	r1, r4
 80033fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033fe:	3b30      	subs	r3, #48	@ 0x30
 8003400:	2b09      	cmp	r3, #9
 8003402:	d94b      	bls.n	800349c <_svfiprintf_r+0x17c>
 8003404:	b1b0      	cbz	r0, 8003434 <_svfiprintf_r+0x114>
 8003406:	9207      	str	r2, [sp, #28]
 8003408:	e014      	b.n	8003434 <_svfiprintf_r+0x114>
 800340a:	eba0 0308 	sub.w	r3, r0, r8
 800340e:	fa09 f303 	lsl.w	r3, r9, r3
 8003412:	4313      	orrs	r3, r2
 8003414:	46a2      	mov	sl, r4
 8003416:	9304      	str	r3, [sp, #16]
 8003418:	e7d2      	b.n	80033c0 <_svfiprintf_r+0xa0>
 800341a:	9b03      	ldr	r3, [sp, #12]
 800341c:	1d19      	adds	r1, r3, #4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	9103      	str	r1, [sp, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	bfbb      	ittet	lt
 8003426:	425b      	neglt	r3, r3
 8003428:	f042 0202 	orrlt.w	r2, r2, #2
 800342c:	9307      	strge	r3, [sp, #28]
 800342e:	9307      	strlt	r3, [sp, #28]
 8003430:	bfb8      	it	lt
 8003432:	9204      	strlt	r2, [sp, #16]
 8003434:	7823      	ldrb	r3, [r4, #0]
 8003436:	2b2e      	cmp	r3, #46	@ 0x2e
 8003438:	d10a      	bne.n	8003450 <_svfiprintf_r+0x130>
 800343a:	7863      	ldrb	r3, [r4, #1]
 800343c:	2b2a      	cmp	r3, #42	@ 0x2a
 800343e:	d132      	bne.n	80034a6 <_svfiprintf_r+0x186>
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	3402      	adds	r4, #2
 8003444:	1d1a      	adds	r2, r3, #4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	9203      	str	r2, [sp, #12]
 800344a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800344e:	9305      	str	r3, [sp, #20]
 8003450:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003508 <_svfiprintf_r+0x1e8>
 8003454:	2203      	movs	r2, #3
 8003456:	4650      	mov	r0, sl
 8003458:	7821      	ldrb	r1, [r4, #0]
 800345a:	f000 fa17 	bl	800388c <memchr>
 800345e:	b138      	cbz	r0, 8003470 <_svfiprintf_r+0x150>
 8003460:	2240      	movs	r2, #64	@ 0x40
 8003462:	9b04      	ldr	r3, [sp, #16]
 8003464:	eba0 000a 	sub.w	r0, r0, sl
 8003468:	4082      	lsls	r2, r0
 800346a:	4313      	orrs	r3, r2
 800346c:	3401      	adds	r4, #1
 800346e:	9304      	str	r3, [sp, #16]
 8003470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003474:	2206      	movs	r2, #6
 8003476:	4825      	ldr	r0, [pc, #148]	@ (800350c <_svfiprintf_r+0x1ec>)
 8003478:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800347c:	f000 fa06 	bl	800388c <memchr>
 8003480:	2800      	cmp	r0, #0
 8003482:	d036      	beq.n	80034f2 <_svfiprintf_r+0x1d2>
 8003484:	4b22      	ldr	r3, [pc, #136]	@ (8003510 <_svfiprintf_r+0x1f0>)
 8003486:	bb1b      	cbnz	r3, 80034d0 <_svfiprintf_r+0x1b0>
 8003488:	9b03      	ldr	r3, [sp, #12]
 800348a:	3307      	adds	r3, #7
 800348c:	f023 0307 	bic.w	r3, r3, #7
 8003490:	3308      	adds	r3, #8
 8003492:	9303      	str	r3, [sp, #12]
 8003494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003496:	4433      	add	r3, r6
 8003498:	9309      	str	r3, [sp, #36]	@ 0x24
 800349a:	e76a      	b.n	8003372 <_svfiprintf_r+0x52>
 800349c:	460c      	mov	r4, r1
 800349e:	2001      	movs	r0, #1
 80034a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80034a4:	e7a8      	b.n	80033f8 <_svfiprintf_r+0xd8>
 80034a6:	2300      	movs	r3, #0
 80034a8:	f04f 0c0a 	mov.w	ip, #10
 80034ac:	4619      	mov	r1, r3
 80034ae:	3401      	adds	r4, #1
 80034b0:	9305      	str	r3, [sp, #20]
 80034b2:	4620      	mov	r0, r4
 80034b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034b8:	3a30      	subs	r2, #48	@ 0x30
 80034ba:	2a09      	cmp	r2, #9
 80034bc:	d903      	bls.n	80034c6 <_svfiprintf_r+0x1a6>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0c6      	beq.n	8003450 <_svfiprintf_r+0x130>
 80034c2:	9105      	str	r1, [sp, #20]
 80034c4:	e7c4      	b.n	8003450 <_svfiprintf_r+0x130>
 80034c6:	4604      	mov	r4, r0
 80034c8:	2301      	movs	r3, #1
 80034ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80034ce:	e7f0      	b.n	80034b2 <_svfiprintf_r+0x192>
 80034d0:	ab03      	add	r3, sp, #12
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	462a      	mov	r2, r5
 80034d6:	4638      	mov	r0, r7
 80034d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003514 <_svfiprintf_r+0x1f4>)
 80034da:	a904      	add	r1, sp, #16
 80034dc:	f3af 8000 	nop.w
 80034e0:	1c42      	adds	r2, r0, #1
 80034e2:	4606      	mov	r6, r0
 80034e4:	d1d6      	bne.n	8003494 <_svfiprintf_r+0x174>
 80034e6:	89ab      	ldrh	r3, [r5, #12]
 80034e8:	065b      	lsls	r3, r3, #25
 80034ea:	f53f af2d 	bmi.w	8003348 <_svfiprintf_r+0x28>
 80034ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034f0:	e72c      	b.n	800334c <_svfiprintf_r+0x2c>
 80034f2:	ab03      	add	r3, sp, #12
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	462a      	mov	r2, r5
 80034f8:	4638      	mov	r0, r7
 80034fa:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <_svfiprintf_r+0x1f4>)
 80034fc:	a904      	add	r1, sp, #16
 80034fe:	f000 f87d 	bl	80035fc <_printf_i>
 8003502:	e7ed      	b.n	80034e0 <_svfiprintf_r+0x1c0>
 8003504:	08003992 	.word	0x08003992
 8003508:	08003998 	.word	0x08003998
 800350c:	0800399c 	.word	0x0800399c
 8003510:	00000000 	.word	0x00000000
 8003514:	08003269 	.word	0x08003269

08003518 <_printf_common>:
 8003518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800351c:	4616      	mov	r6, r2
 800351e:	4698      	mov	r8, r3
 8003520:	688a      	ldr	r2, [r1, #8]
 8003522:	690b      	ldr	r3, [r1, #16]
 8003524:	4607      	mov	r7, r0
 8003526:	4293      	cmp	r3, r2
 8003528:	bfb8      	it	lt
 800352a:	4613      	movlt	r3, r2
 800352c:	6033      	str	r3, [r6, #0]
 800352e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003532:	460c      	mov	r4, r1
 8003534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003538:	b10a      	cbz	r2, 800353e <_printf_common+0x26>
 800353a:	3301      	adds	r3, #1
 800353c:	6033      	str	r3, [r6, #0]
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	0699      	lsls	r1, r3, #26
 8003542:	bf42      	ittt	mi
 8003544:	6833      	ldrmi	r3, [r6, #0]
 8003546:	3302      	addmi	r3, #2
 8003548:	6033      	strmi	r3, [r6, #0]
 800354a:	6825      	ldr	r5, [r4, #0]
 800354c:	f015 0506 	ands.w	r5, r5, #6
 8003550:	d106      	bne.n	8003560 <_printf_common+0x48>
 8003552:	f104 0a19 	add.w	sl, r4, #25
 8003556:	68e3      	ldr	r3, [r4, #12]
 8003558:	6832      	ldr	r2, [r6, #0]
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	42ab      	cmp	r3, r5
 800355e:	dc2b      	bgt.n	80035b8 <_printf_common+0xa0>
 8003560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	3b00      	subs	r3, #0
 8003568:	bf18      	it	ne
 800356a:	2301      	movne	r3, #1
 800356c:	0692      	lsls	r2, r2, #26
 800356e:	d430      	bmi.n	80035d2 <_printf_common+0xba>
 8003570:	4641      	mov	r1, r8
 8003572:	4638      	mov	r0, r7
 8003574:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003578:	47c8      	blx	r9
 800357a:	3001      	adds	r0, #1
 800357c:	d023      	beq.n	80035c6 <_printf_common+0xae>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	6922      	ldr	r2, [r4, #16]
 8003582:	f003 0306 	and.w	r3, r3, #6
 8003586:	2b04      	cmp	r3, #4
 8003588:	bf14      	ite	ne
 800358a:	2500      	movne	r5, #0
 800358c:	6833      	ldreq	r3, [r6, #0]
 800358e:	f04f 0600 	mov.w	r6, #0
 8003592:	bf08      	it	eq
 8003594:	68e5      	ldreq	r5, [r4, #12]
 8003596:	f104 041a 	add.w	r4, r4, #26
 800359a:	bf08      	it	eq
 800359c:	1aed      	subeq	r5, r5, r3
 800359e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035a2:	bf08      	it	eq
 80035a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a8:	4293      	cmp	r3, r2
 80035aa:	bfc4      	itt	gt
 80035ac:	1a9b      	subgt	r3, r3, r2
 80035ae:	18ed      	addgt	r5, r5, r3
 80035b0:	42b5      	cmp	r5, r6
 80035b2:	d11a      	bne.n	80035ea <_printf_common+0xd2>
 80035b4:	2000      	movs	r0, #0
 80035b6:	e008      	b.n	80035ca <_printf_common+0xb2>
 80035b8:	2301      	movs	r3, #1
 80035ba:	4652      	mov	r2, sl
 80035bc:	4641      	mov	r1, r8
 80035be:	4638      	mov	r0, r7
 80035c0:	47c8      	blx	r9
 80035c2:	3001      	adds	r0, #1
 80035c4:	d103      	bne.n	80035ce <_printf_common+0xb6>
 80035c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ce:	3501      	adds	r5, #1
 80035d0:	e7c1      	b.n	8003556 <_printf_common+0x3e>
 80035d2:	2030      	movs	r0, #48	@ 0x30
 80035d4:	18e1      	adds	r1, r4, r3
 80035d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035e0:	4422      	add	r2, r4
 80035e2:	3302      	adds	r3, #2
 80035e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035e8:	e7c2      	b.n	8003570 <_printf_common+0x58>
 80035ea:	2301      	movs	r3, #1
 80035ec:	4622      	mov	r2, r4
 80035ee:	4641      	mov	r1, r8
 80035f0:	4638      	mov	r0, r7
 80035f2:	47c8      	blx	r9
 80035f4:	3001      	adds	r0, #1
 80035f6:	d0e6      	beq.n	80035c6 <_printf_common+0xae>
 80035f8:	3601      	adds	r6, #1
 80035fa:	e7d9      	b.n	80035b0 <_printf_common+0x98>

080035fc <_printf_i>:
 80035fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003600:	7e0f      	ldrb	r7, [r1, #24]
 8003602:	4691      	mov	r9, r2
 8003604:	2f78      	cmp	r7, #120	@ 0x78
 8003606:	4680      	mov	r8, r0
 8003608:	460c      	mov	r4, r1
 800360a:	469a      	mov	sl, r3
 800360c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800360e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003612:	d807      	bhi.n	8003624 <_printf_i+0x28>
 8003614:	2f62      	cmp	r7, #98	@ 0x62
 8003616:	d80a      	bhi.n	800362e <_printf_i+0x32>
 8003618:	2f00      	cmp	r7, #0
 800361a:	f000 80d1 	beq.w	80037c0 <_printf_i+0x1c4>
 800361e:	2f58      	cmp	r7, #88	@ 0x58
 8003620:	f000 80b8 	beq.w	8003794 <_printf_i+0x198>
 8003624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800362c:	e03a      	b.n	80036a4 <_printf_i+0xa8>
 800362e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003632:	2b15      	cmp	r3, #21
 8003634:	d8f6      	bhi.n	8003624 <_printf_i+0x28>
 8003636:	a101      	add	r1, pc, #4	@ (adr r1, 800363c <_printf_i+0x40>)
 8003638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800363c:	08003695 	.word	0x08003695
 8003640:	080036a9 	.word	0x080036a9
 8003644:	08003625 	.word	0x08003625
 8003648:	08003625 	.word	0x08003625
 800364c:	08003625 	.word	0x08003625
 8003650:	08003625 	.word	0x08003625
 8003654:	080036a9 	.word	0x080036a9
 8003658:	08003625 	.word	0x08003625
 800365c:	08003625 	.word	0x08003625
 8003660:	08003625 	.word	0x08003625
 8003664:	08003625 	.word	0x08003625
 8003668:	080037a7 	.word	0x080037a7
 800366c:	080036d3 	.word	0x080036d3
 8003670:	08003761 	.word	0x08003761
 8003674:	08003625 	.word	0x08003625
 8003678:	08003625 	.word	0x08003625
 800367c:	080037c9 	.word	0x080037c9
 8003680:	08003625 	.word	0x08003625
 8003684:	080036d3 	.word	0x080036d3
 8003688:	08003625 	.word	0x08003625
 800368c:	08003625 	.word	0x08003625
 8003690:	08003769 	.word	0x08003769
 8003694:	6833      	ldr	r3, [r6, #0]
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6032      	str	r2, [r6, #0]
 800369c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036a4:	2301      	movs	r3, #1
 80036a6:	e09c      	b.n	80037e2 <_printf_i+0x1e6>
 80036a8:	6833      	ldr	r3, [r6, #0]
 80036aa:	6820      	ldr	r0, [r4, #0]
 80036ac:	1d19      	adds	r1, r3, #4
 80036ae:	6031      	str	r1, [r6, #0]
 80036b0:	0606      	lsls	r6, r0, #24
 80036b2:	d501      	bpl.n	80036b8 <_printf_i+0xbc>
 80036b4:	681d      	ldr	r5, [r3, #0]
 80036b6:	e003      	b.n	80036c0 <_printf_i+0xc4>
 80036b8:	0645      	lsls	r5, r0, #25
 80036ba:	d5fb      	bpl.n	80036b4 <_printf_i+0xb8>
 80036bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036c0:	2d00      	cmp	r5, #0
 80036c2:	da03      	bge.n	80036cc <_printf_i+0xd0>
 80036c4:	232d      	movs	r3, #45	@ 0x2d
 80036c6:	426d      	negs	r5, r5
 80036c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036cc:	230a      	movs	r3, #10
 80036ce:	4858      	ldr	r0, [pc, #352]	@ (8003830 <_printf_i+0x234>)
 80036d0:	e011      	b.n	80036f6 <_printf_i+0xfa>
 80036d2:	6821      	ldr	r1, [r4, #0]
 80036d4:	6833      	ldr	r3, [r6, #0]
 80036d6:	0608      	lsls	r0, r1, #24
 80036d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80036dc:	d402      	bmi.n	80036e4 <_printf_i+0xe8>
 80036de:	0649      	lsls	r1, r1, #25
 80036e0:	bf48      	it	mi
 80036e2:	b2ad      	uxthmi	r5, r5
 80036e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80036e6:	6033      	str	r3, [r6, #0]
 80036e8:	bf14      	ite	ne
 80036ea:	230a      	movne	r3, #10
 80036ec:	2308      	moveq	r3, #8
 80036ee:	4850      	ldr	r0, [pc, #320]	@ (8003830 <_printf_i+0x234>)
 80036f0:	2100      	movs	r1, #0
 80036f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036f6:	6866      	ldr	r6, [r4, #4]
 80036f8:	2e00      	cmp	r6, #0
 80036fa:	60a6      	str	r6, [r4, #8]
 80036fc:	db05      	blt.n	800370a <_printf_i+0x10e>
 80036fe:	6821      	ldr	r1, [r4, #0]
 8003700:	432e      	orrs	r6, r5
 8003702:	f021 0104 	bic.w	r1, r1, #4
 8003706:	6021      	str	r1, [r4, #0]
 8003708:	d04b      	beq.n	80037a2 <_printf_i+0x1a6>
 800370a:	4616      	mov	r6, r2
 800370c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003710:	fb03 5711 	mls	r7, r3, r1, r5
 8003714:	5dc7      	ldrb	r7, [r0, r7]
 8003716:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800371a:	462f      	mov	r7, r5
 800371c:	42bb      	cmp	r3, r7
 800371e:	460d      	mov	r5, r1
 8003720:	d9f4      	bls.n	800370c <_printf_i+0x110>
 8003722:	2b08      	cmp	r3, #8
 8003724:	d10b      	bne.n	800373e <_printf_i+0x142>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	07df      	lsls	r7, r3, #31
 800372a:	d508      	bpl.n	800373e <_printf_i+0x142>
 800372c:	6923      	ldr	r3, [r4, #16]
 800372e:	6861      	ldr	r1, [r4, #4]
 8003730:	4299      	cmp	r1, r3
 8003732:	bfde      	ittt	le
 8003734:	2330      	movle	r3, #48	@ 0x30
 8003736:	f806 3c01 	strble.w	r3, [r6, #-1]
 800373a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800373e:	1b92      	subs	r2, r2, r6
 8003740:	6122      	str	r2, [r4, #16]
 8003742:	464b      	mov	r3, r9
 8003744:	4621      	mov	r1, r4
 8003746:	4640      	mov	r0, r8
 8003748:	f8cd a000 	str.w	sl, [sp]
 800374c:	aa03      	add	r2, sp, #12
 800374e:	f7ff fee3 	bl	8003518 <_printf_common>
 8003752:	3001      	adds	r0, #1
 8003754:	d14a      	bne.n	80037ec <_printf_i+0x1f0>
 8003756:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800375a:	b004      	add	sp, #16
 800375c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	f043 0320 	orr.w	r3, r3, #32
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	2778      	movs	r7, #120	@ 0x78
 800376a:	4832      	ldr	r0, [pc, #200]	@ (8003834 <_printf_i+0x238>)
 800376c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	6831      	ldr	r1, [r6, #0]
 8003774:	061f      	lsls	r7, r3, #24
 8003776:	f851 5b04 	ldr.w	r5, [r1], #4
 800377a:	d402      	bmi.n	8003782 <_printf_i+0x186>
 800377c:	065f      	lsls	r7, r3, #25
 800377e:	bf48      	it	mi
 8003780:	b2ad      	uxthmi	r5, r5
 8003782:	6031      	str	r1, [r6, #0]
 8003784:	07d9      	lsls	r1, r3, #31
 8003786:	bf44      	itt	mi
 8003788:	f043 0320 	orrmi.w	r3, r3, #32
 800378c:	6023      	strmi	r3, [r4, #0]
 800378e:	b11d      	cbz	r5, 8003798 <_printf_i+0x19c>
 8003790:	2310      	movs	r3, #16
 8003792:	e7ad      	b.n	80036f0 <_printf_i+0xf4>
 8003794:	4826      	ldr	r0, [pc, #152]	@ (8003830 <_printf_i+0x234>)
 8003796:	e7e9      	b.n	800376c <_printf_i+0x170>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	f023 0320 	bic.w	r3, r3, #32
 800379e:	6023      	str	r3, [r4, #0]
 80037a0:	e7f6      	b.n	8003790 <_printf_i+0x194>
 80037a2:	4616      	mov	r6, r2
 80037a4:	e7bd      	b.n	8003722 <_printf_i+0x126>
 80037a6:	6833      	ldr	r3, [r6, #0]
 80037a8:	6825      	ldr	r5, [r4, #0]
 80037aa:	1d18      	adds	r0, r3, #4
 80037ac:	6961      	ldr	r1, [r4, #20]
 80037ae:	6030      	str	r0, [r6, #0]
 80037b0:	062e      	lsls	r6, r5, #24
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	d501      	bpl.n	80037ba <_printf_i+0x1be>
 80037b6:	6019      	str	r1, [r3, #0]
 80037b8:	e002      	b.n	80037c0 <_printf_i+0x1c4>
 80037ba:	0668      	lsls	r0, r5, #25
 80037bc:	d5fb      	bpl.n	80037b6 <_printf_i+0x1ba>
 80037be:	8019      	strh	r1, [r3, #0]
 80037c0:	2300      	movs	r3, #0
 80037c2:	4616      	mov	r6, r2
 80037c4:	6123      	str	r3, [r4, #16]
 80037c6:	e7bc      	b.n	8003742 <_printf_i+0x146>
 80037c8:	6833      	ldr	r3, [r6, #0]
 80037ca:	2100      	movs	r1, #0
 80037cc:	1d1a      	adds	r2, r3, #4
 80037ce:	6032      	str	r2, [r6, #0]
 80037d0:	681e      	ldr	r6, [r3, #0]
 80037d2:	6862      	ldr	r2, [r4, #4]
 80037d4:	4630      	mov	r0, r6
 80037d6:	f000 f859 	bl	800388c <memchr>
 80037da:	b108      	cbz	r0, 80037e0 <_printf_i+0x1e4>
 80037dc:	1b80      	subs	r0, r0, r6
 80037de:	6060      	str	r0, [r4, #4]
 80037e0:	6863      	ldr	r3, [r4, #4]
 80037e2:	6123      	str	r3, [r4, #16]
 80037e4:	2300      	movs	r3, #0
 80037e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037ea:	e7aa      	b.n	8003742 <_printf_i+0x146>
 80037ec:	4632      	mov	r2, r6
 80037ee:	4649      	mov	r1, r9
 80037f0:	4640      	mov	r0, r8
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	47d0      	blx	sl
 80037f6:	3001      	adds	r0, #1
 80037f8:	d0ad      	beq.n	8003756 <_printf_i+0x15a>
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	079b      	lsls	r3, r3, #30
 80037fe:	d413      	bmi.n	8003828 <_printf_i+0x22c>
 8003800:	68e0      	ldr	r0, [r4, #12]
 8003802:	9b03      	ldr	r3, [sp, #12]
 8003804:	4298      	cmp	r0, r3
 8003806:	bfb8      	it	lt
 8003808:	4618      	movlt	r0, r3
 800380a:	e7a6      	b.n	800375a <_printf_i+0x15e>
 800380c:	2301      	movs	r3, #1
 800380e:	4632      	mov	r2, r6
 8003810:	4649      	mov	r1, r9
 8003812:	4640      	mov	r0, r8
 8003814:	47d0      	blx	sl
 8003816:	3001      	adds	r0, #1
 8003818:	d09d      	beq.n	8003756 <_printf_i+0x15a>
 800381a:	3501      	adds	r5, #1
 800381c:	68e3      	ldr	r3, [r4, #12]
 800381e:	9903      	ldr	r1, [sp, #12]
 8003820:	1a5b      	subs	r3, r3, r1
 8003822:	42ab      	cmp	r3, r5
 8003824:	dcf2      	bgt.n	800380c <_printf_i+0x210>
 8003826:	e7eb      	b.n	8003800 <_printf_i+0x204>
 8003828:	2500      	movs	r5, #0
 800382a:	f104 0619 	add.w	r6, r4, #25
 800382e:	e7f5      	b.n	800381c <_printf_i+0x220>
 8003830:	080039a3 	.word	0x080039a3
 8003834:	080039b4 	.word	0x080039b4

08003838 <memmove>:
 8003838:	4288      	cmp	r0, r1
 800383a:	b510      	push	{r4, lr}
 800383c:	eb01 0402 	add.w	r4, r1, r2
 8003840:	d902      	bls.n	8003848 <memmove+0x10>
 8003842:	4284      	cmp	r4, r0
 8003844:	4623      	mov	r3, r4
 8003846:	d807      	bhi.n	8003858 <memmove+0x20>
 8003848:	1e43      	subs	r3, r0, #1
 800384a:	42a1      	cmp	r1, r4
 800384c:	d008      	beq.n	8003860 <memmove+0x28>
 800384e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003856:	e7f8      	b.n	800384a <memmove+0x12>
 8003858:	4601      	mov	r1, r0
 800385a:	4402      	add	r2, r0
 800385c:	428a      	cmp	r2, r1
 800385e:	d100      	bne.n	8003862 <memmove+0x2a>
 8003860:	bd10      	pop	{r4, pc}
 8003862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800386a:	e7f7      	b.n	800385c <memmove+0x24>

0800386c <_sbrk_r>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	2300      	movs	r3, #0
 8003870:	4d05      	ldr	r5, [pc, #20]	@ (8003888 <_sbrk_r+0x1c>)
 8003872:	4604      	mov	r4, r0
 8003874:	4608      	mov	r0, r1
 8003876:	602b      	str	r3, [r5, #0]
 8003878:	f7fd fed2 	bl	8001620 <_sbrk>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d102      	bne.n	8003886 <_sbrk_r+0x1a>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	b103      	cbz	r3, 8003886 <_sbrk_r+0x1a>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	20000280 	.word	0x20000280

0800388c <memchr>:
 800388c:	4603      	mov	r3, r0
 800388e:	b510      	push	{r4, lr}
 8003890:	b2c9      	uxtb	r1, r1
 8003892:	4402      	add	r2, r0
 8003894:	4293      	cmp	r3, r2
 8003896:	4618      	mov	r0, r3
 8003898:	d101      	bne.n	800389e <memchr+0x12>
 800389a:	2000      	movs	r0, #0
 800389c:	e003      	b.n	80038a6 <memchr+0x1a>
 800389e:	7804      	ldrb	r4, [r0, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	428c      	cmp	r4, r1
 80038a4:	d1f6      	bne.n	8003894 <memchr+0x8>
 80038a6:	bd10      	pop	{r4, pc}

080038a8 <memcpy>:
 80038a8:	440a      	add	r2, r1
 80038aa:	4291      	cmp	r1, r2
 80038ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80038b0:	d100      	bne.n	80038b4 <memcpy+0xc>
 80038b2:	4770      	bx	lr
 80038b4:	b510      	push	{r4, lr}
 80038b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038ba:	4291      	cmp	r1, r2
 80038bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038c0:	d1f9      	bne.n	80038b6 <memcpy+0xe>
 80038c2:	bd10      	pop	{r4, pc}

080038c4 <_realloc_r>:
 80038c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c8:	4607      	mov	r7, r0
 80038ca:	4614      	mov	r4, r2
 80038cc:	460d      	mov	r5, r1
 80038ce:	b921      	cbnz	r1, 80038da <_realloc_r+0x16>
 80038d0:	4611      	mov	r1, r2
 80038d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038d6:	f7ff bc3b 	b.w	8003150 <_malloc_r>
 80038da:	b92a      	cbnz	r2, 80038e8 <_realloc_r+0x24>
 80038dc:	f7ff fbce 	bl	800307c <_free_r>
 80038e0:	4625      	mov	r5, r4
 80038e2:	4628      	mov	r0, r5
 80038e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038e8:	f000 f81a 	bl	8003920 <_malloc_usable_size_r>
 80038ec:	4284      	cmp	r4, r0
 80038ee:	4606      	mov	r6, r0
 80038f0:	d802      	bhi.n	80038f8 <_realloc_r+0x34>
 80038f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038f6:	d8f4      	bhi.n	80038e2 <_realloc_r+0x1e>
 80038f8:	4621      	mov	r1, r4
 80038fa:	4638      	mov	r0, r7
 80038fc:	f7ff fc28 	bl	8003150 <_malloc_r>
 8003900:	4680      	mov	r8, r0
 8003902:	b908      	cbnz	r0, 8003908 <_realloc_r+0x44>
 8003904:	4645      	mov	r5, r8
 8003906:	e7ec      	b.n	80038e2 <_realloc_r+0x1e>
 8003908:	42b4      	cmp	r4, r6
 800390a:	4622      	mov	r2, r4
 800390c:	4629      	mov	r1, r5
 800390e:	bf28      	it	cs
 8003910:	4632      	movcs	r2, r6
 8003912:	f7ff ffc9 	bl	80038a8 <memcpy>
 8003916:	4629      	mov	r1, r5
 8003918:	4638      	mov	r0, r7
 800391a:	f7ff fbaf 	bl	800307c <_free_r>
 800391e:	e7f1      	b.n	8003904 <_realloc_r+0x40>

08003920 <_malloc_usable_size_r>:
 8003920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003924:	1f18      	subs	r0, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	bfbc      	itt	lt
 800392a:	580b      	ldrlt	r3, [r1, r0]
 800392c:	18c0      	addlt	r0, r0, r3
 800392e:	4770      	bx	lr

08003930 <_init>:
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	bf00      	nop
 8003934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003936:	bc08      	pop	{r3}
 8003938:	469e      	mov	lr, r3
 800393a:	4770      	bx	lr

0800393c <_fini>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	bf00      	nop
 8003940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003942:	bc08      	pop	{r3}
 8003944:	469e      	mov	lr, r3
 8003946:	4770      	bx	lr
